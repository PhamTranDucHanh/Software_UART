
T2_SLAVE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000300c  0800447c  0800447c  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007488  08007488  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007488  08007488  00017488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007490  08007490  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001d8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001e4  200001e4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016337  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e6e  00000000  00000000  00036373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  000391e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb0  00000000  00000000  0003a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b61  00000000  00000000  0003b280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014e5f  00000000  00000000  0005dde1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf89a  00000000  00000000  00072c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001424da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004604  00000000  00000000  00142530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004464 	.word	0x08004464

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004464 	.word	0x08004464

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08e      	sub	sp, #56	; 0x38
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80004da:	463b      	mov	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]
 80004ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80004ec:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <MX_FSMC_Init+0xec>)
 80004ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80004f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80004f4:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <MX_FSMC_Init+0xec>)
 80004f6:	4a2e      	ldr	r2, [pc, #184]	; (80005b0 <MX_FSMC_Init+0xf0>)
 80004f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <MX_FSMC_Init+0xec>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000500:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <MX_FSMC_Init+0xec>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000506:	4b29      	ldr	r3, [pc, #164]	; (80005ac <MX_FSMC_Init+0xec>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800050c:	4b27      	ldr	r3, [pc, #156]	; (80005ac <MX_FSMC_Init+0xec>)
 800050e:	2210      	movs	r2, #16
 8000510:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000512:	4b26      	ldr	r3, [pc, #152]	; (80005ac <MX_FSMC_Init+0xec>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_FSMC_Init+0xec>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <MX_FSMC_Init+0xec>)
 8000520:	2200      	movs	r2, #0
 8000522:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <MX_FSMC_Init+0xec>)
 8000526:	2200      	movs	r2, #0
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_FSMC_Init+0xec>)
 800052c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_FSMC_Init+0xec>)
 8000534:	2200      	movs	r2, #0
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_FSMC_Init+0xec>)
 800053a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_FSMC_Init+0xec>)
 8000542:	2200      	movs	r2, #0
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_FSMC_Init+0xec>)
 8000548:	2200      	movs	r2, #0
 800054a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <MX_FSMC_Init+0xec>)
 800054e:	2200      	movs	r2, #0
 8000550:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000552:	230f      	movs	r3, #15
 8000554:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000556:	230f      	movs	r3, #15
 8000558:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800055a:	233c      	movs	r3, #60	; 0x3c
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000562:	2310      	movs	r3, #16
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000566:	2311      	movs	r3, #17
 8000568:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800056a:	2300      	movs	r3, #0
 800056c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800056e:	2308      	movs	r3, #8
 8000570:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000572:	230f      	movs	r3, #15
 8000574:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000576:	2309      	movs	r3, #9
 8000578:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800057e:	2310      	movs	r3, #16
 8000580:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000582:	2311      	movs	r3, #17
 8000584:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800058a:	463a      	mov	r2, r7
 800058c:	f107 031c 	add.w	r3, r7, #28
 8000590:	4619      	mov	r1, r3
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <MX_FSMC_Init+0xec>)
 8000594:	f002 fb3b 	bl	8002c0e <HAL_SRAM_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800059e:	f000 ff4b 	bl	8001438 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80005a2:	bf00      	nop
 80005a4:	3738      	adds	r7, #56	; 0x38
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	2000002c 	.word	0x2000002c
 80005b0:	a0000104 	.word	0xa0000104

080005b4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <HAL_FSMC_MspInit+0x88>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d131      	bne.n	8000634 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <HAL_FSMC_MspInit+0x88>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6393      	str	r3, [r2, #56]	; 0x38
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80005f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80005f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000604:	230c      	movs	r3, #12
 8000606:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4619      	mov	r1, r3
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <HAL_FSMC_MspInit+0x90>)
 800060e:	f001 fc33 	bl	8001e78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000612:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000616:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000624:	230c      	movs	r3, #12
 8000626:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4619      	mov	r1, r3
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <HAL_FSMC_MspInit+0x94>)
 800062e:	f001 fc23 	bl	8001e78 <HAL_GPIO_Init>
 8000632:	e000      	b.n	8000636 <HAL_FSMC_MspInit+0x82>
    return;
 8000634:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000028 	.word	0x20000028
 8000640:	40023800 	.word	0x40023800
 8000644:	40021000 	.word	0x40021000
 8000648:	40020c00 	.word	0x40020c00

0800064c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000654:	f7ff ffae 	bl	80005b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	; 0x38
 8000664:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
 800067a:	4b87      	ldr	r3, [pc, #540]	; (8000898 <MX_GPIO_Init+0x238>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a86      	ldr	r2, [pc, #536]	; (8000898 <MX_GPIO_Init+0x238>)
 8000680:	f043 0310 	orr.w	r3, r3, #16
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b84      	ldr	r3, [pc, #528]	; (8000898 <MX_GPIO_Init+0x238>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	623b      	str	r3, [r7, #32]
 8000690:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
 8000696:	4b80      	ldr	r3, [pc, #512]	; (8000898 <MX_GPIO_Init+0x238>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a7f      	ldr	r2, [pc, #508]	; (8000898 <MX_GPIO_Init+0x238>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b7d      	ldr	r3, [pc, #500]	; (8000898 <MX_GPIO_Init+0x238>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	61fb      	str	r3, [r7, #28]
 80006ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	4b79      	ldr	r3, [pc, #484]	; (8000898 <MX_GPIO_Init+0x238>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a78      	ldr	r2, [pc, #480]	; (8000898 <MX_GPIO_Init+0x238>)
 80006b8:	f043 0320 	orr.w	r3, r3, #32
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b76      	ldr	r3, [pc, #472]	; (8000898 <MX_GPIO_Init+0x238>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0320 	and.w	r3, r3, #32
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	4b72      	ldr	r3, [pc, #456]	; (8000898 <MX_GPIO_Init+0x238>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a71      	ldr	r2, [pc, #452]	; (8000898 <MX_GPIO_Init+0x238>)
 80006d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b6f      	ldr	r3, [pc, #444]	; (8000898 <MX_GPIO_Init+0x238>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b6b      	ldr	r3, [pc, #428]	; (8000898 <MX_GPIO_Init+0x238>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a6a      	ldr	r2, [pc, #424]	; (8000898 <MX_GPIO_Init+0x238>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b68      	ldr	r3, [pc, #416]	; (8000898 <MX_GPIO_Init+0x238>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b64      	ldr	r3, [pc, #400]	; (8000898 <MX_GPIO_Init+0x238>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a63      	ldr	r2, [pc, #396]	; (8000898 <MX_GPIO_Init+0x238>)
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b61      	ldr	r3, [pc, #388]	; (8000898 <MX_GPIO_Init+0x238>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b5d      	ldr	r3, [pc, #372]	; (8000898 <MX_GPIO_Init+0x238>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a5c      	ldr	r2, [pc, #368]	; (8000898 <MX_GPIO_Init+0x238>)
 8000728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b5a      	ldr	r3, [pc, #360]	; (8000898 <MX_GPIO_Init+0x238>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b56      	ldr	r3, [pc, #344]	; (8000898 <MX_GPIO_Init+0x238>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a55      	ldr	r2, [pc, #340]	; (8000898 <MX_GPIO_Init+0x238>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b53      	ldr	r3, [pc, #332]	; (8000898 <MX_GPIO_Init+0x238>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2170      	movs	r1, #112	; 0x70
 800075a:	4850      	ldr	r0, [pc, #320]	; (800089c <MX_GPIO_Init+0x23c>)
 800075c:	f001 fd40 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000766:	484e      	ldr	r0, [pc, #312]	; (80008a0 <MX_GPIO_Init+0x240>)
 8000768:	f001 fd3a 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000772:	484c      	ldr	r0, [pc, #304]	; (80008a4 <MX_GPIO_Init+0x244>)
 8000774:	f001 fd34 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW_UART_TX_Pin|FSMC_BLK_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f248 1110 	movw	r1, #33040	; 0x8110
 800077e:	484a      	ldr	r0, [pc, #296]	; (80008a8 <MX_GPIO_Init+0x248>)
 8000780:	f001 fd2e 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4848      	ldr	r0, [pc, #288]	; (80008ac <MX_GPIO_Init+0x24c>)
 800078a:	f001 fd29 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2108      	movs	r1, #8
 8000792:	4847      	ldr	r0, [pc, #284]	; (80008b0 <MX_GPIO_Init+0x250>)
 8000794:	f001 fd24 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000798:	2370      	movs	r3, #112	; 0x70
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ac:	4619      	mov	r1, r3
 80007ae:	483b      	ldr	r0, [pc, #236]	; (800089c <MX_GPIO_Init+0x23c>)
 80007b0:	f001 fb62 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80007b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ca:	4619      	mov	r1, r3
 80007cc:	4834      	ldr	r0, [pc, #208]	; (80008a0 <MX_GPIO_Init+0x240>)
 80007ce:	f001 fb53 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 80007d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e4:	4619      	mov	r1, r3
 80007e6:	482f      	ldr	r0, [pc, #188]	; (80008a4 <MX_GPIO_Init+0x244>)
 80007e8:	f001 fb46 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 80007ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000802:	4619      	mov	r1, r3
 8000804:	4827      	ldr	r0, [pc, #156]	; (80008a4 <MX_GPIO_Init+0x244>)
 8000806:	f001 fb37 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA15 */
  GPIO_InitStruct.Pin = SW_UART_TX_Pin|FSMC_BLK_Pin|GPIO_PIN_15;
 800080a:	f248 1310 	movw	r3, #33040	; 0x8110
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	4619      	mov	r1, r3
 8000822:	4821      	ldr	r0, [pc, #132]	; (80008a8 <MX_GPIO_Init+0x248>)
 8000824:	f001 fb28 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_UART_RX_Pin|INPUT_X0_Pin|INPUT_X1_Pin;
 8000828:	23e0      	movs	r3, #224	; 0xe0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	481b      	ldr	r0, [pc, #108]	; (80008a8 <MX_GPIO_Init+0x248>)
 800083c:	f001 fb1c 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000840:	2330      	movs	r3, #48	; 0x30
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000850:	4619      	mov	r1, r3
 8000852:	4813      	ldr	r0, [pc, #76]	; (80008a0 <MX_GPIO_Init+0x240>)
 8000854:	f001 fb10 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000858:	2340      	movs	r3, #64	; 0x40
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	4619      	mov	r1, r3
 800086e:	480f      	ldr	r0, [pc, #60]	; (80008ac <MX_GPIO_Init+0x24c>)
 8000870:	f001 fb02 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000874:	2308      	movs	r3, #8
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	4619      	mov	r1, r3
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <MX_GPIO_Init+0x250>)
 800088c:	f001 faf4 	bl	8001e78 <HAL_GPIO_Init>

}
 8000890:	bf00      	nop
 8000892:	3738      	adds	r7, #56	; 0x38
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40021000 	.word	0x40021000
 80008a0:	40020800 	.word	0x40020800
 80008a4:	40021400 	.word	0x40021400
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40021800 	.word	0x40021800
 80008b0:	40020c00 	.word	0x40020c00

080008b4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80008be:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <LCD_WR_REG+0x1c>)
 80008c0:	88fb      	ldrh	r3, [r7, #6]
 80008c2:	8013      	strh	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	600ffffe 	.word	0x600ffffe

080008d4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80008de:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <LCD_WR_DATA+0x1c>)
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	8053      	strh	r3, [r2, #2]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	600ffffe 	.word	0x600ffffe

080008f4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <LCD_RD_DATA+0x20>)
 80008fc:	885b      	ldrh	r3, [r3, #2]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	b29b      	uxth	r3, r3
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	600ffffe 	.word	0x600ffffe

08000918 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4604      	mov	r4, r0
 8000920:	4608      	mov	r0, r1
 8000922:	4611      	mov	r1, r2
 8000924:	461a      	mov	r2, r3
 8000926:	4623      	mov	r3, r4
 8000928:	80fb      	strh	r3, [r7, #6]
 800092a:	4603      	mov	r3, r0
 800092c:	80bb      	strh	r3, [r7, #4]
 800092e:	460b      	mov	r3, r1
 8000930:	807b      	strh	r3, [r7, #2]
 8000932:	4613      	mov	r3, r2
 8000934:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000936:	202a      	movs	r0, #42	; 0x2a
 8000938:	f7ff ffbc 	bl	80008b4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	b29b      	uxth	r3, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ffc6 	bl	80008d4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	b29b      	uxth	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ffc0 	bl	80008d4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	0a1b      	lsrs	r3, r3, #8
 8000958:	b29b      	uxth	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ffba 	bl	80008d4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000960:	887b      	ldrh	r3, [r7, #2]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	b29b      	uxth	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ffb4 	bl	80008d4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800096c:	202b      	movs	r0, #43	; 0x2b
 800096e:	f7ff ffa1 	bl	80008b4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000972:	88bb      	ldrh	r3, [r7, #4]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	b29b      	uxth	r3, r3
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ffab 	bl	80008d4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800097e:	88bb      	ldrh	r3, [r7, #4]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	b29b      	uxth	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ffa5 	bl	80008d4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800098a:	883b      	ldrh	r3, [r7, #0]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	b29b      	uxth	r3, r3
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff9f 	bl	80008d4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000996:	883b      	ldrh	r3, [r7, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	b29b      	uxth	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff99 	bl	80008d4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80009a2:	202c      	movs	r0, #44	; 0x2c
 80009a4:	f7ff ff86 	bl	80008b4 <LCD_WR_REG>
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd90      	pop	{r4, r7, pc}

080009b0 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <lcd_Clear+0x60>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	3b01      	subs	r3, #1
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <lcd_Clear+0x60>)
 80009c4:	885b      	ldrh	r3, [r3, #2]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	2000      	movs	r0, #0
 80009ce:	f7ff ffa3 	bl	8000918 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	81fb      	strh	r3, [r7, #14]
 80009d6:	e011      	b.n	80009fc <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80009d8:	2300      	movs	r3, #0
 80009da:	81bb      	strh	r3, [r7, #12]
 80009dc:	e006      	b.n	80009ec <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff77 	bl	80008d4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80009e6:	89bb      	ldrh	r3, [r7, #12]
 80009e8:	3301      	adds	r3, #1
 80009ea:	81bb      	strh	r3, [r7, #12]
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <lcd_Clear+0x60>)
 80009ee:	885b      	ldrh	r3, [r3, #2]
 80009f0:	89ba      	ldrh	r2, [r7, #12]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d3f3      	bcc.n	80009de <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	3301      	adds	r3, #1
 80009fa:	81fb      	strh	r3, [r7, #14]
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <lcd_Clear+0x60>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	89fa      	ldrh	r2, [r7, #14]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d3e8      	bcc.n	80009d8 <lcd_Clear+0x28>
		}
	}
}
 8000a06:	bf00      	nop
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000007c 	.word	0x2000007c

08000a14 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	4608      	mov	r0, r1
 8000a1e:	4611      	mov	r1, r2
 8000a20:	461a      	mov	r2, r3
 8000a22:	4623      	mov	r3, r4
 8000a24:	80fb      	strh	r3, [r7, #6]
 8000a26:	4603      	mov	r3, r0
 8000a28:	80bb      	strh	r3, [r7, #4]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	807b      	strh	r3, [r7, #2]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000a32:	887b      	ldrh	r3, [r7, #2]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	883b      	ldrh	r3, [r7, #0]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	88b9      	ldrh	r1, [r7, #4]
 8000a40:	88f8      	ldrh	r0, [r7, #6]
 8000a42:	f7ff ff69 	bl	8000918 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000a46:	88bb      	ldrh	r3, [r7, #4]
 8000a48:	81fb      	strh	r3, [r7, #14]
 8000a4a:	e010      	b.n	8000a6e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	81bb      	strh	r3, [r7, #12]
 8000a50:	e006      	b.n	8000a60 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000a52:	8c3b      	ldrh	r3, [r7, #32]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff3d 	bl	80008d4 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000a5a:	89bb      	ldrh	r3, [r7, #12]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	81bb      	strh	r3, [r7, #12]
 8000a60:	89ba      	ldrh	r2, [r7, #12]
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d3f4      	bcc.n	8000a52 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000a68:	89fb      	ldrh	r3, [r7, #14]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	81fb      	strh	r3, [r7, #14]
 8000a6e:	89fa      	ldrh	r2, [r7, #14]
 8000a70:	883b      	ldrh	r3, [r7, #0]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d3ea      	bcc.n	8000a4c <lcd_Fill+0x38>
		}
	}
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd90      	pop	{r4, r7, pc}

08000a80 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	80fb      	strh	r3, [r7, #6]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	80bb      	strh	r3, [r7, #4]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	88fa      	ldrh	r2, [r7, #6]
 8000a96:	88b9      	ldrh	r1, [r7, #4]
 8000a98:	88f8      	ldrh	r0, [r7, #6]
 8000a9a:	f7ff ff3d 	bl	8000918 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000a9e:	887b      	ldrh	r3, [r7, #2]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff17 	bl	80008d4 <LCD_WR_DATA>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	4608      	mov	r0, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	4623      	mov	r3, r4
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	70fb      	strb	r3, [r7, #3]
 8000aca:	4613      	mov	r3, r2
 8000acc:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000ad6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ada:	085b      	lsrs	r3, r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	08db      	lsrs	r3, r3, #3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	f003 0307 	and.w	r3, r3, #7
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf14      	ite	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	2300      	moveq	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4413      	add	r3, r2
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	fb12 f303 	smulbb	r3, r2, r3
 8000b06:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	3b20      	subs	r3, #32
 8000b0c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	4413      	add	r3, r2
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	b29c      	uxth	r4, r3
 8000b1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	88bb      	ldrh	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	88b9      	ldrh	r1, [r7, #4]
 8000b2e:	88f8      	ldrh	r0, [r7, #6]
 8000b30:	4622      	mov	r2, r4
 8000b32:	f7ff fef1 	bl	8000918 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000b36:	2300      	movs	r3, #0
 8000b38:	827b      	strh	r3, [r7, #18]
 8000b3a:	e07a      	b.n	8000c32 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000b3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b40:	2b0c      	cmp	r3, #12
 8000b42:	d028      	beq.n	8000b96 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000b44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b48:	2b10      	cmp	r3, #16
 8000b4a:	d108      	bne.n	8000b5e <lcd_ShowChar+0xae>
 8000b4c:	78fa      	ldrb	r2, [r7, #3]
 8000b4e:	8a7b      	ldrh	r3, [r7, #18]
 8000b50:	493c      	ldr	r1, [pc, #240]	; (8000c44 <lcd_ShowChar+0x194>)
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	440a      	add	r2, r1
 8000b56:	4413      	add	r3, r2
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	75fb      	strb	r3, [r7, #23]
 8000b5c:	e01b      	b.n	8000b96 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000b5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b62:	2b18      	cmp	r3, #24
 8000b64:	d10b      	bne.n	8000b7e <lcd_ShowChar+0xce>
 8000b66:	78fa      	ldrb	r2, [r7, #3]
 8000b68:	8a79      	ldrh	r1, [r7, #18]
 8000b6a:	4837      	ldr	r0, [pc, #220]	; (8000c48 <lcd_ShowChar+0x198>)
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	4403      	add	r3, r0
 8000b76:	440b      	add	r3, r1
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	75fb      	strb	r3, [r7, #23]
 8000b7c:	e00b      	b.n	8000b96 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000b7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b82:	2b20      	cmp	r3, #32
 8000b84:	d15a      	bne.n	8000c3c <lcd_ShowChar+0x18c>
 8000b86:	78fa      	ldrb	r2, [r7, #3]
 8000b88:	8a7b      	ldrh	r3, [r7, #18]
 8000b8a:	4930      	ldr	r1, [pc, #192]	; (8000c4c <lcd_ShowChar+0x19c>)
 8000b8c:	0192      	lsls	r2, r2, #6
 8000b8e:	440a      	add	r2, r1
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	75bb      	strb	r3, [r7, #22]
 8000b9a:	e044      	b.n	8000c26 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000b9c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d120      	bne.n	8000be6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000ba4:	7dfa      	ldrb	r2, [r7, #23]
 8000ba6:	7dbb      	ldrb	r3, [r7, #22]
 8000ba8:	fa42 f303 	asr.w	r3, r2, r3
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d004      	beq.n	8000bbe <lcd_ShowChar+0x10e>
 8000bb4:	883b      	ldrh	r3, [r7, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe8c 	bl	80008d4 <LCD_WR_DATA>
 8000bbc:	e003      	b.n	8000bc6 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000bbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fe87 	bl	80008d4 <LCD_WR_DATA>
				m++;
 8000bc6:	7d7b      	ldrb	r3, [r7, #21]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000bcc:	7d7b      	ldrb	r3, [r7, #21]
 8000bce:	7bfa      	ldrb	r2, [r7, #15]
 8000bd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8000bd4:	fb02 f201 	mul.w	r2, r2, r1
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d11f      	bne.n	8000c20 <lcd_ShowChar+0x170>
				{
					m=0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	757b      	strb	r3, [r7, #21]
					break;
 8000be4:	e022      	b.n	8000c2c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000be6:	7dfa      	ldrb	r2, [r7, #23]
 8000be8:	7dbb      	ldrb	r3, [r7, #22]
 8000bea:	fa42 f303 	asr.w	r3, r2, r3
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <lcd_ShowChar+0x152>
 8000bf6:	883a      	ldrh	r2, [r7, #0]
 8000bf8:	88b9      	ldrh	r1, [r7, #4]
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff3f 	bl	8000a80 <lcd_DrawPoint>
				x++;
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	3301      	adds	r3, #1
 8000c06:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000c08:	88fa      	ldrh	r2, [r7, #6]
 8000c0a:	8a3b      	ldrh	r3, [r7, #16]
 8000c0c:	1ad2      	subs	r2, r2, r3
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d105      	bne.n	8000c20 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000c14:	8a3b      	ldrh	r3, [r7, #16]
 8000c16:	80fb      	strh	r3, [r7, #6]
					y++;
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	80bb      	strh	r3, [r7, #4]
					break;
 8000c1e:	e005      	b.n	8000c2c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000c20:	7dbb      	ldrb	r3, [r7, #22]
 8000c22:	3301      	adds	r3, #1
 8000c24:	75bb      	strb	r3, [r7, #22]
 8000c26:	7dbb      	ldrb	r3, [r7, #22]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d9b7      	bls.n	8000b9c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000c2c:	8a7b      	ldrh	r3, [r7, #18]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	827b      	strh	r3, [r7, #18]
 8000c32:	8a7a      	ldrh	r2, [r7, #18]
 8000c34:	89bb      	ldrh	r3, [r7, #12]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d380      	bcc.n	8000b3c <lcd_ShowChar+0x8c>
 8000c3a:	e000      	b.n	8000c3e <lcd_ShowChar+0x18e>
		else return;
 8000c3c:	bf00      	nop
				}
			}
		}
	}
}
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	080044f0 	.word	0x080044f0
 8000c48:	08004ae0 	.word	0x08004ae0
 8000c4c:	08005cb0 	.word	0x08005cb0

08000c50 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	460a      	mov	r2, r1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000c64:	e004      	b.n	8000c70 <mypow+0x20>
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	fb02 f303 	mul.w	r3, r2, r3
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	1e5a      	subs	r2, r3, #1
 8000c74:	71ba      	strb	r2, [r7, #6]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f5      	bne.n	8000c66 <mypow+0x16>
	return result;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af04      	add	r7, sp, #16
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4608      	mov	r0, r1
 8000c92:	4611      	mov	r1, r2
 8000c94:	461a      	mov	r2, r3
 8000c96:	4623      	mov	r3, r4
 8000c98:	80fb      	strh	r3, [r7, #6]
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80bb      	strh	r3, [r7, #4]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	807b      	strh	r3, [r7, #2]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000caa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cae:	085b      	lsrs	r3, r3, #1
 8000cb0:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	e059      	b.n	8000d6c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000cb8:	887c      	ldrh	r4, [r7, #2]
 8000cba:	787a      	ldrb	r2, [r7, #1]
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f7ff ffc1 	bl	8000c50 <mypow>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	fbb4 f1f3 	udiv	r1, r4, r3
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <lcd_ShowIntNum+0xf8>)
 8000cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8000cda:	08da      	lsrs	r2, r3, #3
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	1aca      	subs	r2, r1, r3
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d121      	bne.n	8000d34 <lcd_ShowIntNum+0xac>
 8000cf0:	7bfa      	ldrb	r2, [r7, #15]
 8000cf2:	787b      	ldrb	r3, [r7, #1]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	da1c      	bge.n	8000d34 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000cfa:	7b3b      	ldrb	r3, [r7, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d117      	bne.n	8000d30 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	7b7b      	ldrb	r3, [r7, #13]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	fb12 f303 	smulbb	r3, r2, r3
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	4413      	add	r3, r2
 8000d12:	b298      	uxth	r0, r3
 8000d14:	8c3a      	ldrh	r2, [r7, #32]
 8000d16:	88b9      	ldrh	r1, [r7, #4]
 8000d18:	2300      	movs	r3, #0
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	4613      	mov	r3, r2
 8000d28:	2220      	movs	r2, #32
 8000d2a:	f7ff fec1 	bl	8000ab0 <lcd_ShowChar>
				continue;
 8000d2e:	e01a      	b.n	8000d66 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	7b7b      	ldrb	r3, [r7, #13]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	fb12 f303 	smulbb	r3, r2, r3
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	4413      	add	r3, r2
 8000d46:	b298      	uxth	r0, r3
 8000d48:	7b3b      	ldrb	r3, [r7, #12]
 8000d4a:	3330      	adds	r3, #48	; 0x30
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	8c3c      	ldrh	r4, [r7, #32]
 8000d50:	88b9      	ldrh	r1, [r7, #4]
 8000d52:	2300      	movs	r3, #0
 8000d54:	9302      	str	r3, [sp, #8]
 8000d56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	4623      	mov	r3, r4
 8000d62:	f7ff fea5 	bl	8000ab0 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	7bfa      	ldrb	r2, [r7, #15]
 8000d6e:	787b      	ldrb	r3, [r7, #1]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d3a1      	bcc.n	8000cb8 <lcd_ShowIntNum+0x30>
	}
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd90      	pop	{r4, r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	cccccccd 	.word	0xcccccccd

08000d84 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	091b      	lsrs	r3, r3, #4
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d007      	beq.n	8000dae <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <lcd_SetDir+0x44>)
 8000da0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000da4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <lcd_SetDir+0x44>)
 8000da8:	22f0      	movs	r2, #240	; 0xf0
 8000daa:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000dac:	e006      	b.n	8000dbc <lcd_SetDir+0x38>
		lcddev.width=240;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <lcd_SetDir+0x44>)
 8000db0:	22f0      	movs	r2, #240	; 0xf0
 8000db2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <lcd_SetDir+0x44>)
 8000db6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000dba:	805a      	strh	r2, [r3, #2]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	2000007c 	.word	0x2000007c

08000dcc <lcd_init>:


void lcd_init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd6:	48aa      	ldr	r0, [pc, #680]	; (8001080 <lcd_init+0x2b4>)
 8000dd8:	f001 fa02 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000ddc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000de0:	f000 fe82 	bl	8001ae8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dea:	48a5      	ldr	r0, [pc, #660]	; (8001080 <lcd_init+0x2b4>)
 8000dec:	f001 f9f8 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000df0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df4:	f000 fe78 	bl	8001ae8 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff ffc3 	bl	8000d84 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000dfe:	20d3      	movs	r0, #211	; 0xd3
 8000e00:	f7ff fd58 	bl	80008b4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000e04:	f7ff fd76 	bl	80008f4 <LCD_RD_DATA>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b9d      	ldr	r3, [pc, #628]	; (8001084 <lcd_init+0x2b8>)
 8000e0e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000e10:	f7ff fd70 	bl	80008f4 <LCD_RD_DATA>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b9a      	ldr	r3, [pc, #616]	; (8001084 <lcd_init+0x2b8>)
 8000e1a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000e1c:	f7ff fd6a 	bl	80008f4 <LCD_RD_DATA>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b97      	ldr	r3, [pc, #604]	; (8001084 <lcd_init+0x2b8>)
 8000e26:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000e28:	4b96      	ldr	r3, [pc, #600]	; (8001084 <lcd_init+0x2b8>)
 8000e2a:	889b      	ldrh	r3, [r3, #4]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b94      	ldr	r3, [pc, #592]	; (8001084 <lcd_init+0x2b8>)
 8000e32:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000e34:	f7ff fd5e 	bl	80008f4 <LCD_RD_DATA>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b91      	ldr	r3, [pc, #580]	; (8001084 <lcd_init+0x2b8>)
 8000e3e:	889b      	ldrh	r3, [r3, #4]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b8f      	ldr	r3, [pc, #572]	; (8001084 <lcd_init+0x2b8>)
 8000e46:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000e48:	20cf      	movs	r0, #207	; 0xcf
 8000e4a:	f7ff fd33 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fd40 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000e54:	20c1      	movs	r0, #193	; 0xc1
 8000e56:	f7ff fd3d 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000e5a:	2030      	movs	r0, #48	; 0x30
 8000e5c:	f7ff fd3a 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000e60:	20ed      	movs	r0, #237	; 0xed
 8000e62:	f7ff fd27 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000e66:	2064      	movs	r0, #100	; 0x64
 8000e68:	f7ff fd34 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f7ff fd31 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000e72:	2012      	movs	r0, #18
 8000e74:	f7ff fd2e 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000e78:	2081      	movs	r0, #129	; 0x81
 8000e7a:	f7ff fd2b 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000e7e:	20e8      	movs	r0, #232	; 0xe8
 8000e80:	f7ff fd18 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000e84:	2085      	movs	r0, #133	; 0x85
 8000e86:	f7ff fd25 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000e8a:	2010      	movs	r0, #16
 8000e8c:	f7ff fd22 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000e90:	207a      	movs	r0, #122	; 0x7a
 8000e92:	f7ff fd1f 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000e96:	20cb      	movs	r0, #203	; 0xcb
 8000e98:	f7ff fd0c 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000e9c:	2039      	movs	r0, #57	; 0x39
 8000e9e:	f7ff fd19 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000ea2:	202c      	movs	r0, #44	; 0x2c
 8000ea4:	f7ff fd16 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fd13 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000eae:	2034      	movs	r0, #52	; 0x34
 8000eb0:	f7ff fd10 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f7ff fd0d 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000eba:	20f7      	movs	r0, #247	; 0xf7
 8000ebc:	f7ff fcfa 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000ec0:	2020      	movs	r0, #32
 8000ec2:	f7ff fd07 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000ec6:	20ea      	movs	r0, #234	; 0xea
 8000ec8:	f7ff fcf4 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fd01 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff fcfe 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000ed8:	20c0      	movs	r0, #192	; 0xc0
 8000eda:	f7ff fceb 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000ede:	201b      	movs	r0, #27
 8000ee0:	f7ff fcf8 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000ee4:	20c1      	movs	r0, #193	; 0xc1
 8000ee6:	f7ff fce5 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000eea:	2001      	movs	r0, #1
 8000eec:	f7ff fcf2 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000ef0:	20c5      	movs	r0, #197	; 0xc5
 8000ef2:	f7ff fcdf 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000ef6:	2030      	movs	r0, #48	; 0x30
 8000ef8:	f7ff fcec 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000efc:	2030      	movs	r0, #48	; 0x30
 8000efe:	f7ff fce9 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000f02:	20c7      	movs	r0, #199	; 0xc7
 8000f04:	f7ff fcd6 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000f08:	20b7      	movs	r0, #183	; 0xb7
 8000f0a:	f7ff fce3 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000f0e:	2036      	movs	r0, #54	; 0x36
 8000f10:	f7ff fcd0 	bl	80008b4 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8000f14:	2008      	movs	r0, #8
 8000f16:	f7ff fcdd 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000f1a:	203a      	movs	r0, #58	; 0x3a
 8000f1c:	f7ff fcca 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000f20:	2055      	movs	r0, #85	; 0x55
 8000f22:	f7ff fcd7 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000f26:	20b1      	movs	r0, #177	; 0xb1
 8000f28:	f7ff fcc4 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff fcd1 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000f32:	201a      	movs	r0, #26
 8000f34:	f7ff fcce 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000f38:	20b6      	movs	r0, #182	; 0xb6
 8000f3a:	f7ff fcbb 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f7ff fcc8 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000f44:	20a2      	movs	r0, #162	; 0xa2
 8000f46:	f7ff fcc5 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000f4a:	20f2      	movs	r0, #242	; 0xf2
 8000f4c:	f7ff fcb2 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff fcbf 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000f56:	2026      	movs	r0, #38	; 0x26
 8000f58:	f7ff fcac 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f7ff fcb9 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000f62:	20e0      	movs	r0, #224	; 0xe0
 8000f64:	f7ff fca6 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000f68:	200f      	movs	r0, #15
 8000f6a:	f7ff fcb3 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000f6e:	202a      	movs	r0, #42	; 0x2a
 8000f70:	f7ff fcb0 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000f74:	2028      	movs	r0, #40	; 0x28
 8000f76:	f7ff fcad 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000f7a:	2008      	movs	r0, #8
 8000f7c:	f7ff fcaa 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000f80:	200e      	movs	r0, #14
 8000f82:	f7ff fca7 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000f86:	2008      	movs	r0, #8
 8000f88:	f7ff fca4 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000f8c:	2054      	movs	r0, #84	; 0x54
 8000f8e:	f7ff fca1 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000f92:	20a9      	movs	r0, #169	; 0xa9
 8000f94:	f7ff fc9e 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000f98:	2043      	movs	r0, #67	; 0x43
 8000f9a:	f7ff fc9b 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000f9e:	200a      	movs	r0, #10
 8000fa0:	f7ff fc98 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000fa4:	200f      	movs	r0, #15
 8000fa6:	f7ff fc95 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff fc92 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fc8f 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fc8c 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff fc89 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000fc2:	20e1      	movs	r0, #225	; 0xe1
 8000fc4:	f7ff fc76 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fc83 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000fce:	2015      	movs	r0, #21
 8000fd0:	f7ff fc80 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000fd4:	2017      	movs	r0, #23
 8000fd6:	f7ff fc7d 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000fda:	2007      	movs	r0, #7
 8000fdc:	f7ff fc7a 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000fe0:	2011      	movs	r0, #17
 8000fe2:	f7ff fc77 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000fe6:	2006      	movs	r0, #6
 8000fe8:	f7ff fc74 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000fec:	202b      	movs	r0, #43	; 0x2b
 8000fee:	f7ff fc71 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000ff2:	2056      	movs	r0, #86	; 0x56
 8000ff4:	f7ff fc6e 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000ff8:	203c      	movs	r0, #60	; 0x3c
 8000ffa:	f7ff fc6b 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000ffe:	2005      	movs	r0, #5
 8001000:	f7ff fc68 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001004:	2010      	movs	r0, #16
 8001006:	f7ff fc65 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800100a:	200f      	movs	r0, #15
 800100c:	f7ff fc62 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001010:	203f      	movs	r0, #63	; 0x3f
 8001012:	f7ff fc5f 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001016:	203f      	movs	r0, #63	; 0x3f
 8001018:	f7ff fc5c 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800101c:	200f      	movs	r0, #15
 800101e:	f7ff fc59 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001022:	202b      	movs	r0, #43	; 0x2b
 8001024:	f7ff fc46 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff fc53 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff fc50 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff fc4d 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800103a:	203f      	movs	r0, #63	; 0x3f
 800103c:	f7ff fc4a 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001040:	202a      	movs	r0, #42	; 0x2a
 8001042:	f7ff fc37 	bl	80008b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff fc44 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fc41 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff fc3e 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001058:	20ef      	movs	r0, #239	; 0xef
 800105a:	f7ff fc3b 	bl	80008d4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800105e:	2011      	movs	r0, #17
 8001060:	f7ff fc28 	bl	80008b4 <LCD_WR_REG>
	HAL_Delay(120);
 8001064:	2078      	movs	r0, #120	; 0x78
 8001066:	f000 fd3f 	bl	8001ae8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800106a:	2029      	movs	r0, #41	; 0x29
 800106c:	f7ff fc22 	bl	80008b4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	4804      	ldr	r0, [pc, #16]	; (8001088 <lcd_init+0x2bc>)
 8001078:	f001 f8b2 	bl	80021e0 <HAL_GPIO_WritePin>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40020800 	.word	0x40020800
 8001084:	2000007c 	.word	0x2000007c
 8001088:	40020000 	.word	0x40020000

0800108c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b08b      	sub	sp, #44	; 0x2c
 8001090:	af04      	add	r7, sp, #16
 8001092:	60ba      	str	r2, [r7, #8]
 8001094:	461a      	mov	r2, r3
 8001096:	4603      	mov	r3, r0
 8001098:	81fb      	strh	r3, [r7, #14]
 800109a:	460b      	mov	r3, r1
 800109c:	81bb      	strh	r3, [r7, #12]
 800109e:	4613      	mov	r3, r2
 80010a0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80010aa:	e048      	b.n	800113e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d145      	bne.n	800113e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80010b2:	89fa      	ldrh	r2, [r7, #14]
 80010b4:	4b26      	ldr	r3, [pc, #152]	; (8001150 <lcd_ShowStr+0xc4>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010be:	085b      	lsrs	r3, r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	1acb      	subs	r3, r1, r3
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dc3f      	bgt.n	8001148 <lcd_ShowStr+0xbc>
 80010c8:	89ba      	ldrh	r2, [r7, #12]
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <lcd_ShowStr+0xc4>)
 80010cc:	885b      	ldrh	r3, [r3, #2]
 80010ce:	4619      	mov	r1, r3
 80010d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010d4:	1acb      	subs	r3, r1, r3
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dc36      	bgt.n	8001148 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b80      	cmp	r3, #128	; 0x80
 80010e0:	d902      	bls.n	80010e8 <lcd_ShowStr+0x5c>
 80010e2:	2301      	movs	r3, #1
 80010e4:	75fb      	strb	r3, [r7, #23]
 80010e6:	e02a      	b.n	800113e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b0d      	cmp	r3, #13
 80010ee:	d10b      	bne.n	8001108 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80010f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	89bb      	ldrh	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80010fc:	8abb      	ldrh	r3, [r7, #20]
 80010fe:	81fb      	strh	r3, [r7, #14]
					str++;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	3301      	adds	r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	e017      	b.n	8001138 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	88fc      	ldrh	r4, [r7, #6]
 800110e:	89b9      	ldrh	r1, [r7, #12]
 8001110:	89f8      	ldrh	r0, [r7, #14]
 8001112:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	4623      	mov	r3, r4
 8001124:	f7ff fcc4 	bl	8000ab0 <lcd_ShowChar>
					x+=sizey/2;
 8001128:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800112c:	085b      	lsrs	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	b29a      	uxth	r2, r3
 8001132:	89fb      	ldrh	r3, [r7, #14]
 8001134:	4413      	add	r3, r2
 8001136:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	3301      	adds	r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1b2      	bne.n	80010ac <lcd_ShowStr+0x20>
 8001146:	e000      	b.n	800114a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001148:	bf00      	nop
			}
		}
	}
}
 800114a:	371c      	adds	r7, #28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	2000007c 	.word	0x2000007c

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b096      	sub	sp, #88	; 0x58
 8001158:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f000 fc53 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f903 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f7ff fa7d 	bl	8000660 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001166:	f000 facf 	bl	8001708 <MX_TIM2_Init>
  MX_SPI1_Init();
 800116a:	f000 f9cd 	bl	8001508 <MX_SPI1_Init>
  MX_FSMC_Init();
 800116e:	f7ff f9a7 	bl	80004c0 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8001172:	f000 fb65 	bl	8001840 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001176:	f000 fb39 	bl	80017ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  soft_uart_init();
 800117a:	f000 f97d 	bl	8001478 <soft_uart_init>

  uint8_t cmd, len;
  uint8_t data_buffer[MAX_DATA_LEN];
  uint8_t checksum_received, checksum_calculated;

  lcd_init();
 800117e:	f7ff fe25 	bl	8000dcc <lcd_init>
  lcd_Clear(BLACK);
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff fc14 	bl	80009b0 <lcd_Clear>
  lcd_ShowStr(5, 20, "Slave is listening...", YELLOW, BLACK, 24, 0);
 8001188:	2300      	movs	r3, #0
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2318      	movs	r3, #24
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2300      	movs	r3, #0
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001198:	4a6c      	ldr	r2, [pc, #432]	; (800134c <main+0x1f8>)
 800119a:	2114      	movs	r1, #20
 800119c:	2005      	movs	r0, #5
 800119e:	f7ff ff75 	bl	800108c <lcd_ShowStr>
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      if (soft_uart_receive_byte() == START_BYTE) {
 80011a2:	f000 f979 	bl	8001498 <soft_uart_receive_byte>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2baa      	cmp	r3, #170	; 0xaa
 80011aa:	d1fa      	bne.n	80011a2 <main+0x4e>
          cmd = soft_uart_receive_byte();
 80011ac:	f000 f974 	bl	8001498 <soft_uart_receive_byte>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          len = soft_uart_receive_byte();
 80011b6:	f000 f96f 	bl	8001498 <soft_uart_receive_byte>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

          if (len > MAX_DATA_LEN) continue;
 80011c0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80011c4:	2b32      	cmp	r3, #50	; 0x32
 80011c6:	f200 80be 	bhi.w	8001346 <main+0x1f2>

          for (int i = 0; i < len; i++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	643b      	str	r3, [r7, #64]	; 0x40
 80011ce:	e00b      	b.n	80011e8 <main+0x94>
              data_buffer[i] = soft_uart_receive_byte();
 80011d0:	f000 f962 	bl	8001498 <soft_uart_receive_byte>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4619      	mov	r1, r3
 80011d8:	1d3a      	adds	r2, r7, #4
 80011da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011dc:	4413      	add	r3, r2
 80011de:	460a      	mov	r2, r1
 80011e0:	701a      	strb	r2, [r3, #0]
          for (int i = 0; i < len; i++) {
 80011e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011e4:	3301      	adds	r3, #1
 80011e6:	643b      	str	r3, [r7, #64]	; 0x40
 80011e8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80011ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dbee      	blt.n	80011d0 <main+0x7c>
          }
          checksum_received = soft_uart_receive_byte();
 80011f2:	f000 f951 	bl	8001498 <soft_uart_receive_byte>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

          checksum_calculated = cmd + len;
 80011fc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001200:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001204:	4413      	add	r3, r2
 8001206:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          for (int i = 0; i < len; i++) {
 800120a:	2300      	movs	r3, #0
 800120c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800120e:	e00b      	b.n	8001228 <main+0xd4>
              checksum_calculated += data_buffer[i];
 8001210:	1d3a      	adds	r2, r7, #4
 8001212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001214:	4413      	add	r3, r2
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800121c:	4413      	add	r3, r2
 800121e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          for (int i = 0; i < len; i++) {
 8001222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001224:	3301      	adds	r3, #1
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001228:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800122c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800122e:	429a      	cmp	r2, r3
 8001230:	dbee      	blt.n	8001210 <main+0xbc>
          }
          lcd_ShowStr(10, 50, "Checksum cal: ", RED, BLACK, 24, 0);
 8001232:	2300      	movs	r3, #0
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	2318      	movs	r3, #24
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	2300      	movs	r3, #0
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001242:	4a43      	ldr	r2, [pc, #268]	; (8001350 <main+0x1fc>)
 8001244:	2132      	movs	r1, #50	; 0x32
 8001246:	200a      	movs	r0, #10
 8001248:	f7ff ff20 	bl	800108c <lcd_ShowStr>
          lcd_ShowIntNum(10, 80, checksum_calculated, 3, RED, BLACK, 24);
 800124c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001250:	b29a      	uxth	r2, r3
 8001252:	2318      	movs	r3, #24
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	2300      	movs	r3, #0
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2303      	movs	r3, #3
 8001262:	2150      	movs	r1, #80	; 0x50
 8001264:	200a      	movs	r0, #10
 8001266:	f7ff fd0f 	bl	8000c88 <lcd_ShowIntNum>
          lcd_ShowStr(10, 110, "Checksum received", RED, BLACK, 24, 0);
 800126a:	2300      	movs	r3, #0
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2318      	movs	r3, #24
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	2300      	movs	r3, #0
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800127a:	4a36      	ldr	r2, [pc, #216]	; (8001354 <main+0x200>)
 800127c:	216e      	movs	r1, #110	; 0x6e
 800127e:	200a      	movs	r0, #10
 8001280:	f7ff ff04 	bl	800108c <lcd_ShowStr>
          lcd_ShowIntNum(10, 140, checksum_received, 3, RED, BLACK, 24);
 8001284:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001288:	b29a      	uxth	r2, r3
 800128a:	2318      	movs	r3, #24
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	2300      	movs	r3, #0
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2303      	movs	r3, #3
 800129a:	218c      	movs	r1, #140	; 0x8c
 800129c:	200a      	movs	r0, #10
 800129e:	f7ff fcf3 	bl	8000c88 <lcd_ShowIntNum>
          if (checksum_calculated == checksum_received) {
 80012a2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80012a6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d134      	bne.n	8001318 <main+0x1c4>
              if (cmd == CMD_DISPLAY_TEXT) {
 80012ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	f47f af75 	bne.w	80011a2 <main+0x4e>
                  data_buffer[len] = '\0';
 80012b8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80012bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80012c0:	4413      	add	r3, r2
 80012c2:	2200      	movs	r2, #0
 80012c4:	f803 2c44 	strb.w	r2, [r3, #-68]
                  lcd_ShowStr(10, 180, "Received message:", GREEN, BLACK, 24, 0);
 80012c8:	2300      	movs	r3, #0
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2318      	movs	r3, #24
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	2300      	movs	r3, #0
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80012d8:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <main+0x204>)
 80012da:	21b4      	movs	r1, #180	; 0xb4
 80012dc:	200a      	movs	r0, #10
 80012de:	f7ff fed5 	bl	800108c <lcd_ShowStr>
                  lcd_ShowStr(5, 210, "                   ", GREEN, BLACK, 24, 0);
 80012e2:	2300      	movs	r3, #0
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2318      	movs	r3, #24
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	2300      	movs	r3, #0
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80012f2:	4a1a      	ldr	r2, [pc, #104]	; (800135c <main+0x208>)
 80012f4:	21d2      	movs	r1, #210	; 0xd2
 80012f6:	2005      	movs	r0, #5
 80012f8:	f7ff fec8 	bl	800108c <lcd_ShowStr>
                  lcd_ShowStr(5, 210, (char*)data_buffer, YELLOW, BLACK, 24, 0);
 80012fc:	1d3a      	adds	r2, r7, #4
 80012fe:	2300      	movs	r3, #0
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2318      	movs	r3, #24
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	2300      	movs	r3, #0
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800130e:	21d2      	movs	r1, #210	; 0xd2
 8001310:	2005      	movs	r0, #5
 8001312:	f7ff febb 	bl	800108c <lcd_ShowStr>
 8001316:	e744      	b.n	80011a2 <main+0x4e>
              }
          } else {
              lcd_Fill(20, 30, lcddev.width, 70, BLACK);
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <main+0x20c>)
 800131a:	881a      	ldrh	r2, [r3, #0]
 800131c:	2300      	movs	r3, #0
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2346      	movs	r3, #70	; 0x46
 8001322:	211e      	movs	r1, #30
 8001324:	2014      	movs	r0, #20
 8001326:	f7ff fb75 	bl	8000a14 <lcd_Fill>
              lcd_ShowStr(5, 180, "Checksum Error!", RED, BLACK, 24, 0);
 800132a:	2300      	movs	r3, #0
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2318      	movs	r3, #24
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	2300      	movs	r3, #0
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <main+0x210>)
 800133c:	21b4      	movs	r1, #180	; 0xb4
 800133e:	2005      	movs	r0, #5
 8001340:	f7ff fea4 	bl	800108c <lcd_ShowStr>
 8001344:	e72d      	b.n	80011a2 <main+0x4e>
          if (len > MAX_DATA_LEN) continue;
 8001346:	bf00      	nop
      if (soft_uart_receive_byte() == START_BYTE) {
 8001348:	e72b      	b.n	80011a2 <main+0x4e>
 800134a:	bf00      	nop
 800134c:	0800447c 	.word	0x0800447c
 8001350:	08004494 	.word	0x08004494
 8001354:	080044a4 	.word	0x080044a4
 8001358:	080044b8 	.word	0x080044b8
 800135c:	080044cc 	.word	0x080044cc
 8001360:	2000007c 	.word	0x2000007c
 8001364:	080044e0 	.word	0x080044e0

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b094      	sub	sp, #80	; 0x50
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0320 	add.w	r3, r7, #32
 8001372:	2230      	movs	r2, #48	; 0x30
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f003 f86c 	bl	8004454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <SystemClock_Config+0xc8>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	4a26      	ldr	r2, [pc, #152]	; (8001430 <SystemClock_Config+0xc8>)
 8001396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139a:	6413      	str	r3, [r2, #64]	; 0x40
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <SystemClock_Config+0xc8>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <SystemClock_Config+0xcc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a20      	ldr	r2, [pc, #128]	; (8001434 <SystemClock_Config+0xcc>)
 80013b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <SystemClock_Config+0xcc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c4:	2302      	movs	r3, #2
 80013c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c8:	2301      	movs	r3, #1
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013cc:	2310      	movs	r3, #16
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d0:	2302      	movs	r3, #2
 80013d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013d4:	2300      	movs	r3, #0
 80013d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013d8:	2308      	movs	r3, #8
 80013da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80013dc:	2340      	movs	r3, #64	; 0x40
 80013de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013e4:	2304      	movs	r3, #4
 80013e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e8:	f107 0320 	add.w	r3, r7, #32
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 ff11 	bl	8002214 <HAL_RCC_OscConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013f8:	f000 f81e 	bl	8001438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fc:	230f      	movs	r3, #15
 80013fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	2302      	movs	r3, #2
 8001402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001404:	23a0      	movs	r3, #160	; 0xa0
 8001406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f001 f973 	bl	8002704 <HAL_RCC_ClockConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001424:	f000 f808 	bl	8001438 <Error_Handler>
  }
}
 8001428:	bf00      	nop
 800142a:	3750      	adds	r7, #80	; 0x50
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40007000 	.word	0x40007000

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	e7fe      	b.n	8001440 <Error_Handler+0x8>
	...

08001444 <delay_us>:
// Thời gian trễ cho 1 bit (tính bằng micro giây)
// 1/9600 * 1,000,000 us/s ~= 104 us
#define BIT_TIME_US 104

// Hàm delay micro giây sử dụng Timer
void delay_us(uint16_t us) {
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset bộ đếm
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <delay_us+0x30>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8001456:	bf00      	nop
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <delay_us+0x30>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	429a      	cmp	r2, r3
 8001462:	d3f9      	bcc.n	8001458 <delay_us+0x14>
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000110 	.word	0x20000110

08001478 <soft_uart_init>:

// Khởi tạo
void soft_uart_init() {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
    // Bắt đầu timer
    HAL_TIM_Base_Start(&htim2);
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <soft_uart_init+0x18>)
 800147e:	f001 fc59 	bl	8002d34 <HAL_TIM_Base_Start>
    // Đảm bảo chân TX ở trạng thái nghỉ (mức cao)
    HAL_GPIO_WritePin(SW_UART_TX_PORT, SW_UART_TX_PIN, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	2110      	movs	r1, #16
 8001486:	4803      	ldr	r0, [pc, #12]	; (8001494 <soft_uart_init+0x1c>)
 8001488:	f000 feaa 	bl	80021e0 <HAL_GPIO_WritePin>
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000110 	.word	0x20000110
 8001494:	40020000 	.word	0x40020000

08001498 <soft_uart_receive_byte>:
    HAL_GPIO_WritePin(SW_UART_TX_PORT, SW_UART_TX_PIN, GPIO_PIN_SET);
    delay_us(BIT_TIME_US);
}

// Hàm nhận 1 byte
uint8_t soft_uart_receive_byte() {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
    uint8_t received_data = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	71fb      	strb	r3, [r7, #7]
    //lcd_ShowStr(10, 150, "TEST", YELLOW, BLACK, 24, 0);
    // 1. Chờ đợi Start bit (đường truyền bị kéo xuống thấp)
    while (HAL_GPIO_ReadPin(SW_UART_RX_PORT, SW_UART_RX_PIN) == GPIO_PIN_SET);
 80014a2:	bf00      	nop
 80014a4:	2120      	movs	r1, #32
 80014a6:	4817      	ldr	r0, [pc, #92]	; (8001504 <soft_uart_receive_byte+0x6c>)
 80014a8:	f000 fe82 	bl	80021b0 <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d0f8      	beq.n	80014a4 <soft_uart_receive_byte+0xc>
    //lcd_ShowStr(10, 190, "TEST2", YELLOW, BLACK, 24, 0);
    // 2. Đồng bộ hóa: Khi phát hiện Start bit, chờ 1 nửa bit time
    // để dịch chuyển đến điểm giữa của bit đầu tiên.
    delay_us(BIT_TIME_US / 2);
 80014b2:	2034      	movs	r0, #52	; 0x34
 80014b4:	f7ff ffc6 	bl	8001444 <delay_us>

    // 3. Đọc 8 bit dữ liệu
    for (int i = 0; i < 8; i++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	e016      	b.n	80014ec <soft_uart_receive_byte+0x54>
        delay_us(BIT_TIME_US); // Chờ 1 bit time để đến bit tiếp theo
 80014be:	2068      	movs	r0, #104	; 0x68
 80014c0:	f7ff ffc0 	bl	8001444 <delay_us>
        if (HAL_GPIO_ReadPin(SW_UART_RX_PORT, SW_UART_RX_PIN) == GPIO_PIN_SET) {
 80014c4:	2120      	movs	r1, #32
 80014c6:	480f      	ldr	r0, [pc, #60]	; (8001504 <soft_uart_receive_byte+0x6c>)
 80014c8:	f000 fe72 	bl	80021b0 <HAL_GPIO_ReadPin>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d109      	bne.n	80014e6 <soft_uart_receive_byte+0x4e>
            received_data |= (1 << i);
 80014d2:	2201      	movs	r2, #1
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	b25a      	sxtb	r2, r3
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2b07      	cmp	r3, #7
 80014f0:	dde5      	ble.n	80014be <soft_uart_receive_byte+0x26>
        }
    }

    // 4. Chờ Stop bit
    delay_us(BIT_TIME_US);
 80014f2:	2068      	movs	r0, #104	; 0x68
 80014f4:	f7ff ffa6 	bl	8001444 <delay_us>

    return received_data;
 80014f8:	79fb      	ldrb	r3, [r7, #7]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40020000 	.word	0x40020000

08001508 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_SPI1_Init+0x64>)
 800150e:	4a18      	ldr	r2, [pc, #96]	; (8001570 <MX_SPI1_Init+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_SPI1_Init+0x64>)
 8001514:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001518:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_SPI1_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_SPI1_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_SPI1_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_SPI1_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_SPI1_Init+0x64>)
 8001534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001538:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_SPI1_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <MX_SPI1_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_SPI1_Init+0x64>)
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <MX_SPI1_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_SPI1_Init+0x64>)
 8001554:	220a      	movs	r2, #10
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_SPI1_Init+0x64>)
 800155a:	f001 facf 	bl	8002afc <HAL_SPI_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001564:	f7ff ff68 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200000b8 	.word	0x200000b8
 8001570:	40013000 	.word	0x40013000

08001574 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <HAL_SPI_MspInit+0x84>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d12b      	bne.n	80015ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_SPI_MspInit+0x88>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_SPI_MspInit+0x88>)
 80015a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_SPI_MspInit+0x88>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_SPI_MspInit+0x88>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <HAL_SPI_MspInit+0x88>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_SPI_MspInit+0x88>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80015ce:	2338      	movs	r3, #56	; 0x38
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015de:	2305      	movs	r3, #5
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_SPI_MspInit+0x8c>)
 80015ea:	f000 fc45 	bl	8001e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40013000 	.word	0x40013000
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020400 	.word	0x40020400

08001604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_MspInit+0x4c>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <HAL_MspInit+0x4c>)
 8001614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001618:	6453      	str	r3, [r2, #68]	; 0x44
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <HAL_MspInit+0x4c>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_MspInit+0x4c>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_MspInit+0x4c>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_MspInit+0x4c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <NMI_Handler+0x4>

0800165a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <MemManage_Handler+0x4>

08001666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <UsageFault_Handler+0x4>

08001672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a0:	f000 fa02 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <TIM2_IRQHandler+0x10>)
 80016ae:	f001 fba9 	bl	8002e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000110 	.word	0x20000110

080016bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <USART2_IRQHandler+0x10>)
 80016c2:	f001 ffb9 	bl	8003638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000019c 	.word	0x2000019c

080016d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <USART3_IRQHandler+0x10>)
 80016d6:	f001 ffaf 	bl	8003638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000158 	.word	0x20000158

080016e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	463b      	mov	r3, r7
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <MX_TIM2_Init+0x94>)
 8001726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <MX_TIM2_Init+0x94>)
 800172e:	2207      	movs	r2, #7
 8001730:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <MX_TIM2_Init+0x94>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <MX_TIM2_Init+0x94>)
 800173a:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800173e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <MX_TIM2_Init+0x94>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <MX_TIM2_Init+0x94>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800174c:	4813      	ldr	r0, [pc, #76]	; (800179c <MX_TIM2_Init+0x94>)
 800174e:	f001 faa2 	bl	8002c96 <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001758:	f7ff fe6e 	bl	8001438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	4619      	mov	r1, r3
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <MX_TIM2_Init+0x94>)
 800176a:	f001 fc53 	bl	8003014 <HAL_TIM_ConfigClockSource>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001774:	f7ff fe60 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_TIM2_Init+0x94>)
 8001786:	f001 fe79 	bl	800347c <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001790:	f7ff fe52 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000110 	.word	0x20000110

080017a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b0:	d115      	bne.n	80017de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_TIM_Base_MspInit+0x48>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_TIM_Base_MspInit+0x48>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_TIM_Base_MspInit+0x48>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	201c      	movs	r0, #28
 80017d4:	f000 fa87 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017d8:	201c      	movs	r0, #28
 80017da:	f000 faa0 	bl	8001d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800

080017ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_USART2_UART_Init+0x50>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001824:	f001 feba 	bl	800359c <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800182e:	f7ff fe03 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000019c 	.word	0x2000019c
 800183c:	40004400 	.word	0x40004400

08001840 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_USART3_UART_Init+0x4c>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <MX_USART3_UART_Init+0x50>)
 8001848:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_USART3_UART_Init+0x4c>)
 800184c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001850:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_USART3_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_USART3_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_USART3_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_USART3_UART_Init+0x4c>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_USART3_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_USART3_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_USART3_UART_Init+0x4c>)
 8001878:	f001 fe90 	bl	800359c <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001882:	f7ff fdd9 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000158 	.word	0x20000158
 8001890:	40004800 	.word	0x40004800

08001894 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a3a      	ldr	r2, [pc, #232]	; (800199c <HAL_UART_MspInit+0x108>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d134      	bne.n	8001920 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <HAL_UART_MspInit+0x10c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a38      	ldr	r2, [pc, #224]	; (80019a0 <HAL_UART_MspInit+0x10c>)
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_UART_MspInit+0x10c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <HAL_UART_MspInit+0x10c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <HAL_UART_MspInit+0x10c>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <HAL_UART_MspInit+0x10c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018ee:	230c      	movs	r3, #12
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fe:	2307      	movs	r3, #7
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	4619      	mov	r1, r3
 8001908:	4826      	ldr	r0, [pc, #152]	; (80019a4 <HAL_UART_MspInit+0x110>)
 800190a:	f000 fab5 	bl	8001e78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	2026      	movs	r0, #38	; 0x26
 8001914:	f000 f9e7 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001918:	2026      	movs	r0, #38	; 0x26
 800191a:	f000 fa00 	bl	8001d1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800191e:	e039      	b.n	8001994 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a20      	ldr	r2, [pc, #128]	; (80019a8 <HAL_UART_MspInit+0x114>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d134      	bne.n	8001994 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <HAL_UART_MspInit+0x10c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <HAL_UART_MspInit+0x10c>)
 8001934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_UART_MspInit+0x10c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_UART_MspInit+0x10c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <HAL_UART_MspInit+0x10c>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_UART_MspInit+0x10c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001962:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001974:	2307      	movs	r3, #7
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	480b      	ldr	r0, [pc, #44]	; (80019ac <HAL_UART_MspInit+0x118>)
 8001980:	f000 fa7a 	bl	8001e78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2101      	movs	r1, #1
 8001988:	2027      	movs	r0, #39	; 0x27
 800198a:	f000 f9ac 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800198e:	2027      	movs	r0, #39	; 0x27
 8001990:	f000 f9c5 	bl	8001d1e <HAL_NVIC_EnableIRQ>
}
 8001994:	bf00      	nop
 8001996:	3730      	adds	r7, #48	; 0x30
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40004400 	.word	0x40004400
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40004800 	.word	0x40004800
 80019ac:	40020800 	.word	0x40020800

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019b6:	490e      	ldr	r1, [pc, #56]	; (80019f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019cc:	4c0b      	ldr	r4, [pc, #44]	; (80019fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019da:	f7ff fe83 	bl	80016e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f002 fd15 	bl	800440c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff fbb7 	bl	8001154 <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019f4:	08007498 	.word	0x08007498
  ldr r2, =_sbss
 80019f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019fc:	200001e4 	.word	0x200001e4

08001a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_Init+0x40>)
 8001a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_Init+0x40>)
 8001a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x40>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 f94f 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	200f      	movs	r0, #15
 8001a34:	f000 f808 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fde4 	bl	8001604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x54>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x58>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f967 	bl	8001d3a <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f000 f92f 	bl	8001ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_InitTick+0x5c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000008 	.word	0x20000008
 8001aa4:	20000004 	.word	0x20000004

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	200001e0 	.word	0x200001e0

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	200001e0 	.word	0x200001e0

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	; (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c9c:	d301      	bcc.n	8001ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00f      	b.n	8001cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <SysTick_Config+0x40>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001caa:	210f      	movs	r1, #15
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f7ff ff8e 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <SysTick_Config+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <SysTick_Config+0x40>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff29 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf8:	f7ff ff3e 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ff8e 	bl	8001c24 <NVIC_EncodePriority>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff5d 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff31 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffa2 	bl	8001c8c <SysTick_Config>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff feb6 	bl	8001ad0 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d008      	beq.n	8001d84 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2280      	movs	r2, #128	; 0x80
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e052      	b.n	8001e2a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0216 	bic.w	r2, r2, #22
 8001d92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d103      	bne.n	8001db4 <HAL_DMA_Abort+0x62>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0208 	bic.w	r2, r2, #8
 8001dc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd4:	e013      	b.n	8001dfe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dd6:	f7ff fe7b 	bl	8001ad0 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	d90c      	bls.n	8001dfe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2220      	movs	r2, #32
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2203      	movs	r2, #3
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e015      	b.n	8001e2a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e4      	bne.n	8001dd6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	223f      	movs	r2, #63	; 0x3f
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d004      	beq.n	8001e50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2280      	movs	r2, #128	; 0x80
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e00c      	b.n	8001e6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2205      	movs	r2, #5
 8001e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e16b      	b.n	800216c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e94:	2201      	movs	r2, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 815a 	bne.w	8002166 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d005      	beq.n	8001eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d130      	bne.n	8001f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 0201 	and.w	r2, r3, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d017      	beq.n	8001f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d123      	bne.n	8001fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80b4 	beq.w	8002166 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b60      	ldr	r3, [pc, #384]	; (8002184 <HAL_GPIO_Init+0x30c>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a5f      	ldr	r2, [pc, #380]	; (8002184 <HAL_GPIO_Init+0x30c>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b5d      	ldr	r3, [pc, #372]	; (8002184 <HAL_GPIO_Init+0x30c>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201a:	4a5b      	ldr	r2, [pc, #364]	; (8002188 <HAL_GPIO_Init+0x310>)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_GPIO_Init+0x314>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02b      	beq.n	800209e <HAL_GPIO_Init+0x226>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a51      	ldr	r2, [pc, #324]	; (8002190 <HAL_GPIO_Init+0x318>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d025      	beq.n	800209a <HAL_GPIO_Init+0x222>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a50      	ldr	r2, [pc, #320]	; (8002194 <HAL_GPIO_Init+0x31c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01f      	beq.n	8002096 <HAL_GPIO_Init+0x21e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4f      	ldr	r2, [pc, #316]	; (8002198 <HAL_GPIO_Init+0x320>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d019      	beq.n	8002092 <HAL_GPIO_Init+0x21a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4e      	ldr	r2, [pc, #312]	; (800219c <HAL_GPIO_Init+0x324>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x216>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4d      	ldr	r2, [pc, #308]	; (80021a0 <HAL_GPIO_Init+0x328>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x212>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4c      	ldr	r2, [pc, #304]	; (80021a4 <HAL_GPIO_Init+0x32c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x20e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4b      	ldr	r2, [pc, #300]	; (80021a8 <HAL_GPIO_Init+0x330>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x20a>
 800207e:	2307      	movs	r3, #7
 8002080:	e00e      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 8002082:	2308      	movs	r3, #8
 8002084:	e00c      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 8002086:	2306      	movs	r3, #6
 8002088:	e00a      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 800208a:	2305      	movs	r3, #5
 800208c:	e008      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 800208e:	2304      	movs	r3, #4
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 8002092:	2303      	movs	r3, #3
 8002094:	e004      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 8002096:	2302      	movs	r3, #2
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 800209e:	2300      	movs	r3, #0
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f002 0203 	and.w	r2, r2, #3
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	4093      	lsls	r3, r2
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b0:	4935      	ldr	r1, [pc, #212]	; (8002188 <HAL_GPIO_Init+0x310>)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_GPIO_Init+0x334>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e2:	4a32      	ldr	r2, [pc, #200]	; (80021ac <HAL_GPIO_Init+0x334>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020e8:	4b30      	ldr	r3, [pc, #192]	; (80021ac <HAL_GPIO_Init+0x334>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_GPIO_Init+0x334>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_GPIO_Init+0x334>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002136:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_GPIO_Init+0x334>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <HAL_GPIO_Init+0x334>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002160:	4a12      	ldr	r2, [pc, #72]	; (80021ac <HAL_GPIO_Init+0x334>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	f67f ae90 	bls.w	8001e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40013800 	.word	0x40013800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40020800 	.word	0x40020800
 8002198:	40020c00 	.word	0x40020c00
 800219c:	40021000 	.word	0x40021000
 80021a0:	40021400 	.word	0x40021400
 80021a4:	40021800 	.word	0x40021800
 80021a8:	40021c00 	.word	0x40021c00
 80021ac:	40013c00 	.word	0x40013c00

080021b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e001      	b.n	80021d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
 80021ec:	4613      	mov	r3, r2
 80021ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f0:	787b      	ldrb	r3, [r7, #1]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021fc:	e003      	b.n	8002206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	041a      	lsls	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	619a      	str	r2, [r3, #24]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e264      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d075      	beq.n	800231e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002232:	4ba3      	ldr	r3, [pc, #652]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b04      	cmp	r3, #4
 800223c:	d00c      	beq.n	8002258 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223e:	4ba0      	ldr	r3, [pc, #640]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002246:	2b08      	cmp	r3, #8
 8002248:	d112      	bne.n	8002270 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224a:	4b9d      	ldr	r3, [pc, #628]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002256:	d10b      	bne.n	8002270 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	4b99      	ldr	r3, [pc, #612]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d05b      	beq.n	800231c <HAL_RCC_OscConfig+0x108>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d157      	bne.n	800231c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e23f      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002278:	d106      	bne.n	8002288 <HAL_RCC_OscConfig+0x74>
 800227a:	4b91      	ldr	r3, [pc, #580]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a90      	ldr	r2, [pc, #576]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e01d      	b.n	80022c4 <HAL_RCC_OscConfig+0xb0>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x98>
 8002292:	4b8b      	ldr	r3, [pc, #556]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a8a      	ldr	r2, [pc, #552]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b88      	ldr	r3, [pc, #544]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a87      	ldr	r2, [pc, #540]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0xb0>
 80022ac:	4b84      	ldr	r3, [pc, #528]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a83      	ldr	r2, [pc, #524]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b81      	ldr	r3, [pc, #516]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a80      	ldr	r2, [pc, #512]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 80022be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff fc00 	bl	8001ad0 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff fbfc 	bl	8001ad0 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e204      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b76      	ldr	r3, [pc, #472]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0xc0>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fbec 	bl	8001ad0 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022fc:	f7ff fbe8 	bl	8001ad0 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e1f0      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	4b6c      	ldr	r3, [pc, #432]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0xe8>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d063      	beq.n	80023f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800232a:	4b65      	ldr	r3, [pc, #404]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002336:	4b62      	ldr	r3, [pc, #392]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800233e:	2b08      	cmp	r3, #8
 8002340:	d11c      	bne.n	800237c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002342:	4b5f      	ldr	r3, [pc, #380]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d116      	bne.n	800237c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	4b5c      	ldr	r3, [pc, #368]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_RCC_OscConfig+0x152>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e1c4      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002366:	4b56      	ldr	r3, [pc, #344]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4952      	ldr	r1, [pc, #328]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237a:	e03a      	b.n	80023f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d020      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002384:	4b4f      	ldr	r3, [pc, #316]	; (80024c4 <HAL_RCC_OscConfig+0x2b0>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238a:	f7ff fba1 	bl	8001ad0 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002392:	f7ff fb9d 	bl	8001ad0 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e1a5      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	4b46      	ldr	r3, [pc, #280]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b0:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4940      	ldr	r1, [pc, #256]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
 80023c4:	e015      	b.n	80023f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c6:	4b3f      	ldr	r3, [pc, #252]	; (80024c4 <HAL_RCC_OscConfig+0x2b0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7ff fb80 	bl	8001ad0 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d4:	f7ff fb7c 	bl	8001ad0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e184      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d030      	beq.n	8002460 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d016      	beq.n	8002434 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002406:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_RCC_OscConfig+0x2b4>)
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7ff fb60 	bl	8001ad0 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002414:	f7ff fb5c 	bl	8001ad0 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e164      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x200>
 8002432:	e015      	b.n	8002460 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002434:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_RCC_OscConfig+0x2b4>)
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243a:	f7ff fb49 	bl	8001ad0 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002442:	f7ff fb45 	bl	8001ad0 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e14d      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80a0 	beq.w	80025ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_RCC_OscConfig+0x2ac>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCC_OscConfig+0x2b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d121      	bne.n	80024ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_RCC_OscConfig+0x2b8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a07      	ldr	r2, [pc, #28]	; (80024cc <HAL_RCC_OscConfig+0x2b8>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b6:	f7ff fb0b 	bl	8001ad0 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	e011      	b.n	80024e2 <HAL_RCC_OscConfig+0x2ce>
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	42470000 	.word	0x42470000
 80024c8:	42470e80 	.word	0x42470e80
 80024cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d0:	f7ff fafe 	bl	8001ad0 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e106      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e2:	4b85      	ldr	r3, [pc, #532]	; (80026f8 <HAL_RCC_OscConfig+0x4e4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d106      	bne.n	8002504 <HAL_RCC_OscConfig+0x2f0>
 80024f6:	4b81      	ldr	r3, [pc, #516]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	4a80      	ldr	r2, [pc, #512]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6713      	str	r3, [r2, #112]	; 0x70
 8002502:	e01c      	b.n	800253e <HAL_RCC_OscConfig+0x32a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b05      	cmp	r3, #5
 800250a:	d10c      	bne.n	8002526 <HAL_RCC_OscConfig+0x312>
 800250c:	4b7b      	ldr	r3, [pc, #492]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a7a      	ldr	r2, [pc, #488]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
 8002518:	4b78      	ldr	r3, [pc, #480]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	4a77      	ldr	r2, [pc, #476]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6713      	str	r3, [r2, #112]	; 0x70
 8002524:	e00b      	b.n	800253e <HAL_RCC_OscConfig+0x32a>
 8002526:	4b75      	ldr	r3, [pc, #468]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252a:	4a74      	ldr	r2, [pc, #464]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	6713      	str	r3, [r2, #112]	; 0x70
 8002532:	4b72      	ldr	r3, [pc, #456]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002536:	4a71      	ldr	r2, [pc, #452]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 8002538:	f023 0304 	bic.w	r3, r3, #4
 800253c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d015      	beq.n	8002572 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002546:	f7ff fac3 	bl	8001ad0 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7ff fabf 	bl	8001ad0 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0c5      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	4b65      	ldr	r3, [pc, #404]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0ee      	beq.n	800254e <HAL_RCC_OscConfig+0x33a>
 8002570:	e014      	b.n	800259c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002572:	f7ff faad 	bl	8001ad0 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7ff faa9 	bl	8001ad0 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	; 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e0af      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002590:	4b5a      	ldr	r3, [pc, #360]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ee      	bne.n	800257a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a2:	4b56      	ldr	r3, [pc, #344]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a55      	ldr	r2, [pc, #340]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 80025a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 809b 	beq.w	80026ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025b8:	4b50      	ldr	r3, [pc, #320]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d05c      	beq.n	800267e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d141      	bne.n	8002650 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025cc:	4b4c      	ldr	r3, [pc, #304]	; (8002700 <HAL_RCC_OscConfig+0x4ec>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7ff fa7d 	bl	8001ad0 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025da:	f7ff fa79 	bl	8001ad0 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e081      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ec:	4b43      	ldr	r3, [pc, #268]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f0      	bne.n	80025da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69da      	ldr	r2, [r3, #28]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	019b      	lsls	r3, r3, #6
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	085b      	lsrs	r3, r3, #1
 8002610:	3b01      	subs	r3, #1
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	061b      	lsls	r3, r3, #24
 800261c:	4937      	ldr	r1, [pc, #220]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002622:	4b37      	ldr	r3, [pc, #220]	; (8002700 <HAL_RCC_OscConfig+0x4ec>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7ff fa52 	bl	8001ad0 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002630:	f7ff fa4e 	bl	8001ad0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e056      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002642:	4b2e      	ldr	r3, [pc, #184]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x41c>
 800264e:	e04e      	b.n	80026ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002650:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <HAL_RCC_OscConfig+0x4ec>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002656:	f7ff fa3b 	bl	8001ad0 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265e:	f7ff fa37 	bl	8001ad0 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e03f      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f0      	bne.n	800265e <HAL_RCC_OscConfig+0x44a>
 800267c:	e037      	b.n	80026ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e032      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800268a:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <HAL_RCC_OscConfig+0x4e8>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d028      	beq.n	80026ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d121      	bne.n	80026ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d11a      	bne.n	80026ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026ba:	4013      	ands	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d111      	bne.n	80026ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	085b      	lsrs	r3, r3, #1
 80026d2:	3b01      	subs	r3, #1
 80026d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40007000 	.word	0x40007000
 80026fc:	40023800 	.word	0x40023800
 8002700:	42470060 	.word	0x42470060

08002704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0cc      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b68      	ldr	r3, [pc, #416]	; (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d90c      	bls.n	8002740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b65      	ldr	r3, [pc, #404]	; (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b63      	ldr	r3, [pc, #396]	; (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b8      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a52      	ldr	r2, [pc, #328]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800277a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	494d      	ldr	r1, [pc, #308]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d044      	beq.n	8002824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d119      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e07f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d003      	beq.n	80027c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c2:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e06f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d2:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e067      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e2:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f023 0203 	bic.w	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4934      	ldr	r1, [pc, #208]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f4:	f7ff f96c 	bl	8001ad0 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fc:	f7ff f968 	bl	8001ad0 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e04f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 020c 	and.w	r2, r3, #12
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	429a      	cmp	r2, r3
 8002822:	d1eb      	bne.n	80027fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d20c      	bcs.n	800284c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e032      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4916      	ldr	r1, [pc, #88]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	490e      	ldr	r1, [pc, #56]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800288a:	f000 f821 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800288e:	4602      	mov	r2, r0
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	490a      	ldr	r1, [pc, #40]	; (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	5ccb      	ldrb	r3, [r1, r3]
 800289e:	fa22 f303 	lsr.w	r3, r2, r3
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff f8cc 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023c00 	.word	0x40023c00
 80028c0:	40023800 	.word	0x40023800
 80028c4:	08007470 	.word	0x08007470
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000004 	.word	0x20000004

080028d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	2300      	movs	r3, #0
 80028e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028e8:	4b67      	ldr	r3, [pc, #412]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d00d      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x40>
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	f200 80bd 	bhi.w	8002a74 <HAL_RCC_GetSysClockFreq+0x1a4>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x34>
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d003      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x3a>
 8002902:	e0b7      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002904:	4b61      	ldr	r3, [pc, #388]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002906:	60bb      	str	r3, [r7, #8]
       break;
 8002908:	e0b7      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800290a:	4b61      	ldr	r3, [pc, #388]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800290c:	60bb      	str	r3, [r7, #8]
      break;
 800290e:	e0b4      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002910:	4b5d      	ldr	r3, [pc, #372]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002918:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800291a:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d04d      	beq.n	80029c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002926:	4b58      	ldr	r3, [pc, #352]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	099b      	lsrs	r3, r3, #6
 800292c:	461a      	mov	r2, r3
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	ea02 0800 	and.w	r8, r2, r0
 800293e:	ea03 0901 	and.w	r9, r3, r1
 8002942:	4640      	mov	r0, r8
 8002944:	4649      	mov	r1, r9
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	014b      	lsls	r3, r1, #5
 8002950:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002954:	0142      	lsls	r2, r0, #5
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	ebb0 0008 	subs.w	r0, r0, r8
 800295e:	eb61 0109 	sbc.w	r1, r1, r9
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	018b      	lsls	r3, r1, #6
 800296c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002970:	0182      	lsls	r2, r0, #6
 8002972:	1a12      	subs	r2, r2, r0
 8002974:	eb63 0301 	sbc.w	r3, r3, r1
 8002978:	f04f 0000 	mov.w	r0, #0
 800297c:	f04f 0100 	mov.w	r1, #0
 8002980:	00d9      	lsls	r1, r3, #3
 8002982:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002986:	00d0      	lsls	r0, r2, #3
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	eb12 0208 	adds.w	r2, r2, r8
 8002990:	eb43 0309 	adc.w	r3, r3, r9
 8002994:	f04f 0000 	mov.w	r0, #0
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	0259      	lsls	r1, r3, #9
 800299e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029a2:	0250      	lsls	r0, r2, #9
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	f7fd fc08 	bl	80001c8 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4613      	mov	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e04a      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c2:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	099b      	lsrs	r3, r3, #6
 80029c8:	461a      	mov	r2, r3
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	ea02 0400 	and.w	r4, r2, r0
 80029da:	ea03 0501 	and.w	r5, r3, r1
 80029de:	4620      	mov	r0, r4
 80029e0:	4629      	mov	r1, r5
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	014b      	lsls	r3, r1, #5
 80029ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029f0:	0142      	lsls	r2, r0, #5
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	1b00      	subs	r0, r0, r4
 80029f8:	eb61 0105 	sbc.w	r1, r1, r5
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	018b      	lsls	r3, r1, #6
 8002a06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a0a:	0182      	lsls	r2, r0, #6
 8002a0c:	1a12      	subs	r2, r2, r0
 8002a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a12:	f04f 0000 	mov.w	r0, #0
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	00d9      	lsls	r1, r3, #3
 8002a1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a20:	00d0      	lsls	r0, r2, #3
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	1912      	adds	r2, r2, r4
 8002a28:	eb45 0303 	adc.w	r3, r5, r3
 8002a2c:	f04f 0000 	mov.w	r0, #0
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	0299      	lsls	r1, r3, #10
 8002a36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a3a:	0290      	lsls	r0, r2, #10
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	f7fd fbbc 	bl	80001c8 <__aeabi_uldivmod>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4613      	mov	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	0c1b      	lsrs	r3, r3, #16
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	3301      	adds	r3, #1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	60bb      	str	r3, [r7, #8]
      break;
 8002a72:	e002      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a76:	60bb      	str	r3, [r7, #8]
      break;
 8002a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	007a1200 	.word	0x007a1200

08002a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000000 	.word	0x20000000

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4903      	ldr	r1, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	08007480 	.word	0x08007480

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ad8:	f7ff ffdc 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0b5b      	lsrs	r3, r3, #13
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08007480 	.word	0x08007480

08002afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e07b      	b.n	8002c06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d108      	bne.n	8002b28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b1e:	d009      	beq.n	8002b34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
 8002b26:	e005      	b.n	8002b34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe fd10 	bl	8001574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb8:	ea42 0103 	orr.w	r1, r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	f003 0104 	and.w	r1, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f003 0210 	and.w	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69da      	ldr	r2, [r3, #28]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e034      	b.n	8002c8e <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7fd fd07 	bl	800064c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3308      	adds	r3, #8
 8002c46:	4619      	mov	r1, r3
 8002c48:	4610      	mov	r0, r2
 8002c4a:	f001 fb0f 	bl	800426c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	f001 fb59 	bl	8004310 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6858      	ldr	r0, [r3, #4]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	f001 fb8e 	bl	800438c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	6892      	ldr	r2, [r2, #8]
 8002c78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	6892      	ldr	r2, [r2, #8]
 8002c84:	f041 0101 	orr.w	r1, r1, #1
 8002c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e041      	b.n	8002d2c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7fe fd6f 	bl	80017a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	f000 fa97 	bl	8003208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d001      	beq.n	8002d4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e046      	b.n	8002dda <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a23      	ldr	r2, [pc, #140]	; (8002de8 <HAL_TIM_Base_Start+0xb4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d022      	beq.n	8002da4 <HAL_TIM_Base_Start+0x70>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d66:	d01d      	beq.n	8002da4 <HAL_TIM_Base_Start+0x70>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <HAL_TIM_Base_Start+0xb8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d018      	beq.n	8002da4 <HAL_TIM_Base_Start+0x70>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1e      	ldr	r2, [pc, #120]	; (8002df0 <HAL_TIM_Base_Start+0xbc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d013      	beq.n	8002da4 <HAL_TIM_Base_Start+0x70>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <HAL_TIM_Base_Start+0xc0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00e      	beq.n	8002da4 <HAL_TIM_Base_Start+0x70>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <HAL_TIM_Base_Start+0xc4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_TIM_Base_Start+0x70>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <HAL_TIM_Base_Start+0xc8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_TIM_Base_Start+0x70>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <HAL_TIM_Base_Start+0xcc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d111      	bne.n	8002dc8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d010      	beq.n	8002dd8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc6:	e007      	b.n	8002dd8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	40010400 	.word	0x40010400
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	40001800 	.word	0x40001800

08002e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d122      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d11b      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0202 	mvn.w	r2, #2
 8002e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9bf 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f9b1 	bl	80031b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f9c2 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d122      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0204 	mvn.w	r2, #4
 8002e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f995 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8002ea0:	e005      	b.n	8002eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f987 	bl	80031b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f998 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d122      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d11b      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0208 	mvn.w	r2, #8
 8002ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2204      	movs	r2, #4
 8002ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f96b 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f95d 	bl	80031b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f96e 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d122      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d11b      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0210 	mvn.w	r2, #16
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2208      	movs	r2, #8
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f941 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f933 	bl	80031b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f944 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10e      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0201 	mvn.w	r2, #1
 8002f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f90d 	bl	80031a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b80      	cmp	r3, #128	; 0x80
 8002f94:	d10e      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b80      	cmp	r3, #128	; 0x80
 8002fa2:	d107      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 faea 	bl	8003588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbe:	2b40      	cmp	r3, #64	; 0x40
 8002fc0:	d10e      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d107      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f909 	bl	80031f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d10e      	bne.n	800300c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d107      	bne.n	800300c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0220 	mvn.w	r2, #32
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fab4 	bl	8003574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_TIM_ConfigClockSource+0x1c>
 800302c:	2302      	movs	r3, #2
 800302e:	e0b4      	b.n	800319a <HAL_TIM_ConfigClockSource+0x186>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800304e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003068:	d03e      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0xd4>
 800306a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800306e:	f200 8087 	bhi.w	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003076:	f000 8086 	beq.w	8003186 <HAL_TIM_ConfigClockSource+0x172>
 800307a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307e:	d87f      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b70      	cmp	r3, #112	; 0x70
 8003082:	d01a      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0xa6>
 8003084:	2b70      	cmp	r3, #112	; 0x70
 8003086:	d87b      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003088:	2b60      	cmp	r3, #96	; 0x60
 800308a:	d050      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x11a>
 800308c:	2b60      	cmp	r3, #96	; 0x60
 800308e:	d877      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b50      	cmp	r3, #80	; 0x50
 8003092:	d03c      	beq.n	800310e <HAL_TIM_ConfigClockSource+0xfa>
 8003094:	2b50      	cmp	r3, #80	; 0x50
 8003096:	d873      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d058      	beq.n	800314e <HAL_TIM_ConfigClockSource+0x13a>
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d86f      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b30      	cmp	r3, #48	; 0x30
 80030a2:	d064      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x15a>
 80030a4:	2b30      	cmp	r3, #48	; 0x30
 80030a6:	d86b      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d060      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x15a>
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d867      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d05c      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x15a>
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d05a      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x15a>
 80030b8:	e062      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6899      	ldr	r1, [r3, #8]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f000 f9b7 	bl	800343c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	609a      	str	r2, [r3, #8]
      break;
 80030e6:	e04f      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6899      	ldr	r1, [r3, #8]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f000 f9a0 	bl	800343c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800310a:	609a      	str	r2, [r3, #8]
      break;
 800310c:	e03c      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6859      	ldr	r1, [r3, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	461a      	mov	r2, r3
 800311c:	f000 f914 	bl	8003348 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2150      	movs	r1, #80	; 0x50
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f96d 	bl	8003406 <TIM_ITRx_SetConfig>
      break;
 800312c:	e02c      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	461a      	mov	r2, r3
 800313c:	f000 f933 	bl	80033a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2160      	movs	r1, #96	; 0x60
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f95d 	bl	8003406 <TIM_ITRx_SetConfig>
      break;
 800314c:	e01c      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6859      	ldr	r1, [r3, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	461a      	mov	r2, r3
 800315c:	f000 f8f4 	bl	8003348 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2140      	movs	r1, #64	; 0x40
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f94d 	bl	8003406 <TIM_ITRx_SetConfig>
      break;
 800316c:	e00c      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4619      	mov	r1, r3
 8003178:	4610      	mov	r0, r2
 800317a:	f000 f944 	bl	8003406 <TIM_ITRx_SetConfig>
      break;
 800317e:	e003      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e000      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a40      	ldr	r2, [pc, #256]	; (800331c <TIM_Base_SetConfig+0x114>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003226:	d00f      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a3d      	ldr	r2, [pc, #244]	; (8003320 <TIM_Base_SetConfig+0x118>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00b      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a3c      	ldr	r2, [pc, #240]	; (8003324 <TIM_Base_SetConfig+0x11c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a3b      	ldr	r2, [pc, #236]	; (8003328 <TIM_Base_SetConfig+0x120>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a3a      	ldr	r2, [pc, #232]	; (800332c <TIM_Base_SetConfig+0x124>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d108      	bne.n	800325a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a2f      	ldr	r2, [pc, #188]	; (800331c <TIM_Base_SetConfig+0x114>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d02b      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003268:	d027      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <TIM_Base_SetConfig+0x118>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d023      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a2b      	ldr	r2, [pc, #172]	; (8003324 <TIM_Base_SetConfig+0x11c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01f      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <TIM_Base_SetConfig+0x120>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01b      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a29      	ldr	r2, [pc, #164]	; (800332c <TIM_Base_SetConfig+0x124>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d017      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a28      	ldr	r2, [pc, #160]	; (8003330 <TIM_Base_SetConfig+0x128>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a27      	ldr	r2, [pc, #156]	; (8003334 <TIM_Base_SetConfig+0x12c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00f      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a26      	ldr	r2, [pc, #152]	; (8003338 <TIM_Base_SetConfig+0x130>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00b      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a25      	ldr	r2, [pc, #148]	; (800333c <TIM_Base_SetConfig+0x134>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a24      	ldr	r2, [pc, #144]	; (8003340 <TIM_Base_SetConfig+0x138>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d003      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a23      	ldr	r2, [pc, #140]	; (8003344 <TIM_Base_SetConfig+0x13c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d108      	bne.n	80032cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <TIM_Base_SetConfig+0x114>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0xf8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a0c      	ldr	r2, [pc, #48]	; (800332c <TIM_Base_SetConfig+0x124>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d103      	bne.n	8003308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	615a      	str	r2, [r3, #20]
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800
 8003328:	40000c00 	.word	0x40000c00
 800332c:	40010400 	.word	0x40010400
 8003330:	40014000 	.word	0x40014000
 8003334:	40014400 	.word	0x40014400
 8003338:	40014800 	.word	0x40014800
 800333c:	40001800 	.word	0x40001800
 8003340:	40001c00 	.word	0x40001c00
 8003344:	40002000 	.word	0x40002000

08003348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f023 0201 	bic.w	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f023 030a 	bic.w	r3, r3, #10
 8003384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b087      	sub	sp, #28
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f023 0210 	bic.w	r2, r3, #16
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	031b      	lsls	r3, r3, #12
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	621a      	str	r2, [r3, #32]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003406:	b480      	push	{r7}
 8003408:	b085      	sub	sp, #20
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	f043 0307 	orr.w	r3, r3, #7
 8003428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	609a      	str	r2, [r3, #8]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	021a      	lsls	r2, r3, #8
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	431a      	orrs	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4313      	orrs	r3, r2
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	609a      	str	r2, [r3, #8]
}
 8003470:	bf00      	nop
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003490:	2302      	movs	r3, #2
 8003492:	e05a      	b.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a21      	ldr	r2, [pc, #132]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d022      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e0:	d01d      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1d      	ldr	r2, [pc, #116]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d018      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1b      	ldr	r2, [pc, #108]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1a      	ldr	r2, [pc, #104]	; (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00e      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a18      	ldr	r2, [pc, #96]	; (8003568 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a17      	ldr	r2, [pc, #92]	; (800356c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a15      	ldr	r2, [pc, #84]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10c      	bne.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	4313      	orrs	r3, r2
 800352e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40010000 	.word	0x40010000
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800
 8003564:	40000c00 	.word	0x40000c00
 8003568:	40010400 	.word	0x40010400
 800356c:	40014000 	.word	0x40014000
 8003570:	40001800 	.word	0x40001800

08003574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e03f      	b.n	800362e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe f966 	bl	8001894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2224      	movs	r2, #36	; 0x24
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fc7b 	bl	8003edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b0ba      	sub	sp, #232	; 0xe8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003664:	2300      	movs	r3, #0
 8003666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800366a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10f      	bne.n	800369e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_UART_IRQHandler+0x66>
 800368a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fb65 	bl	8003d66 <UART_Receive_IT>
      return;
 800369c:	e256      	b.n	8003b4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800369e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 80de 	beq.w	8003864 <HAL_UART_IRQHandler+0x22c>
 80036a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d106      	bne.n	80036c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80d1 	beq.w	8003864 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_UART_IRQHandler+0xae>
 80036ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_UART_IRQHandler+0xd2>
 80036f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f043 0202 	orr.w	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800370a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <HAL_UART_IRQHandler+0xf6>
 8003716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d005      	beq.n	800372e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f043 0204 	orr.w	r2, r3, #4
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800372e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d011      	beq.n	800375e <HAL_UART_IRQHandler+0x126>
 800373a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d105      	bne.n	8003752 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f043 0208 	orr.w	r2, r3, #8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 81ed 	beq.w	8003b42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_UART_IRQHandler+0x14e>
 8003774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 faf0 	bl	8003d66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003790:	2b40      	cmp	r3, #64	; 0x40
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d103      	bne.n	80037b2 <HAL_UART_IRQHandler+0x17a>
 80037aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d04f      	beq.n	8003852 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f9f8 	bl	8003ba8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c2:	2b40      	cmp	r3, #64	; 0x40
 80037c4:	d141      	bne.n	800384a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3314      	adds	r3, #20
 80037cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3314      	adds	r3, #20
 80037ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800380a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1d9      	bne.n	80037c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	2b00      	cmp	r3, #0
 8003818:	d013      	beq.n	8003842 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	4a7d      	ldr	r2, [pc, #500]	; (8003a14 <HAL_UART_IRQHandler+0x3dc>)
 8003820:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fb03 	bl	8001e32 <HAL_DMA_Abort_IT>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d016      	beq.n	8003860 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800383c:	4610      	mov	r0, r2
 800383e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003840:	e00e      	b.n	8003860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f99a 	bl	8003b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	e00a      	b.n	8003860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f996 	bl	8003b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e006      	b.n	8003860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f992 	bl	8003b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800385e:	e170      	b.n	8003b42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	bf00      	nop
    return;
 8003862:	e16e      	b.n	8003b42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	2b01      	cmp	r3, #1
 800386a:	f040 814a 	bne.w	8003b02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8143 	beq.w	8003b02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800387c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 813c 	beq.w	8003b02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b40      	cmp	r3, #64	; 0x40
 80038ac:	f040 80b4 	bne.w	8003a18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8140 	beq.w	8003b46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038ce:	429a      	cmp	r2, r3
 80038d0:	f080 8139 	bcs.w	8003b46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e6:	f000 8088 	beq.w	80039fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	330c      	adds	r3, #12
 8003912:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003916:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800391a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003922:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800392e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1d9      	bne.n	80038ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3314      	adds	r3, #20
 800393c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3314      	adds	r3, #20
 8003956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800395a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800395e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003962:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800396c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e1      	bne.n	8003936 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3314      	adds	r3, #20
 8003978:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3314      	adds	r3, #20
 8003992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003996:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003998:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800399c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1e3      	bne.n	8003972 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	330c      	adds	r3, #12
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ca:	f023 0310 	bic.w	r3, r3, #16
 80039ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80039de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e3      	bne.n	80039b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe f9ac 	bl	8001d52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f8c0 	bl	8003b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a10:	e099      	b.n	8003b46 <HAL_UART_IRQHandler+0x50e>
 8003a12:	bf00      	nop
 8003a14:	08003c6f 	.word	0x08003c6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 808b 	beq.w	8003b4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8086 	beq.w	8003b4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a62:	647a      	str	r2, [r7, #68]	; 0x44
 8003a64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e3      	bne.n	8003a3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	623b      	str	r3, [r7, #32]
   return(result);
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3314      	adds	r3, #20
 8003a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a9a:	633a      	str	r2, [r7, #48]	; 0x30
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e3      	bne.n	8003a76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	e853 3f00 	ldrex	r3, [r3]
 8003aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0310 	bic.w	r3, r3, #16
 8003ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ae0:	61fa      	str	r2, [r7, #28]
 8003ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	69b9      	ldr	r1, [r7, #24]
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	e841 2300 	strex	r3, r2, [r1]
 8003aec:	617b      	str	r3, [r7, #20]
   return(result);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e3      	bne.n	8003abc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f848 	bl	8003b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b00:	e023      	b.n	8003b4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <HAL_UART_IRQHandler+0x4ea>
 8003b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f8bb 	bl	8003c96 <UART_Transmit_IT>
    return;
 8003b20:	e014      	b.n	8003b4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00e      	beq.n	8003b4c <HAL_UART_IRQHandler+0x514>
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8fb 	bl	8003d36 <UART_EndTransmit_IT>
    return;
 8003b40:	e004      	b.n	8003b4c <HAL_UART_IRQHandler+0x514>
    return;
 8003b42:	bf00      	nop
 8003b44:	e002      	b.n	8003b4c <HAL_UART_IRQHandler+0x514>
      return;
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <HAL_UART_IRQHandler+0x514>
      return;
 8003b4a:	bf00      	nop
  }
}
 8003b4c:	37e8      	adds	r7, #232	; 0xe8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop

08003b54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b095      	sub	sp, #84	; 0x54
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	330c      	adds	r3, #12
 8003bce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bd0:	643a      	str	r2, [r7, #64]	; 0x40
 8003bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e5      	bne.n	8003bb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3314      	adds	r3, #20
 8003bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3314      	adds	r3, #20
 8003c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e5      	bne.n	8003be4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d119      	bne.n	8003c54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f023 0310 	bic.w	r3, r3, #16
 8003c36:	647b      	str	r3, [r7, #68]	; 0x44
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c40:	61ba      	str	r2, [r7, #24]
 8003c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6979      	ldr	r1, [r7, #20]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c62:	bf00      	nop
 8003c64:	3754      	adds	r7, #84	; 0x54
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f7ff ff77 	bl	8003b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b085      	sub	sp, #20
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b21      	cmp	r3, #33	; 0x21
 8003ca8:	d13e      	bne.n	8003d28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb2:	d114      	bne.n	8003cde <UART_Transmit_IT+0x48>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d110      	bne.n	8003cde <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	1c9a      	adds	r2, r3, #2
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	621a      	str	r2, [r3, #32]
 8003cdc:	e008      	b.n	8003cf0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	1c59      	adds	r1, r3, #1
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6211      	str	r1, [r2, #32]
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10f      	bne.n	8003d24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e000      	b.n	8003d2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
  }
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff fefc 	bl	8003b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b08c      	sub	sp, #48	; 0x30
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b22      	cmp	r3, #34	; 0x22
 8003d78:	f040 80ab 	bne.w	8003ed2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d84:	d117      	bne.n	8003db6 <UART_Receive_IT+0x50>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d113      	bne.n	8003db6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	1c9a      	adds	r2, r3, #2
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	629a      	str	r2, [r3, #40]	; 0x28
 8003db4:	e026      	b.n	8003e04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc8:	d007      	beq.n	8003dda <UART_Receive_IT+0x74>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <UART_Receive_IT+0x82>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	e008      	b.n	8003dfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4619      	mov	r1, r3
 8003e12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d15a      	bne.n	8003ece <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0220 	bic.w	r2, r2, #32
 8003e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d135      	bne.n	8003ec4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f023 0310 	bic.w	r3, r3, #16
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7e:	623a      	str	r2, [r7, #32]
 8003e80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	69f9      	ldr	r1, [r7, #28]
 8003e84:	6a3a      	ldr	r2, [r7, #32]
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e5      	bne.n	8003e5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d10a      	bne.n	8003eb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff fe67 	bl	8003b90 <HAL_UARTEx_RxEventCallback>
 8003ec2:	e002      	b.n	8003eca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff fe4f 	bl	8003b68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e002      	b.n	8003ed4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e000      	b.n	8003ed4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
  }
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3730      	adds	r7, #48	; 0x30
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee0:	b09f      	sub	sp, #124	; 0x7c
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef2:	68d9      	ldr	r1, [r3, #12]
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	ea40 0301 	orr.w	r3, r0, r1
 8003efc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f20:	f021 010c 	bic.w	r1, r1, #12
 8003f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3a:	6999      	ldr	r1, [r3, #24]
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	ea40 0301 	orr.w	r3, r0, r1
 8003f44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4bc5      	ldr	r3, [pc, #788]	; (8004260 <UART_SetConfig+0x384>)
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d004      	beq.n	8003f5a <UART_SetConfig+0x7e>
 8003f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4bc3      	ldr	r3, [pc, #780]	; (8004264 <UART_SetConfig+0x388>)
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d103      	bne.n	8003f62 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f5a:	f7fe fdbb 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8003f5e:	6778      	str	r0, [r7, #116]	; 0x74
 8003f60:	e002      	b.n	8003f68 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f62:	f7fe fda3 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8003f66:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f70:	f040 80b6 	bne.w	80040e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f76:	461c      	mov	r4, r3
 8003f78:	f04f 0500 	mov.w	r5, #0
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	462b      	mov	r3, r5
 8003f80:	1891      	adds	r1, r2, r2
 8003f82:	6439      	str	r1, [r7, #64]	; 0x40
 8003f84:	415b      	adcs	r3, r3
 8003f86:	647b      	str	r3, [r7, #68]	; 0x44
 8003f88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f8c:	1912      	adds	r2, r2, r4
 8003f8e:	eb45 0303 	adc.w	r3, r5, r3
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	00d9      	lsls	r1, r3, #3
 8003f9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fa0:	00d0      	lsls	r0, r2, #3
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	1911      	adds	r1, r2, r4
 8003fa8:	6639      	str	r1, [r7, #96]	; 0x60
 8003faa:	416b      	adcs	r3, r5
 8003fac:	667b      	str	r3, [r7, #100]	; 0x64
 8003fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	1891      	adds	r1, r2, r2
 8003fba:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fbc:	415b      	adcs	r3, r3
 8003fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003fc8:	f7fc f8fe 	bl	80001c8 <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4ba5      	ldr	r3, [pc, #660]	; (8004268 <UART_SetConfig+0x38c>)
 8003fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	011e      	lsls	r6, r3, #4
 8003fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fdc:	461c      	mov	r4, r3
 8003fde:	f04f 0500 	mov.w	r5, #0
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	462b      	mov	r3, r5
 8003fe6:	1891      	adds	r1, r2, r2
 8003fe8:	6339      	str	r1, [r7, #48]	; 0x30
 8003fea:	415b      	adcs	r3, r3
 8003fec:	637b      	str	r3, [r7, #52]	; 0x34
 8003fee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ff2:	1912      	adds	r2, r2, r4
 8003ff4:	eb45 0303 	adc.w	r3, r5, r3
 8003ff8:	f04f 0000 	mov.w	r0, #0
 8003ffc:	f04f 0100 	mov.w	r1, #0
 8004000:	00d9      	lsls	r1, r3, #3
 8004002:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004006:	00d0      	lsls	r0, r2, #3
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	1911      	adds	r1, r2, r4
 800400e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004010:	416b      	adcs	r3, r5
 8004012:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	461a      	mov	r2, r3
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	1891      	adds	r1, r2, r2
 8004020:	62b9      	str	r1, [r7, #40]	; 0x28
 8004022:	415b      	adcs	r3, r3
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800402a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800402e:	f7fc f8cb 	bl	80001c8 <__aeabi_uldivmod>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4b8c      	ldr	r3, [pc, #560]	; (8004268 <UART_SetConfig+0x38c>)
 8004038:	fba3 1302 	umull	r1, r3, r3, r2
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	2164      	movs	r1, #100	; 0x64
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	3332      	adds	r3, #50	; 0x32
 800404a:	4a87      	ldr	r2, [pc, #540]	; (8004268 <UART_SetConfig+0x38c>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004058:	441e      	add	r6, r3
 800405a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405c:	4618      	mov	r0, r3
 800405e:	f04f 0100 	mov.w	r1, #0
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	1894      	adds	r4, r2, r2
 8004068:	623c      	str	r4, [r7, #32]
 800406a:	415b      	adcs	r3, r3
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
 800406e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004072:	1812      	adds	r2, r2, r0
 8004074:	eb41 0303 	adc.w	r3, r1, r3
 8004078:	f04f 0400 	mov.w	r4, #0
 800407c:	f04f 0500 	mov.w	r5, #0
 8004080:	00dd      	lsls	r5, r3, #3
 8004082:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004086:	00d4      	lsls	r4, r2, #3
 8004088:	4622      	mov	r2, r4
 800408a:	462b      	mov	r3, r5
 800408c:	1814      	adds	r4, r2, r0
 800408e:	653c      	str	r4, [r7, #80]	; 0x50
 8004090:	414b      	adcs	r3, r1
 8004092:	657b      	str	r3, [r7, #84]	; 0x54
 8004094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	461a      	mov	r2, r3
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	1891      	adds	r1, r2, r2
 80040a0:	61b9      	str	r1, [r7, #24]
 80040a2:	415b      	adcs	r3, r3
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80040ae:	f7fc f88b 	bl	80001c8 <__aeabi_uldivmod>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4b6c      	ldr	r3, [pc, #432]	; (8004268 <UART_SetConfig+0x38c>)
 80040b8:	fba3 1302 	umull	r1, r3, r3, r2
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	2164      	movs	r1, #100	; 0x64
 80040c0:	fb01 f303 	mul.w	r3, r1, r3
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	3332      	adds	r3, #50	; 0x32
 80040ca:	4a67      	ldr	r2, [pc, #412]	; (8004268 <UART_SetConfig+0x38c>)
 80040cc:	fba2 2303 	umull	r2, r3, r2, r3
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	f003 0207 	and.w	r2, r3, #7
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4432      	add	r2, r6
 80040dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040de:	e0b9      	b.n	8004254 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e2:	461c      	mov	r4, r3
 80040e4:	f04f 0500 	mov.w	r5, #0
 80040e8:	4622      	mov	r2, r4
 80040ea:	462b      	mov	r3, r5
 80040ec:	1891      	adds	r1, r2, r2
 80040ee:	6139      	str	r1, [r7, #16]
 80040f0:	415b      	adcs	r3, r3
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040f8:	1912      	adds	r2, r2, r4
 80040fa:	eb45 0303 	adc.w	r3, r5, r3
 80040fe:	f04f 0000 	mov.w	r0, #0
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	00d9      	lsls	r1, r3, #3
 8004108:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800410c:	00d0      	lsls	r0, r2, #3
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	eb12 0804 	adds.w	r8, r2, r4
 8004116:	eb43 0905 	adc.w	r9, r3, r5
 800411a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4618      	mov	r0, r3
 8004120:	f04f 0100 	mov.w	r1, #0
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	008b      	lsls	r3, r1, #2
 800412e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004132:	0082      	lsls	r2, r0, #2
 8004134:	4640      	mov	r0, r8
 8004136:	4649      	mov	r1, r9
 8004138:	f7fc f846 	bl	80001c8 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4b49      	ldr	r3, [pc, #292]	; (8004268 <UART_SetConfig+0x38c>)
 8004142:	fba3 2302 	umull	r2, r3, r3, r2
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	011e      	lsls	r6, r3, #4
 800414a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414c:	4618      	mov	r0, r3
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	1894      	adds	r4, r2, r2
 8004158:	60bc      	str	r4, [r7, #8]
 800415a:	415b      	adcs	r3, r3
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004162:	1812      	adds	r2, r2, r0
 8004164:	eb41 0303 	adc.w	r3, r1, r3
 8004168:	f04f 0400 	mov.w	r4, #0
 800416c:	f04f 0500 	mov.w	r5, #0
 8004170:	00dd      	lsls	r5, r3, #3
 8004172:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004176:	00d4      	lsls	r4, r2, #3
 8004178:	4622      	mov	r2, r4
 800417a:	462b      	mov	r3, r5
 800417c:	1814      	adds	r4, r2, r0
 800417e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004180:	414b      	adcs	r3, r1
 8004182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4618      	mov	r0, r3
 800418a:	f04f 0100 	mov.w	r1, #0
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	008b      	lsls	r3, r1, #2
 8004198:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800419c:	0082      	lsls	r2, r0, #2
 800419e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80041a2:	f7fc f811 	bl	80001c8 <__aeabi_uldivmod>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4b2f      	ldr	r3, [pc, #188]	; (8004268 <UART_SetConfig+0x38c>)
 80041ac:	fba3 1302 	umull	r1, r3, r3, r2
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	2164      	movs	r1, #100	; 0x64
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	3332      	adds	r3, #50	; 0x32
 80041be:	4a2a      	ldr	r2, [pc, #168]	; (8004268 <UART_SetConfig+0x38c>)
 80041c0:	fba2 2303 	umull	r2, r3, r2, r3
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ca:	441e      	add	r6, r3
 80041cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ce:	4618      	mov	r0, r3
 80041d0:	f04f 0100 	mov.w	r1, #0
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	1894      	adds	r4, r2, r2
 80041da:	603c      	str	r4, [r7, #0]
 80041dc:	415b      	adcs	r3, r3
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041e4:	1812      	adds	r2, r2, r0
 80041e6:	eb41 0303 	adc.w	r3, r1, r3
 80041ea:	f04f 0400 	mov.w	r4, #0
 80041ee:	f04f 0500 	mov.w	r5, #0
 80041f2:	00dd      	lsls	r5, r3, #3
 80041f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041f8:	00d4      	lsls	r4, r2, #3
 80041fa:	4622      	mov	r2, r4
 80041fc:	462b      	mov	r3, r5
 80041fe:	eb12 0a00 	adds.w	sl, r2, r0
 8004202:	eb43 0b01 	adc.w	fp, r3, r1
 8004206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4618      	mov	r0, r3
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	008b      	lsls	r3, r1, #2
 800421a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800421e:	0082      	lsls	r2, r0, #2
 8004220:	4650      	mov	r0, sl
 8004222:	4659      	mov	r1, fp
 8004224:	f7fb ffd0 	bl	80001c8 <__aeabi_uldivmod>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <UART_SetConfig+0x38c>)
 800422e:	fba3 1302 	umull	r1, r3, r3, r2
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2164      	movs	r1, #100	; 0x64
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	3332      	adds	r3, #50	; 0x32
 8004240:	4a09      	ldr	r2, [pc, #36]	; (8004268 <UART_SetConfig+0x38c>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	f003 020f 	and.w	r2, r3, #15
 800424c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4432      	add	r2, r6
 8004252:	609a      	str	r2, [r3, #8]
}
 8004254:	bf00      	nop
 8004256:	377c      	adds	r7, #124	; 0x7c
 8004258:	46bd      	mov	sp, r7
 800425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425e:	bf00      	nop
 8004260:	40011000 	.word	0x40011000
 8004264:	40011400 	.word	0x40011400
 8004268:	51eb851f 	.word	0x51eb851f

0800426c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004284:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4b20      	ldr	r3, [pc, #128]	; (800430c <FSMC_NORSRAM_Init+0xa0>)
 800428a:	4013      	ands	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004296:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800429c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80042a2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80042a8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80042ae:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80042b4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80042ba:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80042c0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80042c6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80042cc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80042d2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80042d8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d103      	bne.n	80042f0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ee:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	fff00080 	.word	0xfff00080

08004310 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800432a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004332:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800433e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004346:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800434e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	3b01      	subs	r3, #1
 8004356:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004358:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	3b02      	subs	r3, #2
 8004360:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004362:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004368:	4313      	orrs	r3, r2
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6979      	ldr	r1, [r7, #20]
 8004378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043a4:	d122      	bne.n	80043ec <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ae:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4b15      	ldr	r3, [pc, #84]	; (8004408 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80043c2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80043ca:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80043d2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80043d8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6979      	ldr	r1, [r7, #20]
 80043e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80043ea:	e005      	b.n	80043f8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80043f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	cff00000 	.word	0xcff00000

0800440c <__libc_init_array>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	4d0d      	ldr	r5, [pc, #52]	; (8004444 <__libc_init_array+0x38>)
 8004410:	4c0d      	ldr	r4, [pc, #52]	; (8004448 <__libc_init_array+0x3c>)
 8004412:	1b64      	subs	r4, r4, r5
 8004414:	10a4      	asrs	r4, r4, #2
 8004416:	2600      	movs	r6, #0
 8004418:	42a6      	cmp	r6, r4
 800441a:	d109      	bne.n	8004430 <__libc_init_array+0x24>
 800441c:	4d0b      	ldr	r5, [pc, #44]	; (800444c <__libc_init_array+0x40>)
 800441e:	4c0c      	ldr	r4, [pc, #48]	; (8004450 <__libc_init_array+0x44>)
 8004420:	f000 f820 	bl	8004464 <_init>
 8004424:	1b64      	subs	r4, r4, r5
 8004426:	10a4      	asrs	r4, r4, #2
 8004428:	2600      	movs	r6, #0
 800442a:	42a6      	cmp	r6, r4
 800442c:	d105      	bne.n	800443a <__libc_init_array+0x2e>
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	f855 3b04 	ldr.w	r3, [r5], #4
 8004434:	4798      	blx	r3
 8004436:	3601      	adds	r6, #1
 8004438:	e7ee      	b.n	8004418 <__libc_init_array+0xc>
 800443a:	f855 3b04 	ldr.w	r3, [r5], #4
 800443e:	4798      	blx	r3
 8004440:	3601      	adds	r6, #1
 8004442:	e7f2      	b.n	800442a <__libc_init_array+0x1e>
 8004444:	08007490 	.word	0x08007490
 8004448:	08007490 	.word	0x08007490
 800444c:	08007490 	.word	0x08007490
 8004450:	08007494 	.word	0x08007494

08004454 <memset>:
 8004454:	4402      	add	r2, r0
 8004456:	4603      	mov	r3, r0
 8004458:	4293      	cmp	r3, r2
 800445a:	d100      	bne.n	800445e <memset+0xa>
 800445c:	4770      	bx	lr
 800445e:	f803 1b01 	strb.w	r1, [r3], #1
 8004462:	e7f9      	b.n	8004458 <memset+0x4>

08004464 <_init>:
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004466:	bf00      	nop
 8004468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446a:	bc08      	pop	{r3}
 800446c:	469e      	mov	lr, r3
 800446e:	4770      	bx	lr

08004470 <_fini>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	bf00      	nop
 8004474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004476:	bc08      	pop	{r3}
 8004478:	469e      	mov	lr, r3
 800447a:	4770      	bx	lr
