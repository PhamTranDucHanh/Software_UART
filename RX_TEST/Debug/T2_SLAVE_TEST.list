
T2_SLAVE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005468  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003094  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800868c  0800868c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008694  08008694  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008694  08008694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008698  08008698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800869c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001f4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d04  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032b3  00000000  00000000  00037da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  0003b058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001058  00000000  00000000  0003c208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024038  00000000  00000000  0003d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016068  00000000  00000000  00061298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1e92  00000000  00000000  00077300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00149192  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050e0  00000000  00000000  001491e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055e0 	.word	0x080055e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080055e0 	.word	0x080055e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08e      	sub	sp, #56	; 0x38
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]
 800057e:	615a      	str	r2, [r3, #20]
 8000580:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000582:	463b      	mov	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
 8000590:	615a      	str	r2, [r3, #20]
 8000592:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000594:	4b2f      	ldr	r3, [pc, #188]	; (8000654 <MX_FSMC_Init+0xec>)
 8000596:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800059a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800059c:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <MX_FSMC_Init+0xec>)
 800059e:	4a2e      	ldr	r2, [pc, #184]	; (8000658 <MX_FSMC_Init+0xf0>)
 80005a0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80005a2:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <MX_FSMC_Init+0xec>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80005a8:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <MX_FSMC_Init+0xec>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80005ae:	4b29      	ldr	r3, [pc, #164]	; (8000654 <MX_FSMC_Init+0xec>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <MX_FSMC_Init+0xec>)
 80005b6:	2210      	movs	r2, #16
 80005b8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <MX_FSMC_Init+0xec>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <MX_FSMC_Init+0xec>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80005c6:	4b23      	ldr	r3, [pc, #140]	; (8000654 <MX_FSMC_Init+0xec>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_FSMC_Init+0xec>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <MX_FSMC_Init+0xec>)
 80005d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_FSMC_Init+0xec>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <MX_FSMC_Init+0xec>)
 80005e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005e6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_FSMC_Init+0xec>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_FSMC_Init+0xec>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_FSMC_Init+0xec>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80005fa:	230f      	movs	r3, #15
 80005fc:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80005fe:	230f      	movs	r3, #15
 8000600:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000602:	233c      	movs	r3, #60	; 0x3c
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800060a:	2310      	movs	r3, #16
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800060e:	2311      	movs	r3, #17
 8000610:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000612:	2300      	movs	r3, #0
 8000614:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000616:	2308      	movs	r3, #8
 8000618:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800061a:	230f      	movs	r3, #15
 800061c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800061e:	2309      	movs	r3, #9
 8000620:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000626:	2310      	movs	r3, #16
 8000628:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800062a:	2311      	movs	r3, #17
 800062c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000632:	463a      	mov	r2, r7
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <MX_FSMC_Init+0xec>)
 800063c:	f002 fbd3 	bl	8002de6 <HAL_SRAM_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000646:	f000 ff3f 	bl	80014c8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800064a:	bf00      	nop
 800064c:	3738      	adds	r7, #56	; 0x38
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000009c 	.word	0x2000009c
 8000658:	a0000104 	.word	0xa0000104

0800065c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_FSMC_MspInit+0x88>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d131      	bne.n	80006dc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <HAL_FSMC_MspInit+0x88>)
 800067a:	2201      	movs	r2, #1
 800067c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <HAL_FSMC_MspInit+0x8c>)
 8000684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000686:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <HAL_FSMC_MspInit+0x8c>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6393      	str	r3, [r2, #56]	; 0x38
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <HAL_FSMC_MspInit+0x8c>)
 8000690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800069a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800069e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006ac:	230c      	movs	r3, #12
 80006ae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <HAL_FSMC_MspInit+0x90>)
 80006b6:	f001 fccb 	bl	8002050 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80006ba:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80006be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006cc:	230c      	movs	r3, #12
 80006ce:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4619      	mov	r1, r3
 80006d4:	4806      	ldr	r0, [pc, #24]	; (80006f0 <HAL_FSMC_MspInit+0x94>)
 80006d6:	f001 fcbb 	bl	8002050 <HAL_GPIO_Init>
 80006da:	e000      	b.n	80006de <HAL_FSMC_MspInit+0x82>
    return;
 80006dc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40020c00 	.word	0x40020c00

080006f4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80006fc:	f7ff ffae 	bl	800065c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08e      	sub	sp, #56	; 0x38
 800070c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
 8000722:	4b87      	ldr	r3, [pc, #540]	; (8000940 <MX_GPIO_Init+0x238>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a86      	ldr	r2, [pc, #536]	; (8000940 <MX_GPIO_Init+0x238>)
 8000728:	f043 0310 	orr.w	r3, r3, #16
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b84      	ldr	r3, [pc, #528]	; (8000940 <MX_GPIO_Init+0x238>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0310 	and.w	r3, r3, #16
 8000736:	623b      	str	r3, [r7, #32]
 8000738:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
 800073e:	4b80      	ldr	r3, [pc, #512]	; (8000940 <MX_GPIO_Init+0x238>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a7f      	ldr	r2, [pc, #508]	; (8000940 <MX_GPIO_Init+0x238>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b7d      	ldr	r3, [pc, #500]	; (8000940 <MX_GPIO_Init+0x238>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	61fb      	str	r3, [r7, #28]
 8000754:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	4b79      	ldr	r3, [pc, #484]	; (8000940 <MX_GPIO_Init+0x238>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a78      	ldr	r2, [pc, #480]	; (8000940 <MX_GPIO_Init+0x238>)
 8000760:	f043 0320 	orr.w	r3, r3, #32
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b76      	ldr	r3, [pc, #472]	; (8000940 <MX_GPIO_Init+0x238>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0320 	and.w	r3, r3, #32
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	4b72      	ldr	r3, [pc, #456]	; (8000940 <MX_GPIO_Init+0x238>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a71      	ldr	r2, [pc, #452]	; (8000940 <MX_GPIO_Init+0x238>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b6f      	ldr	r3, [pc, #444]	; (8000940 <MX_GPIO_Init+0x238>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b6b      	ldr	r3, [pc, #428]	; (8000940 <MX_GPIO_Init+0x238>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a6a      	ldr	r2, [pc, #424]	; (8000940 <MX_GPIO_Init+0x238>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b68      	ldr	r3, [pc, #416]	; (8000940 <MX_GPIO_Init+0x238>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b64      	ldr	r3, [pc, #400]	; (8000940 <MX_GPIO_Init+0x238>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a63      	ldr	r2, [pc, #396]	; (8000940 <MX_GPIO_Init+0x238>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b61      	ldr	r3, [pc, #388]	; (8000940 <MX_GPIO_Init+0x238>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b5d      	ldr	r3, [pc, #372]	; (8000940 <MX_GPIO_Init+0x238>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a5c      	ldr	r2, [pc, #368]	; (8000940 <MX_GPIO_Init+0x238>)
 80007d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b5a      	ldr	r3, [pc, #360]	; (8000940 <MX_GPIO_Init+0x238>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b56      	ldr	r3, [pc, #344]	; (8000940 <MX_GPIO_Init+0x238>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a55      	ldr	r2, [pc, #340]	; (8000940 <MX_GPIO_Init+0x238>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b53      	ldr	r3, [pc, #332]	; (8000940 <MX_GPIO_Init+0x238>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2170      	movs	r1, #112	; 0x70
 8000802:	4850      	ldr	r0, [pc, #320]	; (8000944 <MX_GPIO_Init+0x23c>)
 8000804:	f001 fdd8 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080e:	484e      	ldr	r0, [pc, #312]	; (8000948 <MX_GPIO_Init+0x240>)
 8000810:	f001 fdd2 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081a:	484c      	ldr	r0, [pc, #304]	; (800094c <MX_GPIO_Init+0x244>)
 800081c:	f001 fdcc 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW_UART_TX_Pin|FSMC_BLK_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	f248 1110 	movw	r1, #33040	; 0x8110
 8000826:	484a      	ldr	r0, [pc, #296]	; (8000950 <MX_GPIO_Init+0x248>)
 8000828:	f001 fdc6 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2140      	movs	r1, #64	; 0x40
 8000830:	4848      	ldr	r0, [pc, #288]	; (8000954 <MX_GPIO_Init+0x24c>)
 8000832:	f001 fdc1 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4847      	ldr	r0, [pc, #284]	; (8000958 <MX_GPIO_Init+0x250>)
 800083c:	f001 fdbc 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000840:	2370      	movs	r3, #112	; 0x70
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000854:	4619      	mov	r1, r3
 8000856:	483b      	ldr	r0, [pc, #236]	; (8000944 <MX_GPIO_Init+0x23c>)
 8000858:	f001 fbfa 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800085c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	4619      	mov	r1, r3
 8000874:	4834      	ldr	r0, [pc, #208]	; (8000948 <MX_GPIO_Init+0x240>)
 8000876:	f001 fbeb 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 800087a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088c:	4619      	mov	r1, r3
 800088e:	482f      	ldr	r0, [pc, #188]	; (800094c <MX_GPIO_Init+0x244>)
 8000890:	f001 fbde 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	4619      	mov	r1, r3
 80008ac:	4827      	ldr	r0, [pc, #156]	; (800094c <MX_GPIO_Init+0x244>)
 80008ae:	f001 fbcf 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA15 */
  GPIO_InitStruct.Pin = SW_UART_TX_Pin|FSMC_BLK_Pin|GPIO_PIN_15;
 80008b2:	f248 1310 	movw	r3, #33040	; 0x8110
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	4821      	ldr	r0, [pc, #132]	; (8000950 <MX_GPIO_Init+0x248>)
 80008cc:	f001 fbc0 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_UART_RX_Pin|INPUT_X0_Pin|INPUT_X1_Pin;
 80008d0:	23e0      	movs	r3, #224	; 0xe0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	4619      	mov	r1, r3
 80008e2:	481b      	ldr	r0, [pc, #108]	; (8000950 <MX_GPIO_Init+0x248>)
 80008e4:	f001 fbb4 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80008e8:	2330      	movs	r3, #48	; 0x30
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	4813      	ldr	r0, [pc, #76]	; (8000948 <MX_GPIO_Init+0x240>)
 80008fc:	f001 fba8 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000900:	2340      	movs	r3, #64	; 0x40
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000914:	4619      	mov	r1, r3
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <MX_GPIO_Init+0x24c>)
 8000918:	f001 fb9a 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800091c:	2308      	movs	r3, #8
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	4809      	ldr	r0, [pc, #36]	; (8000958 <MX_GPIO_Init+0x250>)
 8000934:	f001 fb8c 	bl	8002050 <HAL_GPIO_Init>

}
 8000938:	bf00      	nop
 800093a:	3738      	adds	r7, #56	; 0x38
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	40021000 	.word	0x40021000
 8000948:	40020800 	.word	0x40020800
 800094c:	40021400 	.word	0x40021400
 8000950:	40020000 	.word	0x40020000
 8000954:	40021800 	.word	0x40021800
 8000958:	40020c00 	.word	0x40020c00

0800095c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000966:	4a04      	ldr	r2, [pc, #16]	; (8000978 <LCD_WR_REG+0x1c>)
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	8013      	strh	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	600ffffe 	.word	0x600ffffe

0800097c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000986:	4a04      	ldr	r2, [pc, #16]	; (8000998 <LCD_WR_DATA+0x1c>)
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	8053      	strh	r3, [r2, #2]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	600ffffe 	.word	0x600ffffe

0800099c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <LCD_RD_DATA+0x20>)
 80009a4:	885b      	ldrh	r3, [r3, #2]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	80fb      	strh	r3, [r7, #6]
	return ram;
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	b29b      	uxth	r3, r3
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	600ffffe 	.word	0x600ffffe

080009c0 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4604      	mov	r4, r0
 80009c8:	4608      	mov	r0, r1
 80009ca:	4611      	mov	r1, r2
 80009cc:	461a      	mov	r2, r3
 80009ce:	4623      	mov	r3, r4
 80009d0:	80fb      	strh	r3, [r7, #6]
 80009d2:	4603      	mov	r3, r0
 80009d4:	80bb      	strh	r3, [r7, #4]
 80009d6:	460b      	mov	r3, r1
 80009d8:	807b      	strh	r3, [r7, #2]
 80009da:	4613      	mov	r3, r2
 80009dc:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80009de:	202a      	movs	r0, #42	; 0x2a
 80009e0:	f7ff ffbc 	bl	800095c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ffc6 	bl	800097c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffc0 	bl	800097c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	0a1b      	lsrs	r3, r3, #8
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ffba 	bl	800097c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000a08:	887b      	ldrh	r3, [r7, #2]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ffb4 	bl	800097c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000a14:	202b      	movs	r0, #43	; 0x2b
 8000a16:	f7ff ffa1 	bl	800095c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ffab 	bl	800097c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000a26:	88bb      	ldrh	r3, [r7, #4]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffa5 	bl	800097c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000a32:	883b      	ldrh	r3, [r7, #0]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff9f 	bl	800097c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000a3e:	883b      	ldrh	r3, [r7, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff99 	bl	800097c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000a4a:	202c      	movs	r0, #44	; 0x2c
 8000a4c:	f7ff ff86 	bl	800095c <LCD_WR_REG>
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd90      	pop	{r4, r7, pc}

08000a58 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <lcd_Clear+0x60>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <lcd_Clear+0x60>)
 8000a6c:	885b      	ldrh	r3, [r3, #2]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff ffa3 	bl	80009c0 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	81fb      	strh	r3, [r7, #14]
 8000a7e:	e011      	b.n	8000aa4 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	81bb      	strh	r3, [r7, #12]
 8000a84:	e006      	b.n	8000a94 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff77 	bl	800097c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000a8e:	89bb      	ldrh	r3, [r7, #12]
 8000a90:	3301      	adds	r3, #1
 8000a92:	81bb      	strh	r3, [r7, #12]
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <lcd_Clear+0x60>)
 8000a96:	885b      	ldrh	r3, [r3, #2]
 8000a98:	89ba      	ldrh	r2, [r7, #12]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3f3      	bcc.n	8000a86 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	81fb      	strh	r3, [r7, #14]
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <lcd_Clear+0x60>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	89fa      	ldrh	r2, [r7, #14]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d3e8      	bcc.n	8000a80 <lcd_Clear+0x28>
		}
	}
}
 8000aae:	bf00      	nop
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200000ec 	.word	0x200000ec

08000abc <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4623      	mov	r3, r4
 8000acc:	80fb      	strh	r3, [r7, #6]
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80bb      	strh	r3, [r7, #4]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	807b      	strh	r3, [r7, #2]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000ada:	887b      	ldrh	r3, [r7, #2]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	883b      	ldrh	r3, [r7, #0]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	88b9      	ldrh	r1, [r7, #4]
 8000ae8:	88f8      	ldrh	r0, [r7, #6]
 8000aea:	f7ff ff69 	bl	80009c0 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	81fb      	strh	r3, [r7, #14]
 8000af2:	e010      	b.n	8000b16 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	81bb      	strh	r3, [r7, #12]
 8000af8:	e006      	b.n	8000b08 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000afa:	8c3b      	ldrh	r3, [r7, #32]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff3d 	bl	800097c <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000b02:	89bb      	ldrh	r3, [r7, #12]
 8000b04:	3301      	adds	r3, #1
 8000b06:	81bb      	strh	r3, [r7, #12]
 8000b08:	89ba      	ldrh	r2, [r7, #12]
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d3f4      	bcc.n	8000afa <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000b10:	89fb      	ldrh	r3, [r7, #14]
 8000b12:	3301      	adds	r3, #1
 8000b14:	81fb      	strh	r3, [r7, #14]
 8000b16:	89fa      	ldrh	r2, [r7, #14]
 8000b18:	883b      	ldrh	r3, [r7, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d3ea      	bcc.n	8000af4 <lcd_Fill+0x38>
		}
	}
}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}

08000b28 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
 8000b32:	460b      	mov	r3, r1
 8000b34:	80bb      	strh	r3, [r7, #4]
 8000b36:	4613      	mov	r3, r2
 8000b38:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000b3a:	88bb      	ldrh	r3, [r7, #4]
 8000b3c:	88fa      	ldrh	r2, [r7, #6]
 8000b3e:	88b9      	ldrh	r1, [r7, #4]
 8000b40:	88f8      	ldrh	r0, [r7, #6]
 8000b42:	f7ff ff3d 	bl	80009c0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff17 	bl	800097c <LCD_WR_DATA>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4608      	mov	r0, r1
 8000b62:	4611      	mov	r1, r2
 8000b64:	461a      	mov	r2, r3
 8000b66:	4623      	mov	r3, r4
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	70fb      	strb	r3, [r7, #3]
 8000b72:	4613      	mov	r3, r2
 8000b74:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000b7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b82:	085b      	lsrs	r3, r3, #1
 8000b84:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	f003 0307 	and.w	r3, r3, #7
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bf14      	ite	ne
 8000b9a:	2301      	movne	r3, #1
 8000b9c:	2300      	moveq	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	fb12 f303 	smulbb	r3, r2, r3
 8000bae:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	3b20      	subs	r3, #32
 8000bb4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	b29c      	uxth	r4, r3
 8000bc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	88bb      	ldrh	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	88b9      	ldrh	r1, [r7, #4]
 8000bd6:	88f8      	ldrh	r0, [r7, #6]
 8000bd8:	4622      	mov	r2, r4
 8000bda:	f7ff fef1 	bl	80009c0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	827b      	strh	r3, [r7, #18]
 8000be2:	e07a      	b.n	8000cda <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000be4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000be8:	2b0c      	cmp	r3, #12
 8000bea:	d028      	beq.n	8000c3e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000bec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bf0:	2b10      	cmp	r3, #16
 8000bf2:	d108      	bne.n	8000c06 <lcd_ShowChar+0xae>
 8000bf4:	78fa      	ldrb	r2, [r7, #3]
 8000bf6:	8a7b      	ldrh	r3, [r7, #18]
 8000bf8:	493c      	ldr	r1, [pc, #240]	; (8000cec <lcd_ShowChar+0x194>)
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	440a      	add	r2, r1
 8000bfe:	4413      	add	r3, r2
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	75fb      	strb	r3, [r7, #23]
 8000c04:	e01b      	b.n	8000c3e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000c06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c0a:	2b18      	cmp	r3, #24
 8000c0c:	d10b      	bne.n	8000c26 <lcd_ShowChar+0xce>
 8000c0e:	78fa      	ldrb	r2, [r7, #3]
 8000c10:	8a79      	ldrh	r1, [r7, #18]
 8000c12:	4837      	ldr	r0, [pc, #220]	; (8000cf0 <lcd_ShowChar+0x198>)
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	011b      	lsls	r3, r3, #4
 8000c1c:	4403      	add	r3, r0
 8000c1e:	440b      	add	r3, r1
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	75fb      	strb	r3, [r7, #23]
 8000c24:	e00b      	b.n	8000c3e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000c26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c2a:	2b20      	cmp	r3, #32
 8000c2c:	d15a      	bne.n	8000ce4 <lcd_ShowChar+0x18c>
 8000c2e:	78fa      	ldrb	r2, [r7, #3]
 8000c30:	8a7b      	ldrh	r3, [r7, #18]
 8000c32:	4930      	ldr	r1, [pc, #192]	; (8000cf4 <lcd_ShowChar+0x19c>)
 8000c34:	0192      	lsls	r2, r2, #6
 8000c36:	440a      	add	r2, r1
 8000c38:	4413      	add	r3, r2
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	75bb      	strb	r3, [r7, #22]
 8000c42:	e044      	b.n	8000cce <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000c44:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d120      	bne.n	8000c8e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000c4c:	7dfa      	ldrb	r2, [r7, #23]
 8000c4e:	7dbb      	ldrb	r3, [r7, #22]
 8000c50:	fa42 f303 	asr.w	r3, r2, r3
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d004      	beq.n	8000c66 <lcd_ShowChar+0x10e>
 8000c5c:	883b      	ldrh	r3, [r7, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fe8c 	bl	800097c <LCD_WR_DATA>
 8000c64:	e003      	b.n	8000c6e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000c66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fe87 	bl	800097c <LCD_WR_DATA>
				m++;
 8000c6e:	7d7b      	ldrb	r3, [r7, #21]
 8000c70:	3301      	adds	r3, #1
 8000c72:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000c74:	7d7b      	ldrb	r3, [r7, #21]
 8000c76:	7bfa      	ldrb	r2, [r7, #15]
 8000c78:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c7c:	fb02 f201 	mul.w	r2, r2, r1
 8000c80:	1a9b      	subs	r3, r3, r2
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d11f      	bne.n	8000cc8 <lcd_ShowChar+0x170>
				{
					m=0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	757b      	strb	r3, [r7, #21]
					break;
 8000c8c:	e022      	b.n	8000cd4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000c8e:	7dfa      	ldrb	r2, [r7, #23]
 8000c90:	7dbb      	ldrb	r3, [r7, #22]
 8000c92:	fa42 f303 	asr.w	r3, r2, r3
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d005      	beq.n	8000caa <lcd_ShowChar+0x152>
 8000c9e:	883a      	ldrh	r2, [r7, #0]
 8000ca0:	88b9      	ldrh	r1, [r7, #4]
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff3f 	bl	8000b28 <lcd_DrawPoint>
				x++;
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	3301      	adds	r3, #1
 8000cae:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000cb0:	88fa      	ldrh	r2, [r7, #6]
 8000cb2:	8a3b      	ldrh	r3, [r7, #16]
 8000cb4:	1ad2      	subs	r2, r2, r3
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d105      	bne.n	8000cc8 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000cbc:	8a3b      	ldrh	r3, [r7, #16]
 8000cbe:	80fb      	strh	r3, [r7, #6]
					y++;
 8000cc0:	88bb      	ldrh	r3, [r7, #4]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	80bb      	strh	r3, [r7, #4]
					break;
 8000cc6:	e005      	b.n	8000cd4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000cc8:	7dbb      	ldrb	r3, [r7, #22]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	75bb      	strb	r3, [r7, #22]
 8000cce:	7dbb      	ldrb	r3, [r7, #22]
 8000cd0:	2b07      	cmp	r3, #7
 8000cd2:	d9b7      	bls.n	8000c44 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000cd4:	8a7b      	ldrh	r3, [r7, #18]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	827b      	strh	r3, [r7, #18]
 8000cda:	8a7a      	ldrh	r2, [r7, #18]
 8000cdc:	89bb      	ldrh	r3, [r7, #12]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d380      	bcc.n	8000be4 <lcd_ShowChar+0x8c>
 8000ce2:	e000      	b.n	8000ce6 <lcd_ShowChar+0x18e>
		else return;
 8000ce4:	bf00      	nop
				}
			}
		}
	}
}
 8000ce6:	371c      	adds	r7, #28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd90      	pop	{r4, r7, pc}
 8000cec:	0800565c 	.word	0x0800565c
 8000cf0:	08005c4c 	.word	0x08005c4c
 8000cf4:	08006e1c 	.word	0x08006e1c

08000cf8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	460a      	mov	r2, r1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000d0c:	e004      	b.n	8000d18 <mypow+0x20>
 8000d0e:	79fa      	ldrb	r2, [r7, #7]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	fb02 f303 	mul.w	r3, r2, r3
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	1e5a      	subs	r2, r3, #1
 8000d1c:	71ba      	strb	r2, [r7, #6]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f5      	bne.n	8000d0e <mypow+0x16>
	return result;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af04      	add	r7, sp, #16
 8000d36:	4604      	mov	r4, r0
 8000d38:	4608      	mov	r0, r1
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4623      	mov	r3, r4
 8000d40:	80fb      	strh	r3, [r7, #6]
 8000d42:	4603      	mov	r3, r0
 8000d44:	80bb      	strh	r3, [r7, #4]
 8000d46:	460b      	mov	r3, r1
 8000d48:	807b      	strh	r3, [r7, #2]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000d52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d56:	085b      	lsrs	r3, r3, #1
 8000d58:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e059      	b.n	8000e14 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000d60:	887c      	ldrh	r4, [r7, #2]
 8000d62:	787a      	ldrb	r2, [r7, #1]
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4619      	mov	r1, r3
 8000d70:	200a      	movs	r0, #10
 8000d72:	f7ff ffc1 	bl	8000cf8 <mypow>
 8000d76:	4603      	mov	r3, r0
 8000d78:	fbb4 f1f3 	udiv	r1, r4, r3
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <lcd_ShowIntNum+0xf8>)
 8000d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	1aca      	subs	r2, r1, r3
 8000d8e:	4613      	mov	r3, r2
 8000d90:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d121      	bne.n	8000ddc <lcd_ShowIntNum+0xac>
 8000d98:	7bfa      	ldrb	r2, [r7, #15]
 8000d9a:	787b      	ldrb	r3, [r7, #1]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	da1c      	bge.n	8000ddc <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000da2:	7b3b      	ldrb	r3, [r7, #12]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d117      	bne.n	8000dd8 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	7b7b      	ldrb	r3, [r7, #13]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	fb12 f303 	smulbb	r3, r2, r3
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4413      	add	r3, r2
 8000dba:	b298      	uxth	r0, r3
 8000dbc:	8c3a      	ldrh	r2, [r7, #32]
 8000dbe:	88b9      	ldrh	r1, [r7, #4]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	f7ff fec1 	bl	8000b58 <lcd_ShowChar>
				continue;
 8000dd6:	e01a      	b.n	8000e0e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	fb12 f303 	smulbb	r3, r2, r3
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	4413      	add	r3, r2
 8000dee:	b298      	uxth	r0, r3
 8000df0:	7b3b      	ldrb	r3, [r7, #12]
 8000df2:	3330      	adds	r3, #48	; 0x30
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	8c3c      	ldrh	r4, [r7, #32]
 8000df8:	88b9      	ldrh	r1, [r7, #4]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9302      	str	r3, [sp, #8]
 8000dfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	4623      	mov	r3, r4
 8000e0a:	f7ff fea5 	bl	8000b58 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	3301      	adds	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	7bfa      	ldrb	r2, [r7, #15]
 8000e16:	787b      	ldrb	r3, [r7, #1]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3a1      	bcc.n	8000d60 <lcd_ShowIntNum+0x30>
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd90      	pop	{r4, r7, pc}
 8000e26:	bf00      	nop
 8000e28:	cccccccd 	.word	0xcccccccd

08000e2c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	091b      	lsrs	r3, r3, #4
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <lcd_SetDir+0x44>)
 8000e48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e4c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <lcd_SetDir+0x44>)
 8000e50:	22f0      	movs	r2, #240	; 0xf0
 8000e52:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000e54:	e006      	b.n	8000e64 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <lcd_SetDir+0x44>)
 8000e58:	22f0      	movs	r2, #240	; 0xf0
 8000e5a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <lcd_SetDir+0x44>)
 8000e5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e62:	805a      	strh	r2, [r3, #2]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	200000ec 	.word	0x200000ec

08000e74 <lcd_init>:


void lcd_init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e7e:	48aa      	ldr	r0, [pc, #680]	; (8001128 <lcd_init+0x2b4>)
 8000e80:	f001 fa9a 	bl	80023b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e88:	f000 ff1a 	bl	8001cc0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e92:	48a5      	ldr	r0, [pc, #660]	; (8001128 <lcd_init+0x2b4>)
 8000e94:	f001 fa90 	bl	80023b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e9c:	f000 ff10 	bl	8001cc0 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f7ff ffc3 	bl	8000e2c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000ea6:	20d3      	movs	r0, #211	; 0xd3
 8000ea8:	f7ff fd58 	bl	800095c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000eac:	f7ff fd76 	bl	800099c <LCD_RD_DATA>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b9d      	ldr	r3, [pc, #628]	; (800112c <lcd_init+0x2b8>)
 8000eb6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000eb8:	f7ff fd70 	bl	800099c <LCD_RD_DATA>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b9a      	ldr	r3, [pc, #616]	; (800112c <lcd_init+0x2b8>)
 8000ec2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000ec4:	f7ff fd6a 	bl	800099c <LCD_RD_DATA>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b97      	ldr	r3, [pc, #604]	; (800112c <lcd_init+0x2b8>)
 8000ece:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000ed0:	4b96      	ldr	r3, [pc, #600]	; (800112c <lcd_init+0x2b8>)
 8000ed2:	889b      	ldrh	r3, [r3, #4]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	4b94      	ldr	r3, [pc, #592]	; (800112c <lcd_init+0x2b8>)
 8000eda:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000edc:	f7ff fd5e 	bl	800099c <LCD_RD_DATA>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b91      	ldr	r3, [pc, #580]	; (800112c <lcd_init+0x2b8>)
 8000ee6:	889b      	ldrh	r3, [r3, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4b8f      	ldr	r3, [pc, #572]	; (800112c <lcd_init+0x2b8>)
 8000eee:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000ef0:	20cf      	movs	r0, #207	; 0xcf
 8000ef2:	f7ff fd33 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff fd40 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000efc:	20c1      	movs	r0, #193	; 0xc1
 8000efe:	f7ff fd3d 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000f02:	2030      	movs	r0, #48	; 0x30
 8000f04:	f7ff fd3a 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000f08:	20ed      	movs	r0, #237	; 0xed
 8000f0a:	f7ff fd27 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000f0e:	2064      	movs	r0, #100	; 0x64
 8000f10:	f7ff fd34 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f7ff fd31 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000f1a:	2012      	movs	r0, #18
 8000f1c:	f7ff fd2e 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000f20:	2081      	movs	r0, #129	; 0x81
 8000f22:	f7ff fd2b 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000f26:	20e8      	movs	r0, #232	; 0xe8
 8000f28:	f7ff fd18 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000f2c:	2085      	movs	r0, #133	; 0x85
 8000f2e:	f7ff fd25 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000f32:	2010      	movs	r0, #16
 8000f34:	f7ff fd22 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000f38:	207a      	movs	r0, #122	; 0x7a
 8000f3a:	f7ff fd1f 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000f3e:	20cb      	movs	r0, #203	; 0xcb
 8000f40:	f7ff fd0c 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000f44:	2039      	movs	r0, #57	; 0x39
 8000f46:	f7ff fd19 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000f4a:	202c      	movs	r0, #44	; 0x2c
 8000f4c:	f7ff fd16 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff fd13 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000f56:	2034      	movs	r0, #52	; 0x34
 8000f58:	f7ff fd10 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f7ff fd0d 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000f62:	20f7      	movs	r0, #247	; 0xf7
 8000f64:	f7ff fcfa 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000f68:	2020      	movs	r0, #32
 8000f6a:	f7ff fd07 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000f6e:	20ea      	movs	r0, #234	; 0xea
 8000f70:	f7ff fcf4 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fd01 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff fcfe 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000f80:	20c0      	movs	r0, #192	; 0xc0
 8000f82:	f7ff fceb 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000f86:	201b      	movs	r0, #27
 8000f88:	f7ff fcf8 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000f8c:	20c1      	movs	r0, #193	; 0xc1
 8000f8e:	f7ff fce5 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000f92:	2001      	movs	r0, #1
 8000f94:	f7ff fcf2 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000f98:	20c5      	movs	r0, #197	; 0xc5
 8000f9a:	f7ff fcdf 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000f9e:	2030      	movs	r0, #48	; 0x30
 8000fa0:	f7ff fcec 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000fa4:	2030      	movs	r0, #48	; 0x30
 8000fa6:	f7ff fce9 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000faa:	20c7      	movs	r0, #199	; 0xc7
 8000fac:	f7ff fcd6 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000fb0:	20b7      	movs	r0, #183	; 0xb7
 8000fb2:	f7ff fce3 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000fb6:	2036      	movs	r0, #54	; 0x36
 8000fb8:	f7ff fcd0 	bl	800095c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8000fbc:	2008      	movs	r0, #8
 8000fbe:	f7ff fcdd 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000fc2:	203a      	movs	r0, #58	; 0x3a
 8000fc4:	f7ff fcca 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000fc8:	2055      	movs	r0, #85	; 0x55
 8000fca:	f7ff fcd7 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000fce:	20b1      	movs	r0, #177	; 0xb1
 8000fd0:	f7ff fcc4 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fcd1 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000fda:	201a      	movs	r0, #26
 8000fdc:	f7ff fcce 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000fe0:	20b6      	movs	r0, #182	; 0xb6
 8000fe2:	f7ff fcbb 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f7ff fcc8 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000fec:	20a2      	movs	r0, #162	; 0xa2
 8000fee:	f7ff fcc5 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000ff2:	20f2      	movs	r0, #242	; 0xf2
 8000ff4:	f7ff fcb2 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff fcbf 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000ffe:	2026      	movs	r0, #38	; 0x26
 8001000:	f7ff fcac 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001004:	2001      	movs	r0, #1
 8001006:	f7ff fcb9 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800100a:	20e0      	movs	r0, #224	; 0xe0
 800100c:	f7ff fca6 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001010:	200f      	movs	r0, #15
 8001012:	f7ff fcb3 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001016:	202a      	movs	r0, #42	; 0x2a
 8001018:	f7ff fcb0 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800101c:	2028      	movs	r0, #40	; 0x28
 800101e:	f7ff fcad 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001022:	2008      	movs	r0, #8
 8001024:	f7ff fcaa 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001028:	200e      	movs	r0, #14
 800102a:	f7ff fca7 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800102e:	2008      	movs	r0, #8
 8001030:	f7ff fca4 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001034:	2054      	movs	r0, #84	; 0x54
 8001036:	f7ff fca1 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800103a:	20a9      	movs	r0, #169	; 0xa9
 800103c:	f7ff fc9e 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001040:	2043      	movs	r0, #67	; 0x43
 8001042:	f7ff fc9b 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001046:	200a      	movs	r0, #10
 8001048:	f7ff fc98 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800104c:	200f      	movs	r0, #15
 800104e:	f7ff fc95 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff fc92 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fc8f 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fc8c 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff fc89 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800106a:	20e1      	movs	r0, #225	; 0xe1
 800106c:	f7ff fc76 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc83 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001076:	2015      	movs	r0, #21
 8001078:	f7ff fc80 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800107c:	2017      	movs	r0, #23
 800107e:	f7ff fc7d 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001082:	2007      	movs	r0, #7
 8001084:	f7ff fc7a 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001088:	2011      	movs	r0, #17
 800108a:	f7ff fc77 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800108e:	2006      	movs	r0, #6
 8001090:	f7ff fc74 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001094:	202b      	movs	r0, #43	; 0x2b
 8001096:	f7ff fc71 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800109a:	2056      	movs	r0, #86	; 0x56
 800109c:	f7ff fc6e 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80010a0:	203c      	movs	r0, #60	; 0x3c
 80010a2:	f7ff fc6b 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80010a6:	2005      	movs	r0, #5
 80010a8:	f7ff fc68 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80010ac:	2010      	movs	r0, #16
 80010ae:	f7ff fc65 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80010b2:	200f      	movs	r0, #15
 80010b4:	f7ff fc62 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80010b8:	203f      	movs	r0, #63	; 0x3f
 80010ba:	f7ff fc5f 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80010be:	203f      	movs	r0, #63	; 0x3f
 80010c0:	f7ff fc5c 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80010c4:	200f      	movs	r0, #15
 80010c6:	f7ff fc59 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80010ca:	202b      	movs	r0, #43	; 0x2b
 80010cc:	f7ff fc46 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fc53 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fc50 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff fc4d 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80010e2:	203f      	movs	r0, #63	; 0x3f
 80010e4:	f7ff fc4a 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80010e8:	202a      	movs	r0, #42	; 0x2a
 80010ea:	f7ff fc37 	bl	800095c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff fc44 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff fc41 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff fc3e 	bl	800097c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001100:	20ef      	movs	r0, #239	; 0xef
 8001102:	f7ff fc3b 	bl	800097c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001106:	2011      	movs	r0, #17
 8001108:	f7ff fc28 	bl	800095c <LCD_WR_REG>
	HAL_Delay(120);
 800110c:	2078      	movs	r0, #120	; 0x78
 800110e:	f000 fdd7 	bl	8001cc0 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001112:	2029      	movs	r0, #41	; 0x29
 8001114:	f7ff fc22 	bl	800095c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111e:	4804      	ldr	r0, [pc, #16]	; (8001130 <lcd_init+0x2bc>)
 8001120:	f001 f94a 	bl	80023b8 <HAL_GPIO_WritePin>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40020800 	.word	0x40020800
 800112c:	200000ec 	.word	0x200000ec
 8001130:	40020000 	.word	0x40020000

08001134 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b08b      	sub	sp, #44	; 0x2c
 8001138:	af04      	add	r7, sp, #16
 800113a:	60ba      	str	r2, [r7, #8]
 800113c:	461a      	mov	r2, r3
 800113e:	4603      	mov	r3, r0
 8001140:	81fb      	strh	r3, [r7, #14]
 8001142:	460b      	mov	r3, r1
 8001144:	81bb      	strh	r3, [r7, #12]
 8001146:	4613      	mov	r3, r2
 8001148:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800114a:	89fb      	ldrh	r3, [r7, #14]
 800114c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001152:	e048      	b.n	80011e6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d145      	bne.n	80011e6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800115a:	89fa      	ldrh	r2, [r7, #14]
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <lcd_ShowStr+0xc4>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001166:	085b      	lsrs	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	1acb      	subs	r3, r1, r3
 800116c:	429a      	cmp	r2, r3
 800116e:	dc3f      	bgt.n	80011f0 <lcd_ShowStr+0xbc>
 8001170:	89ba      	ldrh	r2, [r7, #12]
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <lcd_ShowStr+0xc4>)
 8001174:	885b      	ldrh	r3, [r3, #2]
 8001176:	4619      	mov	r1, r3
 8001178:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800117c:	1acb      	subs	r3, r1, r3
 800117e:	429a      	cmp	r2, r3
 8001180:	dc36      	bgt.n	80011f0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b80      	cmp	r3, #128	; 0x80
 8001188:	d902      	bls.n	8001190 <lcd_ShowStr+0x5c>
 800118a:	2301      	movs	r3, #1
 800118c:	75fb      	strb	r3, [r7, #23]
 800118e:	e02a      	b.n	80011e6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b0d      	cmp	r3, #13
 8001196:	d10b      	bne.n	80011b0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001198:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800119c:	b29a      	uxth	r2, r3
 800119e:	89bb      	ldrh	r3, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80011a4:	8abb      	ldrh	r3, [r7, #20]
 80011a6:	81fb      	strh	r3, [r7, #14]
					str++;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	3301      	adds	r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	e017      	b.n	80011e0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	781a      	ldrb	r2, [r3, #0]
 80011b4:	88fc      	ldrh	r4, [r7, #6]
 80011b6:	89b9      	ldrh	r1, [r7, #12]
 80011b8:	89f8      	ldrh	r0, [r7, #14]
 80011ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011be:	9302      	str	r3, [sp, #8]
 80011c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	4623      	mov	r3, r4
 80011cc:	f7ff fcc4 	bl	8000b58 <lcd_ShowChar>
					x+=sizey/2;
 80011d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011d4:	085b      	lsrs	r3, r3, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	b29a      	uxth	r2, r3
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	4413      	add	r3, r2
 80011de:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1b2      	bne.n	8001154 <lcd_ShowStr+0x20>
 80011ee:	e000      	b.n	80011f2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80011f0:	bf00      	nop
			}
		}
	}
}
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd90      	pop	{r4, r7, pc}
 80011f8:	200000ec 	.word	0x200000ec

080011fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b096      	sub	sp, #88	; 0x58
 8001200:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001202:	f000 fceb 	bl	8001bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001206:	f000 f8f7 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120a:	f7ff fa7d 	bl	8000708 <MX_GPIO_Init>
  MX_TIM2_Init();
 800120e:	f000 fb67 	bl	80018e0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001212:	f000 f9c1 	bl	8001598 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001216:	f7ff f9a7 	bl	8000568 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 800121a:	f000 fbfd 	bl	8001a18 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800121e:	f000 fbd1 	bl	80019c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  soft_uart_init(); // <<<--- 3. KHỞI TẠO UART MÔ PHỎNG
 8001222:	f000 f971 	bl	8001508 <soft_uart_init>
  // ================= THÊM VÀO �?ÂY =================
  uint8_t cmd, len;
  uint8_t data_buffer[MAX_DATA_LEN];
  uint8_t checksum_received, checksum_calculated;

  lcd_init(); // Khởi tạo LCD
 8001226:	f7ff fe25 	bl	8000e74 <lcd_init>
  lcd_Clear(BLACK); // Xóa màn hình lúc bắt đầu
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fc14 	bl	8000a58 <lcd_Clear>
  lcd_ShowStr(20, 100, "Slave is listening...", YELLOW, BLACK, 24, 0);
 8001230:	2300      	movs	r3, #0
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	2318      	movs	r3, #24
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	2300      	movs	r3, #0
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001240:	4a66      	ldr	r2, [pc, #408]	; (80013dc <main+0x1e0>)
 8001242:	2164      	movs	r1, #100	; 0x64
 8001244:	2014      	movs	r0, #20
 8001246:	f7ff ff75 	bl	8001134 <lcd_ShowStr>
    /* USER CODE BEGIN 3 */
      // <<<--- 4. �?ẶT TOÀN BỘ LOGIC NHẬN VÀ XỬ L�? DỮ LIỆU Ở �?ÂY

      // 1. Ch�? Start Byte

      if (soft_uart_receive_byte() == START_BYTE) {
 800124a:	f000 f96d 	bl	8001528 <soft_uart_receive_byte>
 800124e:	4603      	mov	r3, r0
 8001250:	2baa      	cmp	r3, #170	; 0xaa
 8001252:	d1fa      	bne.n	800124a <main+0x4e>
    	  //lcd_ShowStr(10, 200, "TEST", GREEN, BLACK, 24, 0);
          // 2. Nhận phần còn lại của gói tin
          cmd = soft_uart_receive_byte();
 8001254:	f000 f968 	bl	8001528 <soft_uart_receive_byte>
 8001258:	4603      	mov	r3, r0
 800125a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          len = soft_uart_receive_byte();
 800125e:	f000 f963 	bl	8001528 <soft_uart_receive_byte>
 8001262:	4603      	mov	r3, r0
 8001264:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

          if (len > MAX_DATA_LEN) continue; // Tránh tràn bộ đệm
 8001268:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800126c:	2b32      	cmp	r3, #50	; 0x32
 800126e:	f200 80b3 	bhi.w	80013d8 <main+0x1dc>

          for (int i = 0; i < len; i++) {
 8001272:	2300      	movs	r3, #0
 8001274:	643b      	str	r3, [r7, #64]	; 0x40
 8001276:	e00b      	b.n	8001290 <main+0x94>
              data_buffer[i] = soft_uart_receive_byte();
 8001278:	f000 f956 	bl	8001528 <soft_uart_receive_byte>
 800127c:	4603      	mov	r3, r0
 800127e:	4619      	mov	r1, r3
 8001280:	1d3a      	adds	r2, r7, #4
 8001282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001284:	4413      	add	r3, r2
 8001286:	460a      	mov	r2, r1
 8001288:	701a      	strb	r2, [r3, #0]
          for (int i = 0; i < len; i++) {
 800128a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800128c:	3301      	adds	r3, #1
 800128e:	643b      	str	r3, [r7, #64]	; 0x40
 8001290:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001296:	429a      	cmp	r2, r3
 8001298:	dbee      	blt.n	8001278 <main+0x7c>
          }
          checksum_received = soft_uart_receive_byte();
 800129a:	f000 f945 	bl	8001528 <soft_uart_receive_byte>
 800129e:	4603      	mov	r3, r0
 80012a0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

          // 3. Tính toán lại checksum
          checksum_calculated = cmd + len;
 80012a4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80012a8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80012ac:	4413      	add	r3, r2
 80012ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          for (int i = 0; i < len; i++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012b6:	e00b      	b.n	80012d0 <main+0xd4>
              checksum_calculated += data_buffer[i];
 80012b8:	1d3a      	adds	r2, r7, #4
 80012ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012bc:	4413      	add	r3, r2
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80012c4:	4413      	add	r3, r2
 80012c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          for (int i = 0; i < len; i++) {
 80012ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012cc:	3301      	adds	r3, #1
 80012ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012d0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80012d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012d6:	429a      	cmp	r2, r3
 80012d8:	dbee      	blt.n	80012b8 <main+0xbc>
          }

          // 4. Xác thực và thực thi
          lcd_ShowIntNum(10, 170, checksum_calculated, 3, YELLOW, BLUE, 24);
 80012da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80012de:	b29a      	uxth	r2, r3
 80012e0:	2318      	movs	r3, #24
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	231f      	movs	r3, #31
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2303      	movs	r3, #3
 80012f0:	21aa      	movs	r1, #170	; 0xaa
 80012f2:	200a      	movs	r0, #10
 80012f4:	f7ff fd1c 	bl	8000d30 <lcd_ShowIntNum>
          lcd_ShowIntNum(80, 170, checksum_received, 3, YELLOW, BLUE, 24);
 80012f8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	2318      	movs	r3, #24
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	231f      	movs	r3, #31
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2303      	movs	r3, #3
 800130e:	21aa      	movs	r1, #170	; 0xaa
 8001310:	2050      	movs	r0, #80	; 0x50
 8001312:	f7ff fd0d 	bl	8000d30 <lcd_ShowIntNum>
          if (checksum_calculated == checksum_received) {
 8001316:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800131a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800131e:	429a      	cmp	r2, r3
 8001320:	d140      	bne.n	80013a4 <main+0x1a8>
        	  lcd_ShowStr(10, 240, "TEST", BLUE, BLACK, 24, 0);
 8001322:	2300      	movs	r3, #0
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	2318      	movs	r3, #24
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	2300      	movs	r3, #0
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	231f      	movs	r3, #31
 8001330:	4a2b      	ldr	r2, [pc, #172]	; (80013e0 <main+0x1e4>)
 8001332:	21f0      	movs	r1, #240	; 0xf0
 8001334:	200a      	movs	r0, #10
 8001336:	f7ff fefd 	bl	8001134 <lcd_ShowStr>
              if (cmd == CMD_DISPLAY_TEXT) {
 800133a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800133e:	2b01      	cmp	r3, #1
 8001340:	d183      	bne.n	800124a <main+0x4e>
                  data_buffer[len] = '\0'; // Biến nó thành chuỗi hợp lệ
 8001342:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001346:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800134a:	4413      	add	r3, r2
 800134c:	2200      	movs	r2, #0
 800134e:	f803 2c44 	strb.w	r2, [r3, #-68]
                  printf("Received OK: %s\r\n", (char*)data_buffer);
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4823      	ldr	r0, [pc, #140]	; (80013e4 <main+0x1e8>)
 8001358:	f003 f976 	bl	8004648 <iprintf>
                  lcd_Fill(30, 30, lcddev.width, 70, BLACK);
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <main+0x1ec>)
 800135e:	881a      	ldrh	r2, [r3, #0]
 8001360:	2300      	movs	r3, #0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2346      	movs	r3, #70	; 0x46
 8001366:	211e      	movs	r1, #30
 8001368:	201e      	movs	r0, #30
 800136a:	f7ff fba7 	bl	8000abc <lcd_Fill>
                  lcd_ShowStr(10, 30, "Receive OK:", GREEN, BLACK, 24, 0);
 800136e:	2300      	movs	r3, #0
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2318      	movs	r3, #24
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	2300      	movs	r3, #0
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800137e:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <main+0x1f0>)
 8001380:	211e      	movs	r1, #30
 8001382:	200a      	movs	r0, #10
 8001384:	f7ff fed6 	bl	8001134 <lcd_ShowStr>
                  lcd_ShowStr(10, 55, (char*)data_buffer, YELLOW, BLACK, 24, 0);
 8001388:	1d3a      	adds	r2, r7, #4
 800138a:	2300      	movs	r3, #0
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	2318      	movs	r3, #24
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	2300      	movs	r3, #0
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800139a:	2137      	movs	r1, #55	; 0x37
 800139c:	200a      	movs	r0, #10
 800139e:	f7ff fec9 	bl	8001134 <lcd_ShowStr>
 80013a2:	e752      	b.n	800124a <main+0x4e>
              }
          } else {
              printf("Checksum Error!\r\n");
 80013a4:	4812      	ldr	r0, [pc, #72]	; (80013f0 <main+0x1f4>)
 80013a6:	f003 f9d5 	bl	8004754 <puts>
              lcd_Fill(20, 30, lcddev.width, 70, BLACK);
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <main+0x1ec>)
 80013ac:	881a      	ldrh	r2, [r3, #0]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2346      	movs	r3, #70	; 0x46
 80013b4:	211e      	movs	r1, #30
 80013b6:	2014      	movs	r0, #20
 80013b8:	f7ff fb80 	bl	8000abc <lcd_Fill>
              lcd_ShowStr(20, 50, "Checksum Error!", RED, BLACK, 24, 0);
 80013bc:	2300      	movs	r3, #0
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	2318      	movs	r3, #24
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	2300      	movs	r3, #0
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013cc:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <main+0x1f8>)
 80013ce:	2132      	movs	r1, #50	; 0x32
 80013d0:	2014      	movs	r0, #20
 80013d2:	f7ff feaf 	bl	8001134 <lcd_ShowStr>
 80013d6:	e738      	b.n	800124a <main+0x4e>
          if (len > MAX_DATA_LEN) continue; // Tránh tràn bộ đệm
 80013d8:	bf00      	nop
      if (soft_uart_receive_byte() == START_BYTE) {
 80013da:	e736      	b.n	800124a <main+0x4e>
 80013dc:	080055f8 	.word	0x080055f8
 80013e0:	08005610 	.word	0x08005610
 80013e4:	08005618 	.word	0x08005618
 80013e8:	200000ec 	.word	0x200000ec
 80013ec:	0800562c 	.word	0x0800562c
 80013f0:	08005638 	.word	0x08005638
 80013f4:	0800564c 	.word	0x0800564c

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b094      	sub	sp, #80	; 0x50
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2230      	movs	r2, #48	; 0x30
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f003 f916 	bl	8004638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <SystemClock_Config+0xc8>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	4a26      	ldr	r2, [pc, #152]	; (80014c0 <SystemClock_Config+0xc8>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	; 0x40
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <SystemClock_Config+0xc8>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <SystemClock_Config+0xcc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <SystemClock_Config+0xcc>)
 8001442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <SystemClock_Config+0xcc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001454:	2302      	movs	r3, #2
 8001456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001458:	2301      	movs	r3, #1
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145c:	2310      	movs	r3, #16
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001460:	2302      	movs	r3, #2
 8001462:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001464:	2300      	movs	r3, #0
 8001466:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001468:	2308      	movs	r3, #8
 800146a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800146c:	2340      	movs	r3, #64	; 0x40
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001470:	2302      	movs	r3, #2
 8001472:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001474:	2304      	movs	r3, #4
 8001476:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	4618      	mov	r0, r3
 800147e:	f000 ffb5 	bl	80023ec <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001488:	f000 f81e 	bl	80014c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2302      	movs	r3, #2
 8001492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001494:	23a0      	movs	r3, #160	; 0xa0
 8001496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fa17 	bl	80028dc <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014b4:	f000 f808 	bl	80014c8 <Error_Handler>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3750      	adds	r7, #80	; 0x50
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <Error_Handler+0x8>
	...

080014d4 <delay_us>:
// Thời gian trễ cho 1 bit (tính bằng micro giây)
// 1/9600 * 1,000,000 us/s ~= 104 us
#define BIT_TIME_US 104

// Hàm delay micro giây sử dụng Timer
void delay_us(uint16_t us) {
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset bộ đếm
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <delay_us+0x30>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 80014e6:	bf00      	nop
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <delay_us+0x30>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d3f9      	bcc.n	80014e8 <delay_us+0x14>
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000180 	.word	0x20000180

08001508 <soft_uart_init>:

// Khởi tạo
void soft_uart_init() {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
    // Bắt đầu timer
    HAL_TIM_Base_Start(&htim2);
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <soft_uart_init+0x18>)
 800150e:	f001 fcfd 	bl	8002f0c <HAL_TIM_Base_Start>
    // Đảm bảo chân TX ở trạng thái nghỉ (mức cao)
    HAL_GPIO_WritePin(SW_UART_TX_PORT, SW_UART_TX_PIN, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	2110      	movs	r1, #16
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <soft_uart_init+0x1c>)
 8001518:	f000 ff4e 	bl	80023b8 <HAL_GPIO_WritePin>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000180 	.word	0x20000180
 8001524:	40020000 	.word	0x40020000

08001528 <soft_uart_receive_byte>:
    HAL_GPIO_WritePin(SW_UART_TX_PORT, SW_UART_TX_PIN, GPIO_PIN_SET);
    delay_us(BIT_TIME_US);
}

// Hàm nhận 1 byte
uint8_t soft_uart_receive_byte() {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
    uint8_t received_data = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	71fb      	strb	r3, [r7, #7]
    //lcd_ShowStr(10, 150, "TEST", YELLOW, BLACK, 24, 0);
    // 1. Chờ đợi Start bit (đường truyền bị kéo xuống thấp)
    while (HAL_GPIO_ReadPin(SW_UART_RX_PORT, SW_UART_RX_PIN) == GPIO_PIN_SET);
 8001532:	bf00      	nop
 8001534:	2120      	movs	r1, #32
 8001536:	4817      	ldr	r0, [pc, #92]	; (8001594 <soft_uart_receive_byte+0x6c>)
 8001538:	f000 ff26 	bl	8002388 <HAL_GPIO_ReadPin>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	d0f8      	beq.n	8001534 <soft_uart_receive_byte+0xc>
    //lcd_ShowStr(10, 190, "TEST2", YELLOW, BLACK, 24, 0);
    // 2. Đồng bộ hóa: Khi phát hiện Start bit, chờ 1 nửa bit time
    // để dịch chuyển đến điểm giữa của bit đầu tiên.
    delay_us(BIT_TIME_US / 2);
 8001542:	2034      	movs	r0, #52	; 0x34
 8001544:	f7ff ffc6 	bl	80014d4 <delay_us>

    // 3. Đọc 8 bit dữ liệu
    for (int i = 0; i < 8; i++) {
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	e016      	b.n	800157c <soft_uart_receive_byte+0x54>
        delay_us(BIT_TIME_US); // Chờ 1 bit time để đến bit tiếp theo
 800154e:	2068      	movs	r0, #104	; 0x68
 8001550:	f7ff ffc0 	bl	80014d4 <delay_us>
        if (HAL_GPIO_ReadPin(SW_UART_RX_PORT, SW_UART_RX_PIN) == GPIO_PIN_SET) {
 8001554:	2120      	movs	r1, #32
 8001556:	480f      	ldr	r0, [pc, #60]	; (8001594 <soft_uart_receive_byte+0x6c>)
 8001558:	f000 ff16 	bl	8002388 <HAL_GPIO_ReadPin>
 800155c:	4603      	mov	r3, r0
 800155e:	2b01      	cmp	r3, #1
 8001560:	d109      	bne.n	8001576 <soft_uart_receive_byte+0x4e>
            received_data |= (1 << i);
 8001562:	2201      	movs	r2, #1
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	b25a      	sxtb	r2, r3
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	4313      	orrs	r3, r2
 8001572:	b25b      	sxtb	r3, r3
 8001574:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2b07      	cmp	r3, #7
 8001580:	dde5      	ble.n	800154e <soft_uart_receive_byte+0x26>
        }
    }

    // 4. Chờ Stop bit
    delay_us(BIT_TIME_US);
 8001582:	2068      	movs	r0, #104	; 0x68
 8001584:	f7ff ffa6 	bl	80014d4 <delay_us>

    return received_data;
 8001588:	79fb      	ldrb	r3, [r7, #7]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40020000 	.word	0x40020000

08001598 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <MX_SPI1_Init+0x64>)
 800159e:	4a18      	ldr	r2, [pc, #96]	; (8001600 <MX_SPI1_Init+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <MX_SPI1_Init+0x64>)
 80015a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_SPI1_Init+0x64>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <MX_SPI1_Init+0x64>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_SPI1_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_SPI1_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_SPI1_Init+0x64>)
 80015c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_SPI1_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <MX_SPI1_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_SPI1_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <MX_SPI1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_SPI1_Init+0x64>)
 80015e4:	220a      	movs	r2, #10
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <MX_SPI1_Init+0x64>)
 80015ea:	f001 fb73 	bl	8002cd4 <HAL_SPI_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015f4:	f7ff ff68 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000128 	.word	0x20000128
 8001600:	40013000 	.word	0x40013000

08001604 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <HAL_SPI_MspInit+0x84>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d12b      	bne.n	800167e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_SPI_MspInit+0x88>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_SPI_MspInit+0x88>)
 8001630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_SPI_MspInit+0x88>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_SPI_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a10      	ldr	r2, [pc, #64]	; (800168c <HAL_SPI_MspInit+0x88>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_SPI_MspInit+0x88>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800165e:	2338      	movs	r3, #56	; 0x38
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800166e:	2305      	movs	r3, #5
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <HAL_SPI_MspInit+0x8c>)
 800167a:	f000 fce9 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40013000 	.word	0x40013000
 800168c:	40023800 	.word	0x40023800
 8001690:	40020400 	.word	0x40020400

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_MspInit+0x4c>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_MspInit+0x4c>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <HAL_MspInit+0x4c>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_MspInit+0x4c>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <HAL_MspInit+0x4c>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_MspInit+0x4c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <NMI_Handler+0x4>

080016ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <MemManage_Handler+0x4>

080016f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <UsageFault_Handler+0x4>

08001702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001730:	f000 faa6 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <TIM2_IRQHandler+0x10>)
 800173e:	f001 fc4d 	bl	8002fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000180 	.word	0x20000180

0800174c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <USART2_IRQHandler+0x10>)
 8001752:	f002 f85d 	bl	8003810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000020c 	.word	0x2000020c

08001760 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <USART3_IRQHandler+0x10>)
 8001766:	f002 f853 	bl	8003810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200001c8 	.word	0x200001c8

08001774 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e00a      	b.n	800179c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001786:	f3af 8000 	nop.w
 800178a:	4601      	mov	r1, r0
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	b2ca      	uxtb	r2, r1
 8001794:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbf0      	blt.n	8001786 <_read+0x12>
	}

return len;
 80017a4:	687b      	ldr	r3, [r7, #4]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	e009      	b.n	80017d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60ba      	str	r2, [r7, #8]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3301      	adds	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbf1      	blt.n	80017c0 <_write+0x12>
	}
	return len;
 80017dc:	687b      	ldr	r3, [r7, #4]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_close>:

int _close(int file)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
	return -1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800180e:	605a      	str	r2, [r3, #4]
	return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_isatty>:

int _isatty(int file)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
	return 1;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f002 feb0 	bl	80045e4 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20020000 	.word	0x20020000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	20000090 	.word	0x20000090
 80018b8:	20000268 	.word	0x20000268

080018bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <SystemInit+0x20>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <SystemInit+0x20>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f4:	463b      	mov	r3, r7
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <MX_TIM2_Init+0x94>)
 80018fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001902:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <MX_TIM2_Init+0x94>)
 8001906:	2207      	movs	r2, #7
 8001908:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_TIM2_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <MX_TIM2_Init+0x94>)
 8001912:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001916:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_TIM2_Init+0x94>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_TIM2_Init+0x94>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001924:	4813      	ldr	r0, [pc, #76]	; (8001974 <MX_TIM2_Init+0x94>)
 8001926:	f001 faa2 	bl	8002e6e <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001930:	f7ff fdca 	bl	80014c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	4619      	mov	r1, r3
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <MX_TIM2_Init+0x94>)
 8001942:	f001 fc53 	bl	80031ec <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800194c:	f7ff fdbc 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001958:	463b      	mov	r3, r7
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_TIM2_Init+0x94>)
 800195e:	f001 fe79 	bl	8003654 <HAL_TIMEx_MasterConfigSynchronization>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001968:	f7ff fdae 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000180 	.word	0x20000180

08001978 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001988:	d115      	bne.n	80019b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_TIM_Base_MspInit+0x48>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_TIM_Base_MspInit+0x48>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_TIM_Base_MspInit+0x48>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	201c      	movs	r0, #28
 80019ac:	f000 fa87 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019b0:	201c      	movs	r0, #28
 80019b2:	f000 faa0 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <MX_USART2_UART_Init+0x50>)
 80019cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019ea:	220c      	movs	r2, #12
 80019ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019fc:	f001 feba 	bl	8003774 <HAL_UART_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a06:	f7ff fd5f 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000020c 	.word	0x2000020c
 8001a14:	40004400 	.word	0x40004400

08001a18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_USART3_UART_Init+0x4c>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <MX_USART3_UART_Init+0x50>)
 8001a20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <MX_USART3_UART_Init+0x4c>)
 8001a24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_USART3_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_USART3_UART_Init+0x4c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <MX_USART3_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_USART3_UART_Init+0x4c>)
 8001a3e:	220c      	movs	r2, #12
 8001a40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <MX_USART3_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_USART3_UART_Init+0x4c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_USART3_UART_Init+0x4c>)
 8001a50:	f001 fe90 	bl	8003774 <HAL_UART_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a5a:	f7ff fd35 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200001c8 	.word	0x200001c8
 8001a68:	40004800 	.word	0x40004800

08001a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	; 0x30
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a3a      	ldr	r2, [pc, #232]	; (8001b74 <HAL_UART_MspInit+0x108>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d134      	bne.n	8001af8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	4b39      	ldr	r3, [pc, #228]	; (8001b78 <HAL_UART_MspInit+0x10c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a38      	ldr	r2, [pc, #224]	; (8001b78 <HAL_UART_MspInit+0x10c>)
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_UART_MspInit+0x10c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <HAL_UART_MspInit+0x10c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a31      	ldr	r2, [pc, #196]	; (8001b78 <HAL_UART_MspInit+0x10c>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_UART_MspInit+0x10c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ac6:	230c      	movs	r3, #12
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4826      	ldr	r0, [pc, #152]	; (8001b7c <HAL_UART_MspInit+0x110>)
 8001ae2:	f000 fab5 	bl	8002050 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2026      	movs	r0, #38	; 0x26
 8001aec:	f000 f9e7 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001af0:	2026      	movs	r0, #38	; 0x26
 8001af2:	f000 fa00 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001af6:	e039      	b.n	8001b6c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <HAL_UART_MspInit+0x114>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d134      	bne.n	8001b6c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_UART_MspInit+0x10c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_UART_MspInit+0x10c>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_UART_MspInit+0x10c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_UART_MspInit+0x10c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <HAL_UART_MspInit+0x10c>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_UART_MspInit+0x10c>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	4619      	mov	r1, r3
 8001b56:	480b      	ldr	r0, [pc, #44]	; (8001b84 <HAL_UART_MspInit+0x118>)
 8001b58:	f000 fa7a 	bl	8002050 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2101      	movs	r1, #1
 8001b60:	2027      	movs	r0, #39	; 0x27
 8001b62:	f000 f9ac 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b66:	2027      	movs	r0, #39	; 0x27
 8001b68:	f000 f9c5 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
}
 8001b6c:	bf00      	nop
 8001b6e:	3730      	adds	r7, #48	; 0x30
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40004400 	.word	0x40004400
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40004800 	.word	0x40004800
 8001b84:	40020800 	.word	0x40020800

08001b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b8c:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b8e:	490e      	ldr	r1, [pc, #56]	; (8001bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b90:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b94:	e002      	b.n	8001b9c <LoopCopyDataInit>

08001b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9a:	3304      	adds	r3, #4

08001b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba0:	d3f9      	bcc.n	8001b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba2:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ba4:	4c0b      	ldr	r4, [pc, #44]	; (8001bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba8:	e001      	b.n	8001bae <LoopFillZerobss>

08001baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bac:	3204      	adds	r2, #4

08001bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb0:	d3fb      	bcc.n	8001baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bb2:	f7ff fe83 	bl	80018bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f002 fd1b 	bl	80045f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bba:	f7ff fb1f 	bl	80011fc <main>
  bx  lr    
 8001bbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bcc:	0800869c 	.word	0x0800869c
  ldr r2, =_sbss
 8001bd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bd4:	20000264 	.word	0x20000264

08001bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC_IRQHandler>
	...

08001bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <HAL_Init+0x40>)
 8001be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_Init+0x40>)
 8001bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_Init+0x40>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 f94f 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fd40 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023c00 	.word	0x40023c00

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f967 	bl	8001f12 <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 f92f 	bl	8001ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	20000250 	.word	0x20000250

08001ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_GetTick+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000250 	.word	0x20000250

08001cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff ffee 	bl	8001ca8 <HAL_GetTick>
 8001ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d005      	beq.n	8001ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_Delay+0x44>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ce6:	bf00      	nop
 8001ce8:	f7ff ffde 	bl	8001ca8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d8f7      	bhi.n	8001ce8 <HAL_Delay+0x28>
  {
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000008 	.word	0x20000008

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4907      	ldr	r1, [pc, #28]	; (8001da4 <__NVIC_EnableIRQ+0x38>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	; (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	; (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e74:	d301      	bcc.n	8001e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00f      	b.n	8001e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <SysTick_Config+0x40>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e82:	210f      	movs	r1, #15
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f7ff ff8e 	bl	8001da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SysTick_Config+0x40>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SysTick_Config+0x40>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff29 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff3e 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff8e 	bl	8001dfc <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5d 	bl	8001da8 <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff31 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffa2 	bl	8001e64 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff feb6 	bl	8001ca8 <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d008      	beq.n	8001f5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2280      	movs	r2, #128	; 0x80
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e052      	b.n	8002002 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0216 	bic.w	r2, r2, #22
 8001f6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d103      	bne.n	8001f8c <HAL_DMA_Abort+0x62>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0208 	bic.w	r2, r2, #8
 8001f9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fac:	e013      	b.n	8001fd6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fae:	f7ff fe7b 	bl	8001ca8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d90c      	bls.n	8001fd6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e015      	b.n	8002002 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1e4      	bne.n	8001fae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe8:	223f      	movs	r2, #63	; 0x3f
 8001fea:	409a      	lsls	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d004      	beq.n	8002028 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e00c      	b.n	8002042 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2205      	movs	r2, #5
 800202c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	e16b      	b.n	8002344 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	429a      	cmp	r2, r3
 8002086:	f040 815a 	bne.w	800233e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d005      	beq.n	80020a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d130      	bne.n	8002104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 0201 	and.w	r2, r3, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b03      	cmp	r3, #3
 800210e:	d017      	beq.n	8002140 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d123      	bne.n	8002194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	220f      	movs	r2, #15
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	08da      	lsrs	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	69b9      	ldr	r1, [r7, #24]
 8002190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80b4 	beq.w	800233e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b60      	ldr	r3, [pc, #384]	; (800235c <HAL_GPIO_Init+0x30c>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	4a5f      	ldr	r2, [pc, #380]	; (800235c <HAL_GPIO_Init+0x30c>)
 80021e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e4:	6453      	str	r3, [r2, #68]	; 0x44
 80021e6:	4b5d      	ldr	r3, [pc, #372]	; (800235c <HAL_GPIO_Init+0x30c>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021f2:	4a5b      	ldr	r2, [pc, #364]	; (8002360 <HAL_GPIO_Init+0x310>)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	3302      	adds	r3, #2
 80021fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	220f      	movs	r2, #15
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a52      	ldr	r2, [pc, #328]	; (8002364 <HAL_GPIO_Init+0x314>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d02b      	beq.n	8002276 <HAL_GPIO_Init+0x226>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a51      	ldr	r2, [pc, #324]	; (8002368 <HAL_GPIO_Init+0x318>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d025      	beq.n	8002272 <HAL_GPIO_Init+0x222>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a50      	ldr	r2, [pc, #320]	; (800236c <HAL_GPIO_Init+0x31c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01f      	beq.n	800226e <HAL_GPIO_Init+0x21e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4f      	ldr	r2, [pc, #316]	; (8002370 <HAL_GPIO_Init+0x320>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d019      	beq.n	800226a <HAL_GPIO_Init+0x21a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4e      	ldr	r2, [pc, #312]	; (8002374 <HAL_GPIO_Init+0x324>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_GPIO_Init+0x216>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4d      	ldr	r2, [pc, #308]	; (8002378 <HAL_GPIO_Init+0x328>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00d      	beq.n	8002262 <HAL_GPIO_Init+0x212>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4c      	ldr	r2, [pc, #304]	; (800237c <HAL_GPIO_Init+0x32c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <HAL_GPIO_Init+0x20e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <HAL_GPIO_Init+0x330>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_GPIO_Init+0x20a>
 8002256:	2307      	movs	r3, #7
 8002258:	e00e      	b.n	8002278 <HAL_GPIO_Init+0x228>
 800225a:	2308      	movs	r3, #8
 800225c:	e00c      	b.n	8002278 <HAL_GPIO_Init+0x228>
 800225e:	2306      	movs	r3, #6
 8002260:	e00a      	b.n	8002278 <HAL_GPIO_Init+0x228>
 8002262:	2305      	movs	r3, #5
 8002264:	e008      	b.n	8002278 <HAL_GPIO_Init+0x228>
 8002266:	2304      	movs	r3, #4
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x228>
 800226a:	2303      	movs	r3, #3
 800226c:	e004      	b.n	8002278 <HAL_GPIO_Init+0x228>
 800226e:	2302      	movs	r3, #2
 8002270:	e002      	b.n	8002278 <HAL_GPIO_Init+0x228>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x228>
 8002276:	2300      	movs	r3, #0
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	f002 0203 	and.w	r2, r2, #3
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4093      	lsls	r3, r2
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002288:	4935      	ldr	r1, [pc, #212]	; (8002360 <HAL_GPIO_Init+0x310>)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002296:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <HAL_GPIO_Init+0x334>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ba:	4a32      	ldr	r2, [pc, #200]	; (8002384 <HAL_GPIO_Init+0x334>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022c0:	4b30      	ldr	r3, [pc, #192]	; (8002384 <HAL_GPIO_Init+0x334>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022e4:	4a27      	ldr	r2, [pc, #156]	; (8002384 <HAL_GPIO_Init+0x334>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_GPIO_Init+0x334>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800230e:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <HAL_GPIO_Init+0x334>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_GPIO_Init+0x334>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002338:	4a12      	ldr	r2, [pc, #72]	; (8002384 <HAL_GPIO_Init+0x334>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3301      	adds	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	f67f ae90 	bls.w	800206c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3724      	adds	r7, #36	; 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	40013800 	.word	0x40013800
 8002364:	40020000 	.word	0x40020000
 8002368:	40020400 	.word	0x40020400
 800236c:	40020800 	.word	0x40020800
 8002370:	40020c00 	.word	0x40020c00
 8002374:	40021000 	.word	0x40021000
 8002378:	40021400 	.word	0x40021400
 800237c:	40021800 	.word	0x40021800
 8002380:	40021c00 	.word	0x40021c00
 8002384:	40013c00 	.word	0x40013c00

08002388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	887b      	ldrh	r3, [r7, #2]
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e001      	b.n	80023aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
 80023c4:	4613      	mov	r3, r2
 80023c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d4:	e003      	b.n	80023de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	041a      	lsls	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	619a      	str	r2, [r3, #24]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e264      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d075      	beq.n	80024f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800240a:	4ba3      	ldr	r3, [pc, #652]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b04      	cmp	r3, #4
 8002414:	d00c      	beq.n	8002430 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002416:	4ba0      	ldr	r3, [pc, #640]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800241e:	2b08      	cmp	r3, #8
 8002420:	d112      	bne.n	8002448 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002422:	4b9d      	ldr	r3, [pc, #628]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800242e:	d10b      	bne.n	8002448 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	4b99      	ldr	r3, [pc, #612]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d05b      	beq.n	80024f4 <HAL_RCC_OscConfig+0x108>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d157      	bne.n	80024f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e23f      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002450:	d106      	bne.n	8002460 <HAL_RCC_OscConfig+0x74>
 8002452:	4b91      	ldr	r3, [pc, #580]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a90      	ldr	r2, [pc, #576]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e01d      	b.n	800249c <HAL_RCC_OscConfig+0xb0>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x98>
 800246a:	4b8b      	ldr	r3, [pc, #556]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a8a      	ldr	r2, [pc, #552]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b88      	ldr	r3, [pc, #544]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a87      	ldr	r2, [pc, #540]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e00b      	b.n	800249c <HAL_RCC_OscConfig+0xb0>
 8002484:	4b84      	ldr	r3, [pc, #528]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a83      	ldr	r2, [pc, #524]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800248a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b81      	ldr	r3, [pc, #516]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a80      	ldr	r2, [pc, #512]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff fc00 	bl	8001ca8 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff fbfc 	bl	8001ca8 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e204      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b76      	ldr	r3, [pc, #472]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0xc0>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff fbec 	bl	8001ca8 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff fbe8 	bl	8001ca8 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	; 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1f0      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	4b6c      	ldr	r3, [pc, #432]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0xe8>
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d063      	beq.n	80025ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002502:	4b65      	ldr	r3, [pc, #404]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4b62      	ldr	r3, [pc, #392]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002516:	2b08      	cmp	r3, #8
 8002518:	d11c      	bne.n	8002554 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	4b5f      	ldr	r3, [pc, #380]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d116      	bne.n	8002554 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	4b5c      	ldr	r3, [pc, #368]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_RCC_OscConfig+0x152>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e1c4      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	4b56      	ldr	r3, [pc, #344]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4952      	ldr	r1, [pc, #328]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	e03a      	b.n	80025ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255c:	4b4f      	ldr	r3, [pc, #316]	; (800269c <HAL_RCC_OscConfig+0x2b0>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7ff fba1 	bl	8001ca8 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256a:	f7ff fb9d 	bl	8001ca8 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e1a5      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	4b46      	ldr	r3, [pc, #280]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b43      	ldr	r3, [pc, #268]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4940      	ldr	r1, [pc, #256]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	4b3f      	ldr	r3, [pc, #252]	; (800269c <HAL_RCC_OscConfig+0x2b0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7ff fb80 	bl	8001ca8 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ac:	f7ff fb7c 	bl	8001ca8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e184      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	4b36      	ldr	r3, [pc, #216]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d030      	beq.n	8002638 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025de:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <HAL_RCC_OscConfig+0x2b4>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7ff fb60 	bl	8001ca8 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ec:	f7ff fb5c 	bl	8001ca8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e164      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	4b26      	ldr	r3, [pc, #152]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x200>
 800260a:	e015      	b.n	8002638 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_RCC_OscConfig+0x2b4>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7ff fb49 	bl	8001ca8 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261a:	f7ff fb45 	bl	8001ca8 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e14d      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800262e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80a0 	beq.w	8002786 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10f      	bne.n	8002676 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_OscConfig+0x2b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d121      	bne.n	80026c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_RCC_OscConfig+0x2b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <HAL_RCC_OscConfig+0x2b8>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268e:	f7ff fb0b 	bl	8001ca8 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e011      	b.n	80026ba <HAL_RCC_OscConfig+0x2ce>
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	42470000 	.word	0x42470000
 80026a0:	42470e80 	.word	0x42470e80
 80026a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a8:	f7ff fafe 	bl	8001ca8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e106      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b85      	ldr	r3, [pc, #532]	; (80028d0 <HAL_RCC_OscConfig+0x4e4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_OscConfig+0x2f0>
 80026ce:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a80      	ldr	r2, [pc, #512]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	e01c      	b.n	8002716 <HAL_RCC_OscConfig+0x32a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x312>
 80026e4:	4b7b      	ldr	r3, [pc, #492]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a7a      	ldr	r2, [pc, #488]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	4b78      	ldr	r3, [pc, #480]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	4a77      	ldr	r2, [pc, #476]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	; 0x70
 80026fc:	e00b      	b.n	8002716 <HAL_RCC_OscConfig+0x32a>
 80026fe:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a74      	ldr	r2, [pc, #464]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
 800270a:	4b72      	ldr	r3, [pc, #456]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	4a71      	ldr	r2, [pc, #452]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d015      	beq.n	800274a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7ff fac3 	bl	8001ca8 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7ff fabf 	bl	8001ca8 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0c5      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	4b65      	ldr	r3, [pc, #404]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ee      	beq.n	8002726 <HAL_RCC_OscConfig+0x33a>
 8002748:	e014      	b.n	8002774 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274a:	f7ff faad 	bl	8001ca8 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7ff faa9 	bl	8001ca8 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0af      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002768:	4b5a      	ldr	r3, [pc, #360]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ee      	bne.n	8002752 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277a:	4b56      	ldr	r3, [pc, #344]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a55      	ldr	r2, [pc, #340]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 8002780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 809b 	beq.w	80028c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d05c      	beq.n	8002856 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d141      	bne.n	8002828 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	4b4c      	ldr	r3, [pc, #304]	; (80028d8 <HAL_RCC_OscConfig+0x4ec>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7ff fa7d 	bl	8001ca8 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b2:	f7ff fa79 	bl	8001ca8 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e081      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c4:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69da      	ldr	r2, [r3, #28]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	019b      	lsls	r3, r3, #6
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	3b01      	subs	r3, #1
 80027ea:	041b      	lsls	r3, r3, #16
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	061b      	lsls	r3, r3, #24
 80027f4:	4937      	ldr	r1, [pc, #220]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <HAL_RCC_OscConfig+0x4ec>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7ff fa52 	bl	8001ca8 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002808:	f7ff fa4e 	bl	8001ca8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e056      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x41c>
 8002826:	e04e      	b.n	80028c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002828:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <HAL_RCC_OscConfig+0x4ec>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7ff fa3b 	bl	8001ca8 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002836:	f7ff fa37 	bl	8001ca8 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e03f      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002848:	4b22      	ldr	r3, [pc, #136]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x44a>
 8002854:	e037      	b.n	80028c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e032      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002862:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d028      	beq.n	80028c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d121      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d11a      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002892:	4013      	ands	r3, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002898:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800289a:	4293      	cmp	r3, r2
 800289c:	d111      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	3b01      	subs	r3, #1
 80028ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d001      	beq.n	80028c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40007000 	.word	0x40007000
 80028d4:	40023800 	.word	0x40023800
 80028d8:	42470060 	.word	0x42470060

080028dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0cc      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b68      	ldr	r3, [pc, #416]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d90c      	bls.n	8002918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b65      	ldr	r3, [pc, #404]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002930:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800293a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	494d      	ldr	r1, [pc, #308]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d044      	beq.n	80029fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d119      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d003      	beq.n	800299a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	2b03      	cmp	r3, #3
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b3f      	ldr	r3, [pc, #252]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e06f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e067      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4934      	ldr	r1, [pc, #208]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7ff f96c 	bl	8001ca8 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7ff f968 	bl	8001ca8 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e04f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d20c      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e032      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4916      	ldr	r1, [pc, #88]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490e      	ldr	r1, [pc, #56]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f821 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	490a      	ldr	r1, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	5ccb      	ldrb	r3, [r1, r3]
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff f8cc 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023c00 	.word	0x40023c00
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	080085dc 	.word	0x080085dc
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	20000004 	.word	0x20000004

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac0:	4b67      	ldr	r3, [pc, #412]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d00d      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	f200 80bd 	bhi.w	8002c4c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x34>
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d003      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ada:	e0b7      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002adc:	4b61      	ldr	r3, [pc, #388]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ade:	60bb      	str	r3, [r7, #8]
       break;
 8002ae0:	e0b7      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae2:	4b61      	ldr	r3, [pc, #388]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ae4:	60bb      	str	r3, [r7, #8]
      break;
 8002ae6:	e0b4      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae8:	4b5d      	ldr	r3, [pc, #372]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002af2:	4b5b      	ldr	r3, [pc, #364]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d04d      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afe:	4b58      	ldr	r3, [pc, #352]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	461a      	mov	r2, r3
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	ea02 0800 	and.w	r8, r2, r0
 8002b16:	ea03 0901 	and.w	r9, r3, r1
 8002b1a:	4640      	mov	r0, r8
 8002b1c:	4649      	mov	r1, r9
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	014b      	lsls	r3, r1, #5
 8002b28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b2c:	0142      	lsls	r2, r0, #5
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	ebb0 0008 	subs.w	r0, r0, r8
 8002b36:	eb61 0109 	sbc.w	r1, r1, r9
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	018b      	lsls	r3, r1, #6
 8002b44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b48:	0182      	lsls	r2, r0, #6
 8002b4a:	1a12      	subs	r2, r2, r0
 8002b4c:	eb63 0301 	sbc.w	r3, r3, r1
 8002b50:	f04f 0000 	mov.w	r0, #0
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	00d9      	lsls	r1, r3, #3
 8002b5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b5e:	00d0      	lsls	r0, r2, #3
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	eb12 0208 	adds.w	r2, r2, r8
 8002b68:	eb43 0309 	adc.w	r3, r3, r9
 8002b6c:	f04f 0000 	mov.w	r0, #0
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	0259      	lsls	r1, r3, #9
 8002b76:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b7a:	0250      	lsls	r0, r2, #9
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	f7fd fb70 	bl	8000270 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e04a      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9a:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	ea02 0400 	and.w	r4, r2, r0
 8002bb2:	ea03 0501 	and.w	r5, r3, r1
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	4629      	mov	r1, r5
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	014b      	lsls	r3, r1, #5
 8002bc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bc8:	0142      	lsls	r2, r0, #5
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	1b00      	subs	r0, r0, r4
 8002bd0:	eb61 0105 	sbc.w	r1, r1, r5
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	018b      	lsls	r3, r1, #6
 8002bde:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002be2:	0182      	lsls	r2, r0, #6
 8002be4:	1a12      	subs	r2, r2, r0
 8002be6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bea:	f04f 0000 	mov.w	r0, #0
 8002bee:	f04f 0100 	mov.w	r1, #0
 8002bf2:	00d9      	lsls	r1, r3, #3
 8002bf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bf8:	00d0      	lsls	r0, r2, #3
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	1912      	adds	r2, r2, r4
 8002c00:	eb45 0303 	adc.w	r3, r5, r3
 8002c04:	f04f 0000 	mov.w	r0, #0
 8002c08:	f04f 0100 	mov.w	r1, #0
 8002c0c:	0299      	lsls	r1, r3, #10
 8002c0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c12:	0290      	lsls	r0, r2, #10
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	f7fd fb24 	bl	8000270 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	0c1b      	lsrs	r3, r3, #16
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	60bb      	str	r3, [r7, #8]
      break;
 8002c4a:	e002      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c4e:	60bb      	str	r3, [r7, #8]
      break;
 8002c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c52:	68bb      	ldr	r3, [r7, #8]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	00f42400 	.word	0x00f42400
 8002c68:	007a1200 	.word	0x007a1200

08002c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000000 	.word	0x20000000

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c88:	f7ff fff0 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	0a9b      	lsrs	r3, r3, #10
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	080085ec 	.word	0x080085ec

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cb0:	f7ff ffdc 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0b5b      	lsrs	r3, r3, #13
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	080085ec 	.word	0x080085ec

08002cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e07b      	b.n	8002dde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d108      	bne.n	8002d00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cf6:	d009      	beq.n	8002d0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
 8002cfe:	e005      	b.n	8002d0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe fc6c 	bl	8001604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d90:	ea42 0103 	orr.w	r1, r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	f003 0104 	and.w	r1, r3, #4
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	f003 0210 	and.w	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e034      	b.n	8002e66 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d106      	bne.n	8002e16 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7fd fc6f 	bl	80006f4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3308      	adds	r3, #8
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4610      	mov	r0, r2
 8002e22:	f001 fb0f 	bl	8004444 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	f001 fb59 	bl	80044e8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6858      	ldr	r0, [r3, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	f001 fb8e 	bl	8004564 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	6892      	ldr	r2, [r2, #8]
 8002e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	6892      	ldr	r2, [r2, #8]
 8002e5c:	f041 0101 	orr.w	r1, r1, #1
 8002e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e041      	b.n	8002f04 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d106      	bne.n	8002e9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fe fd6f 	bl	8001978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f000 fa97 	bl	80033e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d001      	beq.n	8002f24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e046      	b.n	8002fb2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <HAL_TIM_Base_Start+0xb4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d022      	beq.n	8002f7c <HAL_TIM_Base_Start+0x70>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3e:	d01d      	beq.n	8002f7c <HAL_TIM_Base_Start+0x70>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <HAL_TIM_Base_Start+0xb8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d018      	beq.n	8002f7c <HAL_TIM_Base_Start+0x70>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <HAL_TIM_Base_Start+0xbc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d013      	beq.n	8002f7c <HAL_TIM_Base_Start+0x70>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <HAL_TIM_Base_Start+0xc0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00e      	beq.n	8002f7c <HAL_TIM_Base_Start+0x70>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <HAL_TIM_Base_Start+0xc4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d009      	beq.n	8002f7c <HAL_TIM_Base_Start+0x70>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <HAL_TIM_Base_Start+0xc8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <HAL_TIM_Base_Start+0x70>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <HAL_TIM_Base_Start+0xcc>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d111      	bne.n	8002fa0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b06      	cmp	r3, #6
 8002f8c:	d010      	beq.n	8002fb0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9e:	e007      	b.n	8002fb0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800
 8002fcc:	40000c00 	.word	0x40000c00
 8002fd0:	40010400 	.word	0x40010400
 8002fd4:	40014000 	.word	0x40014000
 8002fd8:	40001800 	.word	0x40001800

08002fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0202 	mvn.w	r2, #2
 8003008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f9bf 	bl	80033a2 <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f9b1 	bl	800338e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f9c2 	bl	80033b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d122      	bne.n	800308c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b04      	cmp	r3, #4
 8003052:	d11b      	bne.n	800308c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0204 	mvn.w	r2, #4
 800305c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2202      	movs	r2, #2
 8003062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f995 	bl	80033a2 <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f987 	bl	800338e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f998 	bl	80033b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b08      	cmp	r3, #8
 8003098:	d122      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d11b      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0208 	mvn.w	r2, #8
 80030b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2204      	movs	r2, #4
 80030b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f96b 	bl	80033a2 <HAL_TIM_IC_CaptureCallback>
 80030cc:	e005      	b.n	80030da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f95d 	bl	800338e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f96e 	bl	80033b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d122      	bne.n	8003134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d11b      	bne.n	8003134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0210 	mvn.w	r2, #16
 8003104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2208      	movs	r2, #8
 800310a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f941 	bl	80033a2 <HAL_TIM_IC_CaptureCallback>
 8003120:	e005      	b.n	800312e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f933 	bl	800338e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f944 	bl	80033b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d10e      	bne.n	8003160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	d107      	bne.n	8003160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0201 	mvn.w	r2, #1
 8003158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f90d 	bl	800337a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316a:	2b80      	cmp	r3, #128	; 0x80
 800316c:	d10e      	bne.n	800318c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d107      	bne.n	800318c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 faea 	bl	8003760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003196:	2b40      	cmp	r3, #64	; 0x40
 8003198:	d10e      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	d107      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f909 	bl	80033ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d10e      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d107      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0220 	mvn.w	r2, #32
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fab4 	bl	800374c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_TIM_ConfigClockSource+0x1c>
 8003204:	2302      	movs	r3, #2
 8003206:	e0b4      	b.n	8003372 <HAL_TIM_ConfigClockSource+0x186>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003240:	d03e      	beq.n	80032c0 <HAL_TIM_ConfigClockSource+0xd4>
 8003242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003246:	f200 8087 	bhi.w	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 800324a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324e:	f000 8086 	beq.w	800335e <HAL_TIM_ConfigClockSource+0x172>
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003256:	d87f      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003258:	2b70      	cmp	r3, #112	; 0x70
 800325a:	d01a      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0xa6>
 800325c:	2b70      	cmp	r3, #112	; 0x70
 800325e:	d87b      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b60      	cmp	r3, #96	; 0x60
 8003262:	d050      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x11a>
 8003264:	2b60      	cmp	r3, #96	; 0x60
 8003266:	d877      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b50      	cmp	r3, #80	; 0x50
 800326a:	d03c      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0xfa>
 800326c:	2b50      	cmp	r3, #80	; 0x50
 800326e:	d873      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d058      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0x13a>
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d86f      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b30      	cmp	r3, #48	; 0x30
 800327a:	d064      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 800327c:	2b30      	cmp	r3, #48	; 0x30
 800327e:	d86b      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b20      	cmp	r3, #32
 8003282:	d060      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 8003284:	2b20      	cmp	r3, #32
 8003286:	d867      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d05c      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 800328c:	2b10      	cmp	r3, #16
 800328e:	d05a      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 8003290:	e062      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6899      	ldr	r1, [r3, #8]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f000 f9b7 	bl	8003614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	609a      	str	r2, [r3, #8]
      break;
 80032be:	e04f      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f000 f9a0 	bl	8003614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e2:	609a      	str	r2, [r3, #8]
      break;
 80032e4:	e03c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f000 f914 	bl	8003520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2150      	movs	r1, #80	; 0x50
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f96d 	bl	80035de <TIM_ITRx_SetConfig>
      break;
 8003304:	e02c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6859      	ldr	r1, [r3, #4]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	461a      	mov	r2, r3
 8003314:	f000 f933 	bl	800357e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2160      	movs	r1, #96	; 0x60
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f95d 	bl	80035de <TIM_ITRx_SetConfig>
      break;
 8003324:	e01c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	461a      	mov	r2, r3
 8003334:	f000 f8f4 	bl	8003520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f94d 	bl	80035de <TIM_ITRx_SetConfig>
      break;
 8003344:	e00c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f000 f944 	bl	80035de <TIM_ITRx_SetConfig>
      break;
 8003356:	e003      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
      break;
 800335c:	e000      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800335e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a40      	ldr	r2, [pc, #256]	; (80034f4 <TIM_Base_SetConfig+0x114>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d013      	beq.n	8003420 <TIM_Base_SetConfig+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fe:	d00f      	beq.n	8003420 <TIM_Base_SetConfig+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a3d      	ldr	r2, [pc, #244]	; (80034f8 <TIM_Base_SetConfig+0x118>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d00b      	beq.n	8003420 <TIM_Base_SetConfig+0x40>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a3c      	ldr	r2, [pc, #240]	; (80034fc <TIM_Base_SetConfig+0x11c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d007      	beq.n	8003420 <TIM_Base_SetConfig+0x40>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a3b      	ldr	r2, [pc, #236]	; (8003500 <TIM_Base_SetConfig+0x120>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_Base_SetConfig+0x40>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a3a      	ldr	r2, [pc, #232]	; (8003504 <TIM_Base_SetConfig+0x124>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d108      	bne.n	8003432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a2f      	ldr	r2, [pc, #188]	; (80034f4 <TIM_Base_SetConfig+0x114>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d02b      	beq.n	8003492 <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003440:	d027      	beq.n	8003492 <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a2c      	ldr	r2, [pc, #176]	; (80034f8 <TIM_Base_SetConfig+0x118>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d023      	beq.n	8003492 <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a2b      	ldr	r2, [pc, #172]	; (80034fc <TIM_Base_SetConfig+0x11c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01f      	beq.n	8003492 <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a2a      	ldr	r2, [pc, #168]	; (8003500 <TIM_Base_SetConfig+0x120>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01b      	beq.n	8003492 <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a29      	ldr	r2, [pc, #164]	; (8003504 <TIM_Base_SetConfig+0x124>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d017      	beq.n	8003492 <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a28      	ldr	r2, [pc, #160]	; (8003508 <TIM_Base_SetConfig+0x128>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a27      	ldr	r2, [pc, #156]	; (800350c <TIM_Base_SetConfig+0x12c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00f      	beq.n	8003492 <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a26      	ldr	r2, [pc, #152]	; (8003510 <TIM_Base_SetConfig+0x130>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00b      	beq.n	8003492 <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a25      	ldr	r2, [pc, #148]	; (8003514 <TIM_Base_SetConfig+0x134>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a24      	ldr	r2, [pc, #144]	; (8003518 <TIM_Base_SetConfig+0x138>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d003      	beq.n	8003492 <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a23      	ldr	r2, [pc, #140]	; (800351c <TIM_Base_SetConfig+0x13c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d108      	bne.n	80034a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <TIM_Base_SetConfig+0x114>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d003      	beq.n	80034d8 <TIM_Base_SetConfig+0xf8>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a0c      	ldr	r2, [pc, #48]	; (8003504 <TIM_Base_SetConfig+0x124>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d103      	bne.n	80034e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	615a      	str	r2, [r3, #20]
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40000400 	.word	0x40000400
 80034fc:	40000800 	.word	0x40000800
 8003500:	40000c00 	.word	0x40000c00
 8003504:	40010400 	.word	0x40010400
 8003508:	40014000 	.word	0x40014000
 800350c:	40014400 	.word	0x40014400
 8003510:	40014800 	.word	0x40014800
 8003514:	40001800 	.word	0x40001800
 8003518:	40001c00 	.word	0x40001c00
 800351c:	40002000 	.word	0x40002000

08003520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f023 0201 	bic.w	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800354a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f023 030a 	bic.w	r3, r3, #10
 800355c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	621a      	str	r2, [r3, #32]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800357e:	b480      	push	{r7}
 8003580:	b087      	sub	sp, #28
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	f023 0210 	bic.w	r2, r3, #16
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	031b      	lsls	r3, r3, #12
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	621a      	str	r2, [r3, #32]
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035de:	b480      	push	{r7}
 80035e0:	b085      	sub	sp, #20
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f043 0307 	orr.w	r3, r3, #7
 8003600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	609a      	str	r2, [r3, #8]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800362e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	021a      	lsls	r2, r3, #8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	431a      	orrs	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	609a      	str	r2, [r3, #8]
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003668:	2302      	movs	r3, #2
 800366a:	e05a      	b.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a21      	ldr	r2, [pc, #132]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d022      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b8:	d01d      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1d      	ldr	r2, [pc, #116]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d018      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1b      	ldr	r2, [pc, #108]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1a      	ldr	r2, [pc, #104]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a18      	ldr	r2, [pc, #96]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d009      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a17      	ldr	r2, [pc, #92]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a15      	ldr	r2, [pc, #84]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10c      	bne.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	4313      	orrs	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40010000 	.word	0x40010000
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800
 800373c:	40000c00 	.word	0x40000c00
 8003740:	40010400 	.word	0x40010400
 8003744:	40014000 	.word	0x40014000
 8003748:	40001800 	.word	0x40001800

0800374c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e03f      	b.n	8003806 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fe f966 	bl	8001a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	; 0x24
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fc7b 	bl	80040b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b0ba      	sub	sp, #232	; 0xe8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800384e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10f      	bne.n	8003876 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_UART_IRQHandler+0x66>
 8003862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fb65 	bl	8003f3e <UART_Receive_IT>
      return;
 8003874:	e256      	b.n	8003d24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80de 	beq.w	8003a3c <HAL_UART_IRQHandler+0x22c>
 8003880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d106      	bne.n	800389a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003890:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80d1 	beq.w	8003a3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800389a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00b      	beq.n	80038be <HAL_UART_IRQHandler+0xae>
 80038a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f043 0201 	orr.w	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <HAL_UART_IRQHandler+0xd2>
 80038ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f043 0202 	orr.w	r2, r3, #2
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_UART_IRQHandler+0xf6>
 80038ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f043 0204 	orr.w	r2, r3, #4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d011      	beq.n	8003936 <HAL_UART_IRQHandler+0x126>
 8003912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d105      	bne.n	800392a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800391e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f043 0208 	orr.w	r2, r3, #8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 81ed 	beq.w	8003d1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_UART_IRQHandler+0x14e>
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 faf0 	bl	8003f3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d103      	bne.n	800398a <HAL_UART_IRQHandler+0x17a>
 8003982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d04f      	beq.n	8003a2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f9f8 	bl	8003d80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b40      	cmp	r3, #64	; 0x40
 800399c:	d141      	bne.n	8003a22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3314      	adds	r3, #20
 80039a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3314      	adds	r3, #20
 80039c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1d9      	bne.n	800399e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d013      	beq.n	8003a1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	4a7d      	ldr	r2, [pc, #500]	; (8003bec <HAL_UART_IRQHandler+0x3dc>)
 80039f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe fb03 	bl	800200a <HAL_DMA_Abort_IT>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d016      	beq.n	8003a38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a14:	4610      	mov	r0, r2
 8003a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	e00e      	b.n	8003a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f99a 	bl	8003d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	e00a      	b.n	8003a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f996 	bl	8003d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	e006      	b.n	8003a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f992 	bl	8003d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a36:	e170      	b.n	8003d1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a38:	bf00      	nop
    return;
 8003a3a:	e16e      	b.n	8003d1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	f040 814a 	bne.w	8003cda <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 8143 	beq.w	8003cda <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 813c 	beq.w	8003cda <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	f040 80b4 	bne.w	8003bf0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8140 	beq.w	8003d1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	f080 8139 	bcs.w	8003d1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ab2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003abe:	f000 8088 	beq.w	8003bd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003aee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003afa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1d9      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3314      	adds	r3, #20
 8003b14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e1      	bne.n	8003b0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3314      	adds	r3, #20
 8003b50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e3      	bne.n	8003b4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	330c      	adds	r3, #12
 8003b96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9a:	e853 3f00 	ldrex	r3, [r3]
 8003b9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba2:	f023 0310 	bic.w	r3, r3, #16
 8003ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	330c      	adds	r3, #12
 8003bb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bbc:	e841 2300 	strex	r3, r2, [r1]
 8003bc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e3      	bne.n	8003b90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe f9ac 	bl	8001f2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f8c0 	bl	8003d68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003be8:	e099      	b.n	8003d1e <HAL_UART_IRQHandler+0x50e>
 8003bea:	bf00      	nop
 8003bec:	08003e47 	.word	0x08003e47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 808b 	beq.w	8003d22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8086 	beq.w	8003d22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c3a:	647a      	str	r2, [r7, #68]	; 0x44
 8003c3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e3      	bne.n	8003c16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3314      	adds	r3, #20
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3314      	adds	r3, #20
 8003c6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c72:	633a      	str	r2, [r7, #48]	; 0x30
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e3      	bne.n	8003c4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0310 	bic.w	r3, r3, #16
 8003caa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	330c      	adds	r3, #12
 8003cb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cb8:	61fa      	str	r2, [r7, #28]
 8003cba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	e841 2300 	strex	r3, r2, [r1]
 8003cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e3      	bne.n	8003c94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ccc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f848 	bl	8003d68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cd8:	e023      	b.n	8003d22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <HAL_UART_IRQHandler+0x4ea>
 8003ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f8bb 	bl	8003e6e <UART_Transmit_IT>
    return;
 8003cf8:	e014      	b.n	8003d24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00e      	beq.n	8003d24 <HAL_UART_IRQHandler+0x514>
 8003d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f8fb 	bl	8003f0e <UART_EndTransmit_IT>
    return;
 8003d18:	e004      	b.n	8003d24 <HAL_UART_IRQHandler+0x514>
    return;
 8003d1a:	bf00      	nop
 8003d1c:	e002      	b.n	8003d24 <HAL_UART_IRQHandler+0x514>
      return;
 8003d1e:	bf00      	nop
 8003d20:	e000      	b.n	8003d24 <HAL_UART_IRQHandler+0x514>
      return;
 8003d22:	bf00      	nop
  }
}
 8003d24:	37e8      	adds	r7, #232	; 0xe8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop

08003d2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b095      	sub	sp, #84	; 0x54
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003da8:	643a      	str	r2, [r7, #64]	; 0x40
 8003daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e5      	bne.n	8003d88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3314      	adds	r3, #20
 8003dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3314      	adds	r3, #20
 8003dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ddc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e5      	bne.n	8003dbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d119      	bne.n	8003e2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f023 0310 	bic.w	r3, r3, #16
 8003e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	330c      	adds	r3, #12
 8003e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e18:	61ba      	str	r2, [r7, #24]
 8003e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6979      	ldr	r1, [r7, #20]
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	613b      	str	r3, [r7, #16]
   return(result);
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e5      	bne.n	8003df8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e3a:	bf00      	nop
 8003e3c:	3754      	adds	r7, #84	; 0x54
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f7ff ff77 	bl	8003d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b21      	cmp	r3, #33	; 0x21
 8003e80:	d13e      	bne.n	8003f00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8a:	d114      	bne.n	8003eb6 <UART_Transmit_IT+0x48>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d110      	bne.n	8003eb6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	1c9a      	adds	r2, r3, #2
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	621a      	str	r2, [r3, #32]
 8003eb4:	e008      	b.n	8003ec8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	1c59      	adds	r1, r3, #1
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6211      	str	r1, [r2, #32]
 8003ec0:	781a      	ldrb	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10f      	bne.n	8003efc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003efa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e000      	b.n	8003f02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff fefc 	bl	8003d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b08c      	sub	sp, #48	; 0x30
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b22      	cmp	r3, #34	; 0x22
 8003f50:	f040 80ab 	bne.w	80040aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5c:	d117      	bne.n	8003f8e <UART_Receive_IT+0x50>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d113      	bne.n	8003f8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	1c9a      	adds	r2, r3, #2
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f8c:	e026      	b.n	8003fdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa0:	d007      	beq.n	8003fb2 <UART_Receive_IT+0x74>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <UART_Receive_IT+0x82>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	e008      	b.n	8003fd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d15a      	bne.n	80040a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0220 	bic.w	r2, r2, #32
 8003ffe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800400e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0201 	bic.w	r2, r2, #1
 800401e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	2b01      	cmp	r3, #1
 800402e:	d135      	bne.n	800409c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	613b      	str	r3, [r7, #16]
   return(result);
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f023 0310 	bic.w	r3, r3, #16
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004056:	623a      	str	r2, [r7, #32]
 8004058:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	69f9      	ldr	r1, [r7, #28]
 800405c:	6a3a      	ldr	r2, [r7, #32]
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	61bb      	str	r3, [r7, #24]
   return(result);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e5      	bne.n	8004036 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b10      	cmp	r3, #16
 8004076:	d10a      	bne.n	800408e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004092:	4619      	mov	r1, r3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fe67 	bl	8003d68 <HAL_UARTEx_RxEventCallback>
 800409a:	e002      	b.n	80040a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff fe4f 	bl	8003d40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e002      	b.n	80040ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e000      	b.n	80040ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3730      	adds	r7, #48	; 0x30
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b8:	b09f      	sub	sp, #124	; 0x7c
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ca:	68d9      	ldr	r1, [r3, #12]
 80040cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	ea40 0301 	orr.w	r3, r0, r1
 80040d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	431a      	orrs	r2, r3
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80040ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040f8:	f021 010c 	bic.w	r1, r1, #12
 80040fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004102:	430b      	orrs	r3, r1
 8004104:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004112:	6999      	ldr	r1, [r3, #24]
 8004114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	ea40 0301 	orr.w	r3, r0, r1
 800411c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800411e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	4bc5      	ldr	r3, [pc, #788]	; (8004438 <UART_SetConfig+0x384>)
 8004124:	429a      	cmp	r2, r3
 8004126:	d004      	beq.n	8004132 <UART_SetConfig+0x7e>
 8004128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	4bc3      	ldr	r3, [pc, #780]	; (800443c <UART_SetConfig+0x388>)
 800412e:	429a      	cmp	r2, r3
 8004130:	d103      	bne.n	800413a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004132:	f7fe fdbb 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8004136:	6778      	str	r0, [r7, #116]	; 0x74
 8004138:	e002      	b.n	8004140 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800413a:	f7fe fda3 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 800413e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004148:	f040 80b6 	bne.w	80042b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800414c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414e:	461c      	mov	r4, r3
 8004150:	f04f 0500 	mov.w	r5, #0
 8004154:	4622      	mov	r2, r4
 8004156:	462b      	mov	r3, r5
 8004158:	1891      	adds	r1, r2, r2
 800415a:	6439      	str	r1, [r7, #64]	; 0x40
 800415c:	415b      	adcs	r3, r3
 800415e:	647b      	str	r3, [r7, #68]	; 0x44
 8004160:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004164:	1912      	adds	r2, r2, r4
 8004166:	eb45 0303 	adc.w	r3, r5, r3
 800416a:	f04f 0000 	mov.w	r0, #0
 800416e:	f04f 0100 	mov.w	r1, #0
 8004172:	00d9      	lsls	r1, r3, #3
 8004174:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004178:	00d0      	lsls	r0, r2, #3
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	1911      	adds	r1, r2, r4
 8004180:	6639      	str	r1, [r7, #96]	; 0x60
 8004182:	416b      	adcs	r3, r5
 8004184:	667b      	str	r3, [r7, #100]	; 0x64
 8004186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	461a      	mov	r2, r3
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	1891      	adds	r1, r2, r2
 8004192:	63b9      	str	r1, [r7, #56]	; 0x38
 8004194:	415b      	adcs	r3, r3
 8004196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800419c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80041a0:	f7fc f866 	bl	8000270 <__aeabi_uldivmod>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4ba5      	ldr	r3, [pc, #660]	; (8004440 <UART_SetConfig+0x38c>)
 80041aa:	fba3 2302 	umull	r2, r3, r3, r2
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	011e      	lsls	r6, r3, #4
 80041b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b4:	461c      	mov	r4, r3
 80041b6:	f04f 0500 	mov.w	r5, #0
 80041ba:	4622      	mov	r2, r4
 80041bc:	462b      	mov	r3, r5
 80041be:	1891      	adds	r1, r2, r2
 80041c0:	6339      	str	r1, [r7, #48]	; 0x30
 80041c2:	415b      	adcs	r3, r3
 80041c4:	637b      	str	r3, [r7, #52]	; 0x34
 80041c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041ca:	1912      	adds	r2, r2, r4
 80041cc:	eb45 0303 	adc.w	r3, r5, r3
 80041d0:	f04f 0000 	mov.w	r0, #0
 80041d4:	f04f 0100 	mov.w	r1, #0
 80041d8:	00d9      	lsls	r1, r3, #3
 80041da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041de:	00d0      	lsls	r0, r2, #3
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	1911      	adds	r1, r2, r4
 80041e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80041e8:	416b      	adcs	r3, r5
 80041ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	461a      	mov	r2, r3
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	1891      	adds	r1, r2, r2
 80041f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80041fa:	415b      	adcs	r3, r3
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004202:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004206:	f7fc f833 	bl	8000270 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4b8c      	ldr	r3, [pc, #560]	; (8004440 <UART_SetConfig+0x38c>)
 8004210:	fba3 1302 	umull	r1, r3, r3, r2
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	2164      	movs	r1, #100	; 0x64
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	3332      	adds	r3, #50	; 0x32
 8004222:	4a87      	ldr	r2, [pc, #540]	; (8004440 <UART_SetConfig+0x38c>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004230:	441e      	add	r6, r3
 8004232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004234:	4618      	mov	r0, r3
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	1894      	adds	r4, r2, r2
 8004240:	623c      	str	r4, [r7, #32]
 8004242:	415b      	adcs	r3, r3
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
 8004246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800424a:	1812      	adds	r2, r2, r0
 800424c:	eb41 0303 	adc.w	r3, r1, r3
 8004250:	f04f 0400 	mov.w	r4, #0
 8004254:	f04f 0500 	mov.w	r5, #0
 8004258:	00dd      	lsls	r5, r3, #3
 800425a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800425e:	00d4      	lsls	r4, r2, #3
 8004260:	4622      	mov	r2, r4
 8004262:	462b      	mov	r3, r5
 8004264:	1814      	adds	r4, r2, r0
 8004266:	653c      	str	r4, [r7, #80]	; 0x50
 8004268:	414b      	adcs	r3, r1
 800426a:	657b      	str	r3, [r7, #84]	; 0x54
 800426c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	461a      	mov	r2, r3
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	1891      	adds	r1, r2, r2
 8004278:	61b9      	str	r1, [r7, #24]
 800427a:	415b      	adcs	r3, r3
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004282:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004286:	f7fb fff3 	bl	8000270 <__aeabi_uldivmod>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4b6c      	ldr	r3, [pc, #432]	; (8004440 <UART_SetConfig+0x38c>)
 8004290:	fba3 1302 	umull	r1, r3, r3, r2
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	2164      	movs	r1, #100	; 0x64
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	3332      	adds	r3, #50	; 0x32
 80042a2:	4a67      	ldr	r2, [pc, #412]	; (8004440 <UART_SetConfig+0x38c>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	f003 0207 	and.w	r2, r3, #7
 80042ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4432      	add	r2, r6
 80042b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042b6:	e0b9      	b.n	800442c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ba:	461c      	mov	r4, r3
 80042bc:	f04f 0500 	mov.w	r5, #0
 80042c0:	4622      	mov	r2, r4
 80042c2:	462b      	mov	r3, r5
 80042c4:	1891      	adds	r1, r2, r2
 80042c6:	6139      	str	r1, [r7, #16]
 80042c8:	415b      	adcs	r3, r3
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042d0:	1912      	adds	r2, r2, r4
 80042d2:	eb45 0303 	adc.w	r3, r5, r3
 80042d6:	f04f 0000 	mov.w	r0, #0
 80042da:	f04f 0100 	mov.w	r1, #0
 80042de:	00d9      	lsls	r1, r3, #3
 80042e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042e4:	00d0      	lsls	r0, r2, #3
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	eb12 0804 	adds.w	r8, r2, r4
 80042ee:	eb43 0905 	adc.w	r9, r3, r5
 80042f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	008b      	lsls	r3, r1, #2
 8004306:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800430a:	0082      	lsls	r2, r0, #2
 800430c:	4640      	mov	r0, r8
 800430e:	4649      	mov	r1, r9
 8004310:	f7fb ffae 	bl	8000270 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4b49      	ldr	r3, [pc, #292]	; (8004440 <UART_SetConfig+0x38c>)
 800431a:	fba3 2302 	umull	r2, r3, r3, r2
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	011e      	lsls	r6, r3, #4
 8004322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004324:	4618      	mov	r0, r3
 8004326:	f04f 0100 	mov.w	r1, #0
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	1894      	adds	r4, r2, r2
 8004330:	60bc      	str	r4, [r7, #8]
 8004332:	415b      	adcs	r3, r3
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800433a:	1812      	adds	r2, r2, r0
 800433c:	eb41 0303 	adc.w	r3, r1, r3
 8004340:	f04f 0400 	mov.w	r4, #0
 8004344:	f04f 0500 	mov.w	r5, #0
 8004348:	00dd      	lsls	r5, r3, #3
 800434a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800434e:	00d4      	lsls	r4, r2, #3
 8004350:	4622      	mov	r2, r4
 8004352:	462b      	mov	r3, r5
 8004354:	1814      	adds	r4, r2, r0
 8004356:	64bc      	str	r4, [r7, #72]	; 0x48
 8004358:	414b      	adcs	r3, r1
 800435a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800435c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4618      	mov	r0, r3
 8004362:	f04f 0100 	mov.w	r1, #0
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	008b      	lsls	r3, r1, #2
 8004370:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004374:	0082      	lsls	r2, r0, #2
 8004376:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800437a:	f7fb ff79 	bl	8000270 <__aeabi_uldivmod>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4b2f      	ldr	r3, [pc, #188]	; (8004440 <UART_SetConfig+0x38c>)
 8004384:	fba3 1302 	umull	r1, r3, r3, r2
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	2164      	movs	r1, #100	; 0x64
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	3332      	adds	r3, #50	; 0x32
 8004396:	4a2a      	ldr	r2, [pc, #168]	; (8004440 <UART_SetConfig+0x38c>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a2:	441e      	add	r6, r3
 80043a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043a6:	4618      	mov	r0, r3
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	1894      	adds	r4, r2, r2
 80043b2:	603c      	str	r4, [r7, #0]
 80043b4:	415b      	adcs	r3, r3
 80043b6:	607b      	str	r3, [r7, #4]
 80043b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043bc:	1812      	adds	r2, r2, r0
 80043be:	eb41 0303 	adc.w	r3, r1, r3
 80043c2:	f04f 0400 	mov.w	r4, #0
 80043c6:	f04f 0500 	mov.w	r5, #0
 80043ca:	00dd      	lsls	r5, r3, #3
 80043cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043d0:	00d4      	lsls	r4, r2, #3
 80043d2:	4622      	mov	r2, r4
 80043d4:	462b      	mov	r3, r5
 80043d6:	eb12 0a00 	adds.w	sl, r2, r0
 80043da:	eb43 0b01 	adc.w	fp, r3, r1
 80043de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f04f 0100 	mov.w	r1, #0
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	008b      	lsls	r3, r1, #2
 80043f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043f6:	0082      	lsls	r2, r0, #2
 80043f8:	4650      	mov	r0, sl
 80043fa:	4659      	mov	r1, fp
 80043fc:	f7fb ff38 	bl	8000270 <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <UART_SetConfig+0x38c>)
 8004406:	fba3 1302 	umull	r1, r3, r3, r2
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	2164      	movs	r1, #100	; 0x64
 800440e:	fb01 f303 	mul.w	r3, r1, r3
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	3332      	adds	r3, #50	; 0x32
 8004418:	4a09      	ldr	r2, [pc, #36]	; (8004440 <UART_SetConfig+0x38c>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	f003 020f 	and.w	r2, r3, #15
 8004424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4432      	add	r2, r6
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	bf00      	nop
 800442e:	377c      	adds	r7, #124	; 0x7c
 8004430:	46bd      	mov	sp, r7
 8004432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004436:	bf00      	nop
 8004438:	40011000 	.word	0x40011000
 800443c:	40011400 	.word	0x40011400
 8004440:	51eb851f 	.word	0x51eb851f

08004444 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800445c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <FSMC_NORSRAM_Init+0xa0>)
 8004462:	4013      	ands	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800446e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004474:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800447a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004480:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004486:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800448c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004492:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004498:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800449e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80044a4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80044aa:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80044b0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d103      	bne.n	80044c8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68f9      	ldr	r1, [r7, #12]
 80044d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	fff00080 	.word	0xfff00080

080044e8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004502:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800450a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004516:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800451e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004526:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	3b01      	subs	r3, #1
 800452e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004530:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	3b02      	subs	r3, #2
 8004538:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800453a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004540:	4313      	orrs	r3, r2
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6979      	ldr	r1, [r7, #20]
 8004550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800457c:	d122      	bne.n	80045c4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004586:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800458c:	4013      	ands	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800459a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80045a2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80045aa:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80045b0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6979      	ldr	r1, [r7, #20]
 80045be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80045c2:	e005      	b.n	80045d0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80045cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	cff00000 	.word	0xcff00000

080045e4 <__errno>:
 80045e4:	4b01      	ldr	r3, [pc, #4]	; (80045ec <__errno+0x8>)
 80045e6:	6818      	ldr	r0, [r3, #0]
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	2000000c 	.word	0x2000000c

080045f0 <__libc_init_array>:
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	4d0d      	ldr	r5, [pc, #52]	; (8004628 <__libc_init_array+0x38>)
 80045f4:	4c0d      	ldr	r4, [pc, #52]	; (800462c <__libc_init_array+0x3c>)
 80045f6:	1b64      	subs	r4, r4, r5
 80045f8:	10a4      	asrs	r4, r4, #2
 80045fa:	2600      	movs	r6, #0
 80045fc:	42a6      	cmp	r6, r4
 80045fe:	d109      	bne.n	8004614 <__libc_init_array+0x24>
 8004600:	4d0b      	ldr	r5, [pc, #44]	; (8004630 <__libc_init_array+0x40>)
 8004602:	4c0c      	ldr	r4, [pc, #48]	; (8004634 <__libc_init_array+0x44>)
 8004604:	f000 ffec 	bl	80055e0 <_init>
 8004608:	1b64      	subs	r4, r4, r5
 800460a:	10a4      	asrs	r4, r4, #2
 800460c:	2600      	movs	r6, #0
 800460e:	42a6      	cmp	r6, r4
 8004610:	d105      	bne.n	800461e <__libc_init_array+0x2e>
 8004612:	bd70      	pop	{r4, r5, r6, pc}
 8004614:	f855 3b04 	ldr.w	r3, [r5], #4
 8004618:	4798      	blx	r3
 800461a:	3601      	adds	r6, #1
 800461c:	e7ee      	b.n	80045fc <__libc_init_array+0xc>
 800461e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004622:	4798      	blx	r3
 8004624:	3601      	adds	r6, #1
 8004626:	e7f2      	b.n	800460e <__libc_init_array+0x1e>
 8004628:	08008694 	.word	0x08008694
 800462c:	08008694 	.word	0x08008694
 8004630:	08008694 	.word	0x08008694
 8004634:	08008698 	.word	0x08008698

08004638 <memset>:
 8004638:	4402      	add	r2, r0
 800463a:	4603      	mov	r3, r0
 800463c:	4293      	cmp	r3, r2
 800463e:	d100      	bne.n	8004642 <memset+0xa>
 8004640:	4770      	bx	lr
 8004642:	f803 1b01 	strb.w	r1, [r3], #1
 8004646:	e7f9      	b.n	800463c <memset+0x4>

08004648 <iprintf>:
 8004648:	b40f      	push	{r0, r1, r2, r3}
 800464a:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <iprintf+0x2c>)
 800464c:	b513      	push	{r0, r1, r4, lr}
 800464e:	681c      	ldr	r4, [r3, #0]
 8004650:	b124      	cbz	r4, 800465c <iprintf+0x14>
 8004652:	69a3      	ldr	r3, [r4, #24]
 8004654:	b913      	cbnz	r3, 800465c <iprintf+0x14>
 8004656:	4620      	mov	r0, r4
 8004658:	f000 fa5e 	bl	8004b18 <__sinit>
 800465c:	ab05      	add	r3, sp, #20
 800465e:	9a04      	ldr	r2, [sp, #16]
 8004660:	68a1      	ldr	r1, [r4, #8]
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	4620      	mov	r0, r4
 8004666:	f000 fc2f 	bl	8004ec8 <_vfiprintf_r>
 800466a:	b002      	add	sp, #8
 800466c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004670:	b004      	add	sp, #16
 8004672:	4770      	bx	lr
 8004674:	2000000c 	.word	0x2000000c

08004678 <_puts_r>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	460e      	mov	r6, r1
 800467c:	4605      	mov	r5, r0
 800467e:	b118      	cbz	r0, 8004688 <_puts_r+0x10>
 8004680:	6983      	ldr	r3, [r0, #24]
 8004682:	b90b      	cbnz	r3, 8004688 <_puts_r+0x10>
 8004684:	f000 fa48 	bl	8004b18 <__sinit>
 8004688:	69ab      	ldr	r3, [r5, #24]
 800468a:	68ac      	ldr	r4, [r5, #8]
 800468c:	b913      	cbnz	r3, 8004694 <_puts_r+0x1c>
 800468e:	4628      	mov	r0, r5
 8004690:	f000 fa42 	bl	8004b18 <__sinit>
 8004694:	4b2c      	ldr	r3, [pc, #176]	; (8004748 <_puts_r+0xd0>)
 8004696:	429c      	cmp	r4, r3
 8004698:	d120      	bne.n	80046dc <_puts_r+0x64>
 800469a:	686c      	ldr	r4, [r5, #4]
 800469c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800469e:	07db      	lsls	r3, r3, #31
 80046a0:	d405      	bmi.n	80046ae <_puts_r+0x36>
 80046a2:	89a3      	ldrh	r3, [r4, #12]
 80046a4:	0598      	lsls	r0, r3, #22
 80046a6:	d402      	bmi.n	80046ae <_puts_r+0x36>
 80046a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046aa:	f000 fad3 	bl	8004c54 <__retarget_lock_acquire_recursive>
 80046ae:	89a3      	ldrh	r3, [r4, #12]
 80046b0:	0719      	lsls	r1, r3, #28
 80046b2:	d51d      	bpl.n	80046f0 <_puts_r+0x78>
 80046b4:	6923      	ldr	r3, [r4, #16]
 80046b6:	b1db      	cbz	r3, 80046f0 <_puts_r+0x78>
 80046b8:	3e01      	subs	r6, #1
 80046ba:	68a3      	ldr	r3, [r4, #8]
 80046bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046c0:	3b01      	subs	r3, #1
 80046c2:	60a3      	str	r3, [r4, #8]
 80046c4:	bb39      	cbnz	r1, 8004716 <_puts_r+0x9e>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	da38      	bge.n	800473c <_puts_r+0xc4>
 80046ca:	4622      	mov	r2, r4
 80046cc:	210a      	movs	r1, #10
 80046ce:	4628      	mov	r0, r5
 80046d0:	f000 f848 	bl	8004764 <__swbuf_r>
 80046d4:	3001      	adds	r0, #1
 80046d6:	d011      	beq.n	80046fc <_puts_r+0x84>
 80046d8:	250a      	movs	r5, #10
 80046da:	e011      	b.n	8004700 <_puts_r+0x88>
 80046dc:	4b1b      	ldr	r3, [pc, #108]	; (800474c <_puts_r+0xd4>)
 80046de:	429c      	cmp	r4, r3
 80046e0:	d101      	bne.n	80046e6 <_puts_r+0x6e>
 80046e2:	68ac      	ldr	r4, [r5, #8]
 80046e4:	e7da      	b.n	800469c <_puts_r+0x24>
 80046e6:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <_puts_r+0xd8>)
 80046e8:	429c      	cmp	r4, r3
 80046ea:	bf08      	it	eq
 80046ec:	68ec      	ldreq	r4, [r5, #12]
 80046ee:	e7d5      	b.n	800469c <_puts_r+0x24>
 80046f0:	4621      	mov	r1, r4
 80046f2:	4628      	mov	r0, r5
 80046f4:	f000 f888 	bl	8004808 <__swsetup_r>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d0dd      	beq.n	80046b8 <_puts_r+0x40>
 80046fc:	f04f 35ff 	mov.w	r5, #4294967295
 8004700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004702:	07da      	lsls	r2, r3, #31
 8004704:	d405      	bmi.n	8004712 <_puts_r+0x9a>
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	059b      	lsls	r3, r3, #22
 800470a:	d402      	bmi.n	8004712 <_puts_r+0x9a>
 800470c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800470e:	f000 faa2 	bl	8004c56 <__retarget_lock_release_recursive>
 8004712:	4628      	mov	r0, r5
 8004714:	bd70      	pop	{r4, r5, r6, pc}
 8004716:	2b00      	cmp	r3, #0
 8004718:	da04      	bge.n	8004724 <_puts_r+0xac>
 800471a:	69a2      	ldr	r2, [r4, #24]
 800471c:	429a      	cmp	r2, r3
 800471e:	dc06      	bgt.n	800472e <_puts_r+0xb6>
 8004720:	290a      	cmp	r1, #10
 8004722:	d004      	beq.n	800472e <_puts_r+0xb6>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	6022      	str	r2, [r4, #0]
 800472a:	7019      	strb	r1, [r3, #0]
 800472c:	e7c5      	b.n	80046ba <_puts_r+0x42>
 800472e:	4622      	mov	r2, r4
 8004730:	4628      	mov	r0, r5
 8004732:	f000 f817 	bl	8004764 <__swbuf_r>
 8004736:	3001      	adds	r0, #1
 8004738:	d1bf      	bne.n	80046ba <_puts_r+0x42>
 800473a:	e7df      	b.n	80046fc <_puts_r+0x84>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	250a      	movs	r5, #10
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	6022      	str	r2, [r4, #0]
 8004744:	701d      	strb	r5, [r3, #0]
 8004746:	e7db      	b.n	8004700 <_puts_r+0x88>
 8004748:	08008618 	.word	0x08008618
 800474c:	08008638 	.word	0x08008638
 8004750:	080085f8 	.word	0x080085f8

08004754 <puts>:
 8004754:	4b02      	ldr	r3, [pc, #8]	; (8004760 <puts+0xc>)
 8004756:	4601      	mov	r1, r0
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	f7ff bf8d 	b.w	8004678 <_puts_r>
 800475e:	bf00      	nop
 8004760:	2000000c 	.word	0x2000000c

08004764 <__swbuf_r>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	460e      	mov	r6, r1
 8004768:	4614      	mov	r4, r2
 800476a:	4605      	mov	r5, r0
 800476c:	b118      	cbz	r0, 8004776 <__swbuf_r+0x12>
 800476e:	6983      	ldr	r3, [r0, #24]
 8004770:	b90b      	cbnz	r3, 8004776 <__swbuf_r+0x12>
 8004772:	f000 f9d1 	bl	8004b18 <__sinit>
 8004776:	4b21      	ldr	r3, [pc, #132]	; (80047fc <__swbuf_r+0x98>)
 8004778:	429c      	cmp	r4, r3
 800477a:	d12b      	bne.n	80047d4 <__swbuf_r+0x70>
 800477c:	686c      	ldr	r4, [r5, #4]
 800477e:	69a3      	ldr	r3, [r4, #24]
 8004780:	60a3      	str	r3, [r4, #8]
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	071a      	lsls	r2, r3, #28
 8004786:	d52f      	bpl.n	80047e8 <__swbuf_r+0x84>
 8004788:	6923      	ldr	r3, [r4, #16]
 800478a:	b36b      	cbz	r3, 80047e8 <__swbuf_r+0x84>
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	6820      	ldr	r0, [r4, #0]
 8004790:	1ac0      	subs	r0, r0, r3
 8004792:	6963      	ldr	r3, [r4, #20]
 8004794:	b2f6      	uxtb	r6, r6
 8004796:	4283      	cmp	r3, r0
 8004798:	4637      	mov	r7, r6
 800479a:	dc04      	bgt.n	80047a6 <__swbuf_r+0x42>
 800479c:	4621      	mov	r1, r4
 800479e:	4628      	mov	r0, r5
 80047a0:	f000 f926 	bl	80049f0 <_fflush_r>
 80047a4:	bb30      	cbnz	r0, 80047f4 <__swbuf_r+0x90>
 80047a6:	68a3      	ldr	r3, [r4, #8]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	60a3      	str	r3, [r4, #8]
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	6022      	str	r2, [r4, #0]
 80047b2:	701e      	strb	r6, [r3, #0]
 80047b4:	6963      	ldr	r3, [r4, #20]
 80047b6:	3001      	adds	r0, #1
 80047b8:	4283      	cmp	r3, r0
 80047ba:	d004      	beq.n	80047c6 <__swbuf_r+0x62>
 80047bc:	89a3      	ldrh	r3, [r4, #12]
 80047be:	07db      	lsls	r3, r3, #31
 80047c0:	d506      	bpl.n	80047d0 <__swbuf_r+0x6c>
 80047c2:	2e0a      	cmp	r6, #10
 80047c4:	d104      	bne.n	80047d0 <__swbuf_r+0x6c>
 80047c6:	4621      	mov	r1, r4
 80047c8:	4628      	mov	r0, r5
 80047ca:	f000 f911 	bl	80049f0 <_fflush_r>
 80047ce:	b988      	cbnz	r0, 80047f4 <__swbuf_r+0x90>
 80047d0:	4638      	mov	r0, r7
 80047d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <__swbuf_r+0x9c>)
 80047d6:	429c      	cmp	r4, r3
 80047d8:	d101      	bne.n	80047de <__swbuf_r+0x7a>
 80047da:	68ac      	ldr	r4, [r5, #8]
 80047dc:	e7cf      	b.n	800477e <__swbuf_r+0x1a>
 80047de:	4b09      	ldr	r3, [pc, #36]	; (8004804 <__swbuf_r+0xa0>)
 80047e0:	429c      	cmp	r4, r3
 80047e2:	bf08      	it	eq
 80047e4:	68ec      	ldreq	r4, [r5, #12]
 80047e6:	e7ca      	b.n	800477e <__swbuf_r+0x1a>
 80047e8:	4621      	mov	r1, r4
 80047ea:	4628      	mov	r0, r5
 80047ec:	f000 f80c 	bl	8004808 <__swsetup_r>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d0cb      	beq.n	800478c <__swbuf_r+0x28>
 80047f4:	f04f 37ff 	mov.w	r7, #4294967295
 80047f8:	e7ea      	b.n	80047d0 <__swbuf_r+0x6c>
 80047fa:	bf00      	nop
 80047fc:	08008618 	.word	0x08008618
 8004800:	08008638 	.word	0x08008638
 8004804:	080085f8 	.word	0x080085f8

08004808 <__swsetup_r>:
 8004808:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <__swsetup_r+0xcc>)
 800480a:	b570      	push	{r4, r5, r6, lr}
 800480c:	681d      	ldr	r5, [r3, #0]
 800480e:	4606      	mov	r6, r0
 8004810:	460c      	mov	r4, r1
 8004812:	b125      	cbz	r5, 800481e <__swsetup_r+0x16>
 8004814:	69ab      	ldr	r3, [r5, #24]
 8004816:	b913      	cbnz	r3, 800481e <__swsetup_r+0x16>
 8004818:	4628      	mov	r0, r5
 800481a:	f000 f97d 	bl	8004b18 <__sinit>
 800481e:	4b2e      	ldr	r3, [pc, #184]	; (80048d8 <__swsetup_r+0xd0>)
 8004820:	429c      	cmp	r4, r3
 8004822:	d10f      	bne.n	8004844 <__swsetup_r+0x3c>
 8004824:	686c      	ldr	r4, [r5, #4]
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800482c:	0719      	lsls	r1, r3, #28
 800482e:	d42c      	bmi.n	800488a <__swsetup_r+0x82>
 8004830:	06dd      	lsls	r5, r3, #27
 8004832:	d411      	bmi.n	8004858 <__swsetup_r+0x50>
 8004834:	2309      	movs	r3, #9
 8004836:	6033      	str	r3, [r6, #0]
 8004838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	f04f 30ff 	mov.w	r0, #4294967295
 8004842:	e03e      	b.n	80048c2 <__swsetup_r+0xba>
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <__swsetup_r+0xd4>)
 8004846:	429c      	cmp	r4, r3
 8004848:	d101      	bne.n	800484e <__swsetup_r+0x46>
 800484a:	68ac      	ldr	r4, [r5, #8]
 800484c:	e7eb      	b.n	8004826 <__swsetup_r+0x1e>
 800484e:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <__swsetup_r+0xd8>)
 8004850:	429c      	cmp	r4, r3
 8004852:	bf08      	it	eq
 8004854:	68ec      	ldreq	r4, [r5, #12]
 8004856:	e7e6      	b.n	8004826 <__swsetup_r+0x1e>
 8004858:	0758      	lsls	r0, r3, #29
 800485a:	d512      	bpl.n	8004882 <__swsetup_r+0x7a>
 800485c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800485e:	b141      	cbz	r1, 8004872 <__swsetup_r+0x6a>
 8004860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004864:	4299      	cmp	r1, r3
 8004866:	d002      	beq.n	800486e <__swsetup_r+0x66>
 8004868:	4630      	mov	r0, r6
 800486a:	f000 fa59 	bl	8004d20 <_free_r>
 800486e:	2300      	movs	r3, #0
 8004870:	6363      	str	r3, [r4, #52]	; 0x34
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	2300      	movs	r3, #0
 800487c:	6063      	str	r3, [r4, #4]
 800487e:	6923      	ldr	r3, [r4, #16]
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	f043 0308 	orr.w	r3, r3, #8
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	6923      	ldr	r3, [r4, #16]
 800488c:	b94b      	cbnz	r3, 80048a2 <__swsetup_r+0x9a>
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004898:	d003      	beq.n	80048a2 <__swsetup_r+0x9a>
 800489a:	4621      	mov	r1, r4
 800489c:	4630      	mov	r0, r6
 800489e:	f000 f9ff 	bl	8004ca0 <__smakebuf_r>
 80048a2:	89a0      	ldrh	r0, [r4, #12]
 80048a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048a8:	f010 0301 	ands.w	r3, r0, #1
 80048ac:	d00a      	beq.n	80048c4 <__swsetup_r+0xbc>
 80048ae:	2300      	movs	r3, #0
 80048b0:	60a3      	str	r3, [r4, #8]
 80048b2:	6963      	ldr	r3, [r4, #20]
 80048b4:	425b      	negs	r3, r3
 80048b6:	61a3      	str	r3, [r4, #24]
 80048b8:	6923      	ldr	r3, [r4, #16]
 80048ba:	b943      	cbnz	r3, 80048ce <__swsetup_r+0xc6>
 80048bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048c0:	d1ba      	bne.n	8004838 <__swsetup_r+0x30>
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	0781      	lsls	r1, r0, #30
 80048c6:	bf58      	it	pl
 80048c8:	6963      	ldrpl	r3, [r4, #20]
 80048ca:	60a3      	str	r3, [r4, #8]
 80048cc:	e7f4      	b.n	80048b8 <__swsetup_r+0xb0>
 80048ce:	2000      	movs	r0, #0
 80048d0:	e7f7      	b.n	80048c2 <__swsetup_r+0xba>
 80048d2:	bf00      	nop
 80048d4:	2000000c 	.word	0x2000000c
 80048d8:	08008618 	.word	0x08008618
 80048dc:	08008638 	.word	0x08008638
 80048e0:	080085f8 	.word	0x080085f8

080048e4 <__sflush_r>:
 80048e4:	898a      	ldrh	r2, [r1, #12]
 80048e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ea:	4605      	mov	r5, r0
 80048ec:	0710      	lsls	r0, r2, #28
 80048ee:	460c      	mov	r4, r1
 80048f0:	d458      	bmi.n	80049a4 <__sflush_r+0xc0>
 80048f2:	684b      	ldr	r3, [r1, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	dc05      	bgt.n	8004904 <__sflush_r+0x20>
 80048f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	dc02      	bgt.n	8004904 <__sflush_r+0x20>
 80048fe:	2000      	movs	r0, #0
 8004900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004906:	2e00      	cmp	r6, #0
 8004908:	d0f9      	beq.n	80048fe <__sflush_r+0x1a>
 800490a:	2300      	movs	r3, #0
 800490c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004910:	682f      	ldr	r7, [r5, #0]
 8004912:	602b      	str	r3, [r5, #0]
 8004914:	d032      	beq.n	800497c <__sflush_r+0x98>
 8004916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	075a      	lsls	r2, r3, #29
 800491c:	d505      	bpl.n	800492a <__sflush_r+0x46>
 800491e:	6863      	ldr	r3, [r4, #4]
 8004920:	1ac0      	subs	r0, r0, r3
 8004922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004924:	b10b      	cbz	r3, 800492a <__sflush_r+0x46>
 8004926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004928:	1ac0      	subs	r0, r0, r3
 800492a:	2300      	movs	r3, #0
 800492c:	4602      	mov	r2, r0
 800492e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004930:	6a21      	ldr	r1, [r4, #32]
 8004932:	4628      	mov	r0, r5
 8004934:	47b0      	blx	r6
 8004936:	1c43      	adds	r3, r0, #1
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	d106      	bne.n	800494a <__sflush_r+0x66>
 800493c:	6829      	ldr	r1, [r5, #0]
 800493e:	291d      	cmp	r1, #29
 8004940:	d82c      	bhi.n	800499c <__sflush_r+0xb8>
 8004942:	4a2a      	ldr	r2, [pc, #168]	; (80049ec <__sflush_r+0x108>)
 8004944:	40ca      	lsrs	r2, r1
 8004946:	07d6      	lsls	r6, r2, #31
 8004948:	d528      	bpl.n	800499c <__sflush_r+0xb8>
 800494a:	2200      	movs	r2, #0
 800494c:	6062      	str	r2, [r4, #4]
 800494e:	04d9      	lsls	r1, r3, #19
 8004950:	6922      	ldr	r2, [r4, #16]
 8004952:	6022      	str	r2, [r4, #0]
 8004954:	d504      	bpl.n	8004960 <__sflush_r+0x7c>
 8004956:	1c42      	adds	r2, r0, #1
 8004958:	d101      	bne.n	800495e <__sflush_r+0x7a>
 800495a:	682b      	ldr	r3, [r5, #0]
 800495c:	b903      	cbnz	r3, 8004960 <__sflush_r+0x7c>
 800495e:	6560      	str	r0, [r4, #84]	; 0x54
 8004960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004962:	602f      	str	r7, [r5, #0]
 8004964:	2900      	cmp	r1, #0
 8004966:	d0ca      	beq.n	80048fe <__sflush_r+0x1a>
 8004968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800496c:	4299      	cmp	r1, r3
 800496e:	d002      	beq.n	8004976 <__sflush_r+0x92>
 8004970:	4628      	mov	r0, r5
 8004972:	f000 f9d5 	bl	8004d20 <_free_r>
 8004976:	2000      	movs	r0, #0
 8004978:	6360      	str	r0, [r4, #52]	; 0x34
 800497a:	e7c1      	b.n	8004900 <__sflush_r+0x1c>
 800497c:	6a21      	ldr	r1, [r4, #32]
 800497e:	2301      	movs	r3, #1
 8004980:	4628      	mov	r0, r5
 8004982:	47b0      	blx	r6
 8004984:	1c41      	adds	r1, r0, #1
 8004986:	d1c7      	bne.n	8004918 <__sflush_r+0x34>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0c4      	beq.n	8004918 <__sflush_r+0x34>
 800498e:	2b1d      	cmp	r3, #29
 8004990:	d001      	beq.n	8004996 <__sflush_r+0xb2>
 8004992:	2b16      	cmp	r3, #22
 8004994:	d101      	bne.n	800499a <__sflush_r+0xb6>
 8004996:	602f      	str	r7, [r5, #0]
 8004998:	e7b1      	b.n	80048fe <__sflush_r+0x1a>
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a0:	81a3      	strh	r3, [r4, #12]
 80049a2:	e7ad      	b.n	8004900 <__sflush_r+0x1c>
 80049a4:	690f      	ldr	r7, [r1, #16]
 80049a6:	2f00      	cmp	r7, #0
 80049a8:	d0a9      	beq.n	80048fe <__sflush_r+0x1a>
 80049aa:	0793      	lsls	r3, r2, #30
 80049ac:	680e      	ldr	r6, [r1, #0]
 80049ae:	bf08      	it	eq
 80049b0:	694b      	ldreq	r3, [r1, #20]
 80049b2:	600f      	str	r7, [r1, #0]
 80049b4:	bf18      	it	ne
 80049b6:	2300      	movne	r3, #0
 80049b8:	eba6 0807 	sub.w	r8, r6, r7
 80049bc:	608b      	str	r3, [r1, #8]
 80049be:	f1b8 0f00 	cmp.w	r8, #0
 80049c2:	dd9c      	ble.n	80048fe <__sflush_r+0x1a>
 80049c4:	6a21      	ldr	r1, [r4, #32]
 80049c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049c8:	4643      	mov	r3, r8
 80049ca:	463a      	mov	r2, r7
 80049cc:	4628      	mov	r0, r5
 80049ce:	47b0      	blx	r6
 80049d0:	2800      	cmp	r0, #0
 80049d2:	dc06      	bgt.n	80049e2 <__sflush_r+0xfe>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049da:	81a3      	strh	r3, [r4, #12]
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295
 80049e0:	e78e      	b.n	8004900 <__sflush_r+0x1c>
 80049e2:	4407      	add	r7, r0
 80049e4:	eba8 0800 	sub.w	r8, r8, r0
 80049e8:	e7e9      	b.n	80049be <__sflush_r+0xda>
 80049ea:	bf00      	nop
 80049ec:	20400001 	.word	0x20400001

080049f0 <_fflush_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	690b      	ldr	r3, [r1, #16]
 80049f4:	4605      	mov	r5, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	b913      	cbnz	r3, 8004a00 <_fflush_r+0x10>
 80049fa:	2500      	movs	r5, #0
 80049fc:	4628      	mov	r0, r5
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	b118      	cbz	r0, 8004a0a <_fflush_r+0x1a>
 8004a02:	6983      	ldr	r3, [r0, #24]
 8004a04:	b90b      	cbnz	r3, 8004a0a <_fflush_r+0x1a>
 8004a06:	f000 f887 	bl	8004b18 <__sinit>
 8004a0a:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <_fflush_r+0x6c>)
 8004a0c:	429c      	cmp	r4, r3
 8004a0e:	d11b      	bne.n	8004a48 <_fflush_r+0x58>
 8004a10:	686c      	ldr	r4, [r5, #4]
 8004a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0ef      	beq.n	80049fa <_fflush_r+0xa>
 8004a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a1c:	07d0      	lsls	r0, r2, #31
 8004a1e:	d404      	bmi.n	8004a2a <_fflush_r+0x3a>
 8004a20:	0599      	lsls	r1, r3, #22
 8004a22:	d402      	bmi.n	8004a2a <_fflush_r+0x3a>
 8004a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a26:	f000 f915 	bl	8004c54 <__retarget_lock_acquire_recursive>
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	f7ff ff59 	bl	80048e4 <__sflush_r>
 8004a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a34:	07da      	lsls	r2, r3, #31
 8004a36:	4605      	mov	r5, r0
 8004a38:	d4e0      	bmi.n	80049fc <_fflush_r+0xc>
 8004a3a:	89a3      	ldrh	r3, [r4, #12]
 8004a3c:	059b      	lsls	r3, r3, #22
 8004a3e:	d4dd      	bmi.n	80049fc <_fflush_r+0xc>
 8004a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a42:	f000 f908 	bl	8004c56 <__retarget_lock_release_recursive>
 8004a46:	e7d9      	b.n	80049fc <_fflush_r+0xc>
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <_fflush_r+0x70>)
 8004a4a:	429c      	cmp	r4, r3
 8004a4c:	d101      	bne.n	8004a52 <_fflush_r+0x62>
 8004a4e:	68ac      	ldr	r4, [r5, #8]
 8004a50:	e7df      	b.n	8004a12 <_fflush_r+0x22>
 8004a52:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <_fflush_r+0x74>)
 8004a54:	429c      	cmp	r4, r3
 8004a56:	bf08      	it	eq
 8004a58:	68ec      	ldreq	r4, [r5, #12]
 8004a5a:	e7da      	b.n	8004a12 <_fflush_r+0x22>
 8004a5c:	08008618 	.word	0x08008618
 8004a60:	08008638 	.word	0x08008638
 8004a64:	080085f8 	.word	0x080085f8

08004a68 <std>:
 8004a68:	2300      	movs	r3, #0
 8004a6a:	b510      	push	{r4, lr}
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a76:	6083      	str	r3, [r0, #8]
 8004a78:	8181      	strh	r1, [r0, #12]
 8004a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8004a7c:	81c2      	strh	r2, [r0, #14]
 8004a7e:	6183      	str	r3, [r0, #24]
 8004a80:	4619      	mov	r1, r3
 8004a82:	2208      	movs	r2, #8
 8004a84:	305c      	adds	r0, #92	; 0x5c
 8004a86:	f7ff fdd7 	bl	8004638 <memset>
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <std+0x38>)
 8004a8c:	6263      	str	r3, [r4, #36]	; 0x24
 8004a8e:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <std+0x3c>)
 8004a90:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a92:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <std+0x40>)
 8004a94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a96:	4b05      	ldr	r3, [pc, #20]	; (8004aac <std+0x44>)
 8004a98:	6224      	str	r4, [r4, #32]
 8004a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a9c:	bd10      	pop	{r4, pc}
 8004a9e:	bf00      	nop
 8004aa0:	08005471 	.word	0x08005471
 8004aa4:	08005493 	.word	0x08005493
 8004aa8:	080054cb 	.word	0x080054cb
 8004aac:	080054ef 	.word	0x080054ef

08004ab0 <_cleanup_r>:
 8004ab0:	4901      	ldr	r1, [pc, #4]	; (8004ab8 <_cleanup_r+0x8>)
 8004ab2:	f000 b8af 	b.w	8004c14 <_fwalk_reent>
 8004ab6:	bf00      	nop
 8004ab8:	080049f1 	.word	0x080049f1

08004abc <__sfmoreglue>:
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	1e4a      	subs	r2, r1, #1
 8004ac0:	2568      	movs	r5, #104	; 0x68
 8004ac2:	4355      	muls	r5, r2
 8004ac4:	460e      	mov	r6, r1
 8004ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004aca:	f000 f979 	bl	8004dc0 <_malloc_r>
 8004ace:	4604      	mov	r4, r0
 8004ad0:	b140      	cbz	r0, 8004ae4 <__sfmoreglue+0x28>
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ad8:	300c      	adds	r0, #12
 8004ada:	60a0      	str	r0, [r4, #8]
 8004adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ae0:	f7ff fdaa 	bl	8004638 <memset>
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	bd70      	pop	{r4, r5, r6, pc}

08004ae8 <__sfp_lock_acquire>:
 8004ae8:	4801      	ldr	r0, [pc, #4]	; (8004af0 <__sfp_lock_acquire+0x8>)
 8004aea:	f000 b8b3 	b.w	8004c54 <__retarget_lock_acquire_recursive>
 8004aee:	bf00      	nop
 8004af0:	2000025c 	.word	0x2000025c

08004af4 <__sfp_lock_release>:
 8004af4:	4801      	ldr	r0, [pc, #4]	; (8004afc <__sfp_lock_release+0x8>)
 8004af6:	f000 b8ae 	b.w	8004c56 <__retarget_lock_release_recursive>
 8004afa:	bf00      	nop
 8004afc:	2000025c 	.word	0x2000025c

08004b00 <__sinit_lock_acquire>:
 8004b00:	4801      	ldr	r0, [pc, #4]	; (8004b08 <__sinit_lock_acquire+0x8>)
 8004b02:	f000 b8a7 	b.w	8004c54 <__retarget_lock_acquire_recursive>
 8004b06:	bf00      	nop
 8004b08:	20000257 	.word	0x20000257

08004b0c <__sinit_lock_release>:
 8004b0c:	4801      	ldr	r0, [pc, #4]	; (8004b14 <__sinit_lock_release+0x8>)
 8004b0e:	f000 b8a2 	b.w	8004c56 <__retarget_lock_release_recursive>
 8004b12:	bf00      	nop
 8004b14:	20000257 	.word	0x20000257

08004b18 <__sinit>:
 8004b18:	b510      	push	{r4, lr}
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	f7ff fff0 	bl	8004b00 <__sinit_lock_acquire>
 8004b20:	69a3      	ldr	r3, [r4, #24]
 8004b22:	b11b      	cbz	r3, 8004b2c <__sinit+0x14>
 8004b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b28:	f7ff bff0 	b.w	8004b0c <__sinit_lock_release>
 8004b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b30:	6523      	str	r3, [r4, #80]	; 0x50
 8004b32:	4b13      	ldr	r3, [pc, #76]	; (8004b80 <__sinit+0x68>)
 8004b34:	4a13      	ldr	r2, [pc, #76]	; (8004b84 <__sinit+0x6c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b3a:	42a3      	cmp	r3, r4
 8004b3c:	bf04      	itt	eq
 8004b3e:	2301      	moveq	r3, #1
 8004b40:	61a3      	streq	r3, [r4, #24]
 8004b42:	4620      	mov	r0, r4
 8004b44:	f000 f820 	bl	8004b88 <__sfp>
 8004b48:	6060      	str	r0, [r4, #4]
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	f000 f81c 	bl	8004b88 <__sfp>
 8004b50:	60a0      	str	r0, [r4, #8]
 8004b52:	4620      	mov	r0, r4
 8004b54:	f000 f818 	bl	8004b88 <__sfp>
 8004b58:	2200      	movs	r2, #0
 8004b5a:	60e0      	str	r0, [r4, #12]
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	6860      	ldr	r0, [r4, #4]
 8004b60:	f7ff ff82 	bl	8004a68 <std>
 8004b64:	68a0      	ldr	r0, [r4, #8]
 8004b66:	2201      	movs	r2, #1
 8004b68:	2109      	movs	r1, #9
 8004b6a:	f7ff ff7d 	bl	8004a68 <std>
 8004b6e:	68e0      	ldr	r0, [r4, #12]
 8004b70:	2202      	movs	r2, #2
 8004b72:	2112      	movs	r1, #18
 8004b74:	f7ff ff78 	bl	8004a68 <std>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	61a3      	str	r3, [r4, #24]
 8004b7c:	e7d2      	b.n	8004b24 <__sinit+0xc>
 8004b7e:	bf00      	nop
 8004b80:	080085f4 	.word	0x080085f4
 8004b84:	08004ab1 	.word	0x08004ab1

08004b88 <__sfp>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	4607      	mov	r7, r0
 8004b8c:	f7ff ffac 	bl	8004ae8 <__sfp_lock_acquire>
 8004b90:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <__sfp+0x84>)
 8004b92:	681e      	ldr	r6, [r3, #0]
 8004b94:	69b3      	ldr	r3, [r6, #24]
 8004b96:	b913      	cbnz	r3, 8004b9e <__sfp+0x16>
 8004b98:	4630      	mov	r0, r6
 8004b9a:	f7ff ffbd 	bl	8004b18 <__sinit>
 8004b9e:	3648      	adds	r6, #72	; 0x48
 8004ba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	d503      	bpl.n	8004bb0 <__sfp+0x28>
 8004ba8:	6833      	ldr	r3, [r6, #0]
 8004baa:	b30b      	cbz	r3, 8004bf0 <__sfp+0x68>
 8004bac:	6836      	ldr	r6, [r6, #0]
 8004bae:	e7f7      	b.n	8004ba0 <__sfp+0x18>
 8004bb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bb4:	b9d5      	cbnz	r5, 8004bec <__sfp+0x64>
 8004bb6:	4b16      	ldr	r3, [pc, #88]	; (8004c10 <__sfp+0x88>)
 8004bb8:	60e3      	str	r3, [r4, #12]
 8004bba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bbe:	6665      	str	r5, [r4, #100]	; 0x64
 8004bc0:	f000 f847 	bl	8004c52 <__retarget_lock_init_recursive>
 8004bc4:	f7ff ff96 	bl	8004af4 <__sfp_lock_release>
 8004bc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004bcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004bd0:	6025      	str	r5, [r4, #0]
 8004bd2:	61a5      	str	r5, [r4, #24]
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bdc:	f7ff fd2c 	bl	8004638 <memset>
 8004be0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004be4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004be8:	4620      	mov	r0, r4
 8004bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bec:	3468      	adds	r4, #104	; 0x68
 8004bee:	e7d9      	b.n	8004ba4 <__sfp+0x1c>
 8004bf0:	2104      	movs	r1, #4
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	f7ff ff62 	bl	8004abc <__sfmoreglue>
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	6030      	str	r0, [r6, #0]
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d1d5      	bne.n	8004bac <__sfp+0x24>
 8004c00:	f7ff ff78 	bl	8004af4 <__sfp_lock_release>
 8004c04:	230c      	movs	r3, #12
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	e7ee      	b.n	8004be8 <__sfp+0x60>
 8004c0a:	bf00      	nop
 8004c0c:	080085f4 	.word	0x080085f4
 8004c10:	ffff0001 	.word	0xffff0001

08004c14 <_fwalk_reent>:
 8004c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c18:	4606      	mov	r6, r0
 8004c1a:	4688      	mov	r8, r1
 8004c1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c20:	2700      	movs	r7, #0
 8004c22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c26:	f1b9 0901 	subs.w	r9, r9, #1
 8004c2a:	d505      	bpl.n	8004c38 <_fwalk_reent+0x24>
 8004c2c:	6824      	ldr	r4, [r4, #0]
 8004c2e:	2c00      	cmp	r4, #0
 8004c30:	d1f7      	bne.n	8004c22 <_fwalk_reent+0xe>
 8004c32:	4638      	mov	r0, r7
 8004c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c38:	89ab      	ldrh	r3, [r5, #12]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d907      	bls.n	8004c4e <_fwalk_reent+0x3a>
 8004c3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c42:	3301      	adds	r3, #1
 8004c44:	d003      	beq.n	8004c4e <_fwalk_reent+0x3a>
 8004c46:	4629      	mov	r1, r5
 8004c48:	4630      	mov	r0, r6
 8004c4a:	47c0      	blx	r8
 8004c4c:	4307      	orrs	r7, r0
 8004c4e:	3568      	adds	r5, #104	; 0x68
 8004c50:	e7e9      	b.n	8004c26 <_fwalk_reent+0x12>

08004c52 <__retarget_lock_init_recursive>:
 8004c52:	4770      	bx	lr

08004c54 <__retarget_lock_acquire_recursive>:
 8004c54:	4770      	bx	lr

08004c56 <__retarget_lock_release_recursive>:
 8004c56:	4770      	bx	lr

08004c58 <__swhatbuf_r>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	460e      	mov	r6, r1
 8004c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c60:	2900      	cmp	r1, #0
 8004c62:	b096      	sub	sp, #88	; 0x58
 8004c64:	4614      	mov	r4, r2
 8004c66:	461d      	mov	r5, r3
 8004c68:	da07      	bge.n	8004c7a <__swhatbuf_r+0x22>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	602b      	str	r3, [r5, #0]
 8004c6e:	89b3      	ldrh	r3, [r6, #12]
 8004c70:	061a      	lsls	r2, r3, #24
 8004c72:	d410      	bmi.n	8004c96 <__swhatbuf_r+0x3e>
 8004c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c78:	e00e      	b.n	8004c98 <__swhatbuf_r+0x40>
 8004c7a:	466a      	mov	r2, sp
 8004c7c:	f000 fc5e 	bl	800553c <_fstat_r>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	dbf2      	blt.n	8004c6a <__swhatbuf_r+0x12>
 8004c84:	9a01      	ldr	r2, [sp, #4]
 8004c86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c8e:	425a      	negs	r2, r3
 8004c90:	415a      	adcs	r2, r3
 8004c92:	602a      	str	r2, [r5, #0]
 8004c94:	e7ee      	b.n	8004c74 <__swhatbuf_r+0x1c>
 8004c96:	2340      	movs	r3, #64	; 0x40
 8004c98:	2000      	movs	r0, #0
 8004c9a:	6023      	str	r3, [r4, #0]
 8004c9c:	b016      	add	sp, #88	; 0x58
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}

08004ca0 <__smakebuf_r>:
 8004ca0:	898b      	ldrh	r3, [r1, #12]
 8004ca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ca4:	079d      	lsls	r5, r3, #30
 8004ca6:	4606      	mov	r6, r0
 8004ca8:	460c      	mov	r4, r1
 8004caa:	d507      	bpl.n	8004cbc <__smakebuf_r+0x1c>
 8004cac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	6123      	str	r3, [r4, #16]
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	6163      	str	r3, [r4, #20]
 8004cb8:	b002      	add	sp, #8
 8004cba:	bd70      	pop	{r4, r5, r6, pc}
 8004cbc:	ab01      	add	r3, sp, #4
 8004cbe:	466a      	mov	r2, sp
 8004cc0:	f7ff ffca 	bl	8004c58 <__swhatbuf_r>
 8004cc4:	9900      	ldr	r1, [sp, #0]
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f000 f879 	bl	8004dc0 <_malloc_r>
 8004cce:	b948      	cbnz	r0, 8004ce4 <__smakebuf_r+0x44>
 8004cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cd4:	059a      	lsls	r2, r3, #22
 8004cd6:	d4ef      	bmi.n	8004cb8 <__smakebuf_r+0x18>
 8004cd8:	f023 0303 	bic.w	r3, r3, #3
 8004cdc:	f043 0302 	orr.w	r3, r3, #2
 8004ce0:	81a3      	strh	r3, [r4, #12]
 8004ce2:	e7e3      	b.n	8004cac <__smakebuf_r+0xc>
 8004ce4:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <__smakebuf_r+0x7c>)
 8004ce6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	6020      	str	r0, [r4, #0]
 8004cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	9b00      	ldr	r3, [sp, #0]
 8004cf4:	6163      	str	r3, [r4, #20]
 8004cf6:	9b01      	ldr	r3, [sp, #4]
 8004cf8:	6120      	str	r0, [r4, #16]
 8004cfa:	b15b      	cbz	r3, 8004d14 <__smakebuf_r+0x74>
 8004cfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d00:	4630      	mov	r0, r6
 8004d02:	f000 fc2d 	bl	8005560 <_isatty_r>
 8004d06:	b128      	cbz	r0, 8004d14 <__smakebuf_r+0x74>
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	81a3      	strh	r3, [r4, #12]
 8004d14:	89a0      	ldrh	r0, [r4, #12]
 8004d16:	4305      	orrs	r5, r0
 8004d18:	81a5      	strh	r5, [r4, #12]
 8004d1a:	e7cd      	b.n	8004cb8 <__smakebuf_r+0x18>
 8004d1c:	08004ab1 	.word	0x08004ab1

08004d20 <_free_r>:
 8004d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d22:	2900      	cmp	r1, #0
 8004d24:	d048      	beq.n	8004db8 <_free_r+0x98>
 8004d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d2a:	9001      	str	r0, [sp, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d32:	bfb8      	it	lt
 8004d34:	18e4      	addlt	r4, r4, r3
 8004d36:	f000 fc35 	bl	80055a4 <__malloc_lock>
 8004d3a:	4a20      	ldr	r2, [pc, #128]	; (8004dbc <_free_r+0x9c>)
 8004d3c:	9801      	ldr	r0, [sp, #4]
 8004d3e:	6813      	ldr	r3, [r2, #0]
 8004d40:	4615      	mov	r5, r2
 8004d42:	b933      	cbnz	r3, 8004d52 <_free_r+0x32>
 8004d44:	6063      	str	r3, [r4, #4]
 8004d46:	6014      	str	r4, [r2, #0]
 8004d48:	b003      	add	sp, #12
 8004d4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d4e:	f000 bc2f 	b.w	80055b0 <__malloc_unlock>
 8004d52:	42a3      	cmp	r3, r4
 8004d54:	d90b      	bls.n	8004d6e <_free_r+0x4e>
 8004d56:	6821      	ldr	r1, [r4, #0]
 8004d58:	1862      	adds	r2, r4, r1
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	bf04      	itt	eq
 8004d5e:	681a      	ldreq	r2, [r3, #0]
 8004d60:	685b      	ldreq	r3, [r3, #4]
 8004d62:	6063      	str	r3, [r4, #4]
 8004d64:	bf04      	itt	eq
 8004d66:	1852      	addeq	r2, r2, r1
 8004d68:	6022      	streq	r2, [r4, #0]
 8004d6a:	602c      	str	r4, [r5, #0]
 8004d6c:	e7ec      	b.n	8004d48 <_free_r+0x28>
 8004d6e:	461a      	mov	r2, r3
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	b10b      	cbz	r3, 8004d78 <_free_r+0x58>
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d9fa      	bls.n	8004d6e <_free_r+0x4e>
 8004d78:	6811      	ldr	r1, [r2, #0]
 8004d7a:	1855      	adds	r5, r2, r1
 8004d7c:	42a5      	cmp	r5, r4
 8004d7e:	d10b      	bne.n	8004d98 <_free_r+0x78>
 8004d80:	6824      	ldr	r4, [r4, #0]
 8004d82:	4421      	add	r1, r4
 8004d84:	1854      	adds	r4, r2, r1
 8004d86:	42a3      	cmp	r3, r4
 8004d88:	6011      	str	r1, [r2, #0]
 8004d8a:	d1dd      	bne.n	8004d48 <_free_r+0x28>
 8004d8c:	681c      	ldr	r4, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	6053      	str	r3, [r2, #4]
 8004d92:	4421      	add	r1, r4
 8004d94:	6011      	str	r1, [r2, #0]
 8004d96:	e7d7      	b.n	8004d48 <_free_r+0x28>
 8004d98:	d902      	bls.n	8004da0 <_free_r+0x80>
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	6003      	str	r3, [r0, #0]
 8004d9e:	e7d3      	b.n	8004d48 <_free_r+0x28>
 8004da0:	6825      	ldr	r5, [r4, #0]
 8004da2:	1961      	adds	r1, r4, r5
 8004da4:	428b      	cmp	r3, r1
 8004da6:	bf04      	itt	eq
 8004da8:	6819      	ldreq	r1, [r3, #0]
 8004daa:	685b      	ldreq	r3, [r3, #4]
 8004dac:	6063      	str	r3, [r4, #4]
 8004dae:	bf04      	itt	eq
 8004db0:	1949      	addeq	r1, r1, r5
 8004db2:	6021      	streq	r1, [r4, #0]
 8004db4:	6054      	str	r4, [r2, #4]
 8004db6:	e7c7      	b.n	8004d48 <_free_r+0x28>
 8004db8:	b003      	add	sp, #12
 8004dba:	bd30      	pop	{r4, r5, pc}
 8004dbc:	20000094 	.word	0x20000094

08004dc0 <_malloc_r>:
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	1ccd      	adds	r5, r1, #3
 8004dc4:	f025 0503 	bic.w	r5, r5, #3
 8004dc8:	3508      	adds	r5, #8
 8004dca:	2d0c      	cmp	r5, #12
 8004dcc:	bf38      	it	cc
 8004dce:	250c      	movcc	r5, #12
 8004dd0:	2d00      	cmp	r5, #0
 8004dd2:	4606      	mov	r6, r0
 8004dd4:	db01      	blt.n	8004dda <_malloc_r+0x1a>
 8004dd6:	42a9      	cmp	r1, r5
 8004dd8:	d903      	bls.n	8004de2 <_malloc_r+0x22>
 8004dda:	230c      	movs	r3, #12
 8004ddc:	6033      	str	r3, [r6, #0]
 8004dde:	2000      	movs	r0, #0
 8004de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de2:	f000 fbdf 	bl	80055a4 <__malloc_lock>
 8004de6:	4921      	ldr	r1, [pc, #132]	; (8004e6c <_malloc_r+0xac>)
 8004de8:	680a      	ldr	r2, [r1, #0]
 8004dea:	4614      	mov	r4, r2
 8004dec:	b99c      	cbnz	r4, 8004e16 <_malloc_r+0x56>
 8004dee:	4f20      	ldr	r7, [pc, #128]	; (8004e70 <_malloc_r+0xb0>)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	b923      	cbnz	r3, 8004dfe <_malloc_r+0x3e>
 8004df4:	4621      	mov	r1, r4
 8004df6:	4630      	mov	r0, r6
 8004df8:	f000 fb2a 	bl	8005450 <_sbrk_r>
 8004dfc:	6038      	str	r0, [r7, #0]
 8004dfe:	4629      	mov	r1, r5
 8004e00:	4630      	mov	r0, r6
 8004e02:	f000 fb25 	bl	8005450 <_sbrk_r>
 8004e06:	1c43      	adds	r3, r0, #1
 8004e08:	d123      	bne.n	8004e52 <_malloc_r+0x92>
 8004e0a:	230c      	movs	r3, #12
 8004e0c:	6033      	str	r3, [r6, #0]
 8004e0e:	4630      	mov	r0, r6
 8004e10:	f000 fbce 	bl	80055b0 <__malloc_unlock>
 8004e14:	e7e3      	b.n	8004dde <_malloc_r+0x1e>
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	1b5b      	subs	r3, r3, r5
 8004e1a:	d417      	bmi.n	8004e4c <_malloc_r+0x8c>
 8004e1c:	2b0b      	cmp	r3, #11
 8004e1e:	d903      	bls.n	8004e28 <_malloc_r+0x68>
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	441c      	add	r4, r3
 8004e24:	6025      	str	r5, [r4, #0]
 8004e26:	e004      	b.n	8004e32 <_malloc_r+0x72>
 8004e28:	6863      	ldr	r3, [r4, #4]
 8004e2a:	42a2      	cmp	r2, r4
 8004e2c:	bf0c      	ite	eq
 8004e2e:	600b      	streq	r3, [r1, #0]
 8004e30:	6053      	strne	r3, [r2, #4]
 8004e32:	4630      	mov	r0, r6
 8004e34:	f000 fbbc 	bl	80055b0 <__malloc_unlock>
 8004e38:	f104 000b 	add.w	r0, r4, #11
 8004e3c:	1d23      	adds	r3, r4, #4
 8004e3e:	f020 0007 	bic.w	r0, r0, #7
 8004e42:	1ac2      	subs	r2, r0, r3
 8004e44:	d0cc      	beq.n	8004de0 <_malloc_r+0x20>
 8004e46:	1a1b      	subs	r3, r3, r0
 8004e48:	50a3      	str	r3, [r4, r2]
 8004e4a:	e7c9      	b.n	8004de0 <_malloc_r+0x20>
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	6864      	ldr	r4, [r4, #4]
 8004e50:	e7cc      	b.n	8004dec <_malloc_r+0x2c>
 8004e52:	1cc4      	adds	r4, r0, #3
 8004e54:	f024 0403 	bic.w	r4, r4, #3
 8004e58:	42a0      	cmp	r0, r4
 8004e5a:	d0e3      	beq.n	8004e24 <_malloc_r+0x64>
 8004e5c:	1a21      	subs	r1, r4, r0
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f000 faf6 	bl	8005450 <_sbrk_r>
 8004e64:	3001      	adds	r0, #1
 8004e66:	d1dd      	bne.n	8004e24 <_malloc_r+0x64>
 8004e68:	e7cf      	b.n	8004e0a <_malloc_r+0x4a>
 8004e6a:	bf00      	nop
 8004e6c:	20000094 	.word	0x20000094
 8004e70:	20000098 	.word	0x20000098

08004e74 <__sfputc_r>:
 8004e74:	6893      	ldr	r3, [r2, #8]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	b410      	push	{r4}
 8004e7c:	6093      	str	r3, [r2, #8]
 8004e7e:	da08      	bge.n	8004e92 <__sfputc_r+0x1e>
 8004e80:	6994      	ldr	r4, [r2, #24]
 8004e82:	42a3      	cmp	r3, r4
 8004e84:	db01      	blt.n	8004e8a <__sfputc_r+0x16>
 8004e86:	290a      	cmp	r1, #10
 8004e88:	d103      	bne.n	8004e92 <__sfputc_r+0x1e>
 8004e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e8e:	f7ff bc69 	b.w	8004764 <__swbuf_r>
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	1c58      	adds	r0, r3, #1
 8004e96:	6010      	str	r0, [r2, #0]
 8004e98:	7019      	strb	r1, [r3, #0]
 8004e9a:	4608      	mov	r0, r1
 8004e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <__sfputs_r>:
 8004ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea4:	4606      	mov	r6, r0
 8004ea6:	460f      	mov	r7, r1
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	18d5      	adds	r5, r2, r3
 8004eac:	42ac      	cmp	r4, r5
 8004eae:	d101      	bne.n	8004eb4 <__sfputs_r+0x12>
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e007      	b.n	8004ec4 <__sfputs_r+0x22>
 8004eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb8:	463a      	mov	r2, r7
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f7ff ffda 	bl	8004e74 <__sfputc_r>
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	d1f3      	bne.n	8004eac <__sfputs_r+0xa>
 8004ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ec8 <_vfiprintf_r>:
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	460d      	mov	r5, r1
 8004ece:	b09d      	sub	sp, #116	; 0x74
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	4698      	mov	r8, r3
 8004ed4:	4606      	mov	r6, r0
 8004ed6:	b118      	cbz	r0, 8004ee0 <_vfiprintf_r+0x18>
 8004ed8:	6983      	ldr	r3, [r0, #24]
 8004eda:	b90b      	cbnz	r3, 8004ee0 <_vfiprintf_r+0x18>
 8004edc:	f7ff fe1c 	bl	8004b18 <__sinit>
 8004ee0:	4b89      	ldr	r3, [pc, #548]	; (8005108 <_vfiprintf_r+0x240>)
 8004ee2:	429d      	cmp	r5, r3
 8004ee4:	d11b      	bne.n	8004f1e <_vfiprintf_r+0x56>
 8004ee6:	6875      	ldr	r5, [r6, #4]
 8004ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eea:	07d9      	lsls	r1, r3, #31
 8004eec:	d405      	bmi.n	8004efa <_vfiprintf_r+0x32>
 8004eee:	89ab      	ldrh	r3, [r5, #12]
 8004ef0:	059a      	lsls	r2, r3, #22
 8004ef2:	d402      	bmi.n	8004efa <_vfiprintf_r+0x32>
 8004ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ef6:	f7ff fead 	bl	8004c54 <__retarget_lock_acquire_recursive>
 8004efa:	89ab      	ldrh	r3, [r5, #12]
 8004efc:	071b      	lsls	r3, r3, #28
 8004efe:	d501      	bpl.n	8004f04 <_vfiprintf_r+0x3c>
 8004f00:	692b      	ldr	r3, [r5, #16]
 8004f02:	b9eb      	cbnz	r3, 8004f40 <_vfiprintf_r+0x78>
 8004f04:	4629      	mov	r1, r5
 8004f06:	4630      	mov	r0, r6
 8004f08:	f7ff fc7e 	bl	8004808 <__swsetup_r>
 8004f0c:	b1c0      	cbz	r0, 8004f40 <_vfiprintf_r+0x78>
 8004f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f10:	07dc      	lsls	r4, r3, #31
 8004f12:	d50e      	bpl.n	8004f32 <_vfiprintf_r+0x6a>
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	b01d      	add	sp, #116	; 0x74
 8004f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1e:	4b7b      	ldr	r3, [pc, #492]	; (800510c <_vfiprintf_r+0x244>)
 8004f20:	429d      	cmp	r5, r3
 8004f22:	d101      	bne.n	8004f28 <_vfiprintf_r+0x60>
 8004f24:	68b5      	ldr	r5, [r6, #8]
 8004f26:	e7df      	b.n	8004ee8 <_vfiprintf_r+0x20>
 8004f28:	4b79      	ldr	r3, [pc, #484]	; (8005110 <_vfiprintf_r+0x248>)
 8004f2a:	429d      	cmp	r5, r3
 8004f2c:	bf08      	it	eq
 8004f2e:	68f5      	ldreq	r5, [r6, #12]
 8004f30:	e7da      	b.n	8004ee8 <_vfiprintf_r+0x20>
 8004f32:	89ab      	ldrh	r3, [r5, #12]
 8004f34:	0598      	lsls	r0, r3, #22
 8004f36:	d4ed      	bmi.n	8004f14 <_vfiprintf_r+0x4c>
 8004f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f3a:	f7ff fe8c 	bl	8004c56 <__retarget_lock_release_recursive>
 8004f3e:	e7e9      	b.n	8004f14 <_vfiprintf_r+0x4c>
 8004f40:	2300      	movs	r3, #0
 8004f42:	9309      	str	r3, [sp, #36]	; 0x24
 8004f44:	2320      	movs	r3, #32
 8004f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f4e:	2330      	movs	r3, #48	; 0x30
 8004f50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005114 <_vfiprintf_r+0x24c>
 8004f54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f58:	f04f 0901 	mov.w	r9, #1
 8004f5c:	4623      	mov	r3, r4
 8004f5e:	469a      	mov	sl, r3
 8004f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f64:	b10a      	cbz	r2, 8004f6a <_vfiprintf_r+0xa2>
 8004f66:	2a25      	cmp	r2, #37	; 0x25
 8004f68:	d1f9      	bne.n	8004f5e <_vfiprintf_r+0x96>
 8004f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f6e:	d00b      	beq.n	8004f88 <_vfiprintf_r+0xc0>
 8004f70:	465b      	mov	r3, fp
 8004f72:	4622      	mov	r2, r4
 8004f74:	4629      	mov	r1, r5
 8004f76:	4630      	mov	r0, r6
 8004f78:	f7ff ff93 	bl	8004ea2 <__sfputs_r>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	f000 80aa 	beq.w	80050d6 <_vfiprintf_r+0x20e>
 8004f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f84:	445a      	add	r2, fp
 8004f86:	9209      	str	r2, [sp, #36]	; 0x24
 8004f88:	f89a 3000 	ldrb.w	r3, [sl]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80a2 	beq.w	80050d6 <_vfiprintf_r+0x20e>
 8004f92:	2300      	movs	r3, #0
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295
 8004f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f9c:	f10a 0a01 	add.w	sl, sl, #1
 8004fa0:	9304      	str	r3, [sp, #16]
 8004fa2:	9307      	str	r3, [sp, #28]
 8004fa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fa8:	931a      	str	r3, [sp, #104]	; 0x68
 8004faa:	4654      	mov	r4, sl
 8004fac:	2205      	movs	r2, #5
 8004fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb2:	4858      	ldr	r0, [pc, #352]	; (8005114 <_vfiprintf_r+0x24c>)
 8004fb4:	f7fb f90c 	bl	80001d0 <memchr>
 8004fb8:	9a04      	ldr	r2, [sp, #16]
 8004fba:	b9d8      	cbnz	r0, 8004ff4 <_vfiprintf_r+0x12c>
 8004fbc:	06d1      	lsls	r1, r2, #27
 8004fbe:	bf44      	itt	mi
 8004fc0:	2320      	movmi	r3, #32
 8004fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fc6:	0713      	lsls	r3, r2, #28
 8004fc8:	bf44      	itt	mi
 8004fca:	232b      	movmi	r3, #43	; 0x2b
 8004fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8004fd6:	d015      	beq.n	8005004 <_vfiprintf_r+0x13c>
 8004fd8:	9a07      	ldr	r2, [sp, #28]
 8004fda:	4654      	mov	r4, sl
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f04f 0c0a 	mov.w	ip, #10
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fe8:	3b30      	subs	r3, #48	; 0x30
 8004fea:	2b09      	cmp	r3, #9
 8004fec:	d94e      	bls.n	800508c <_vfiprintf_r+0x1c4>
 8004fee:	b1b0      	cbz	r0, 800501e <_vfiprintf_r+0x156>
 8004ff0:	9207      	str	r2, [sp, #28]
 8004ff2:	e014      	b.n	800501e <_vfiprintf_r+0x156>
 8004ff4:	eba0 0308 	sub.w	r3, r0, r8
 8004ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	9304      	str	r3, [sp, #16]
 8005000:	46a2      	mov	sl, r4
 8005002:	e7d2      	b.n	8004faa <_vfiprintf_r+0xe2>
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	1d19      	adds	r1, r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	9103      	str	r1, [sp, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	bfbb      	ittet	lt
 8005010:	425b      	neglt	r3, r3
 8005012:	f042 0202 	orrlt.w	r2, r2, #2
 8005016:	9307      	strge	r3, [sp, #28]
 8005018:	9307      	strlt	r3, [sp, #28]
 800501a:	bfb8      	it	lt
 800501c:	9204      	strlt	r2, [sp, #16]
 800501e:	7823      	ldrb	r3, [r4, #0]
 8005020:	2b2e      	cmp	r3, #46	; 0x2e
 8005022:	d10c      	bne.n	800503e <_vfiprintf_r+0x176>
 8005024:	7863      	ldrb	r3, [r4, #1]
 8005026:	2b2a      	cmp	r3, #42	; 0x2a
 8005028:	d135      	bne.n	8005096 <_vfiprintf_r+0x1ce>
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	1d1a      	adds	r2, r3, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	9203      	str	r2, [sp, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	bfb8      	it	lt
 8005036:	f04f 33ff 	movlt.w	r3, #4294967295
 800503a:	3402      	adds	r4, #2
 800503c:	9305      	str	r3, [sp, #20]
 800503e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005124 <_vfiprintf_r+0x25c>
 8005042:	7821      	ldrb	r1, [r4, #0]
 8005044:	2203      	movs	r2, #3
 8005046:	4650      	mov	r0, sl
 8005048:	f7fb f8c2 	bl	80001d0 <memchr>
 800504c:	b140      	cbz	r0, 8005060 <_vfiprintf_r+0x198>
 800504e:	2340      	movs	r3, #64	; 0x40
 8005050:	eba0 000a 	sub.w	r0, r0, sl
 8005054:	fa03 f000 	lsl.w	r0, r3, r0
 8005058:	9b04      	ldr	r3, [sp, #16]
 800505a:	4303      	orrs	r3, r0
 800505c:	3401      	adds	r4, #1
 800505e:	9304      	str	r3, [sp, #16]
 8005060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005064:	482c      	ldr	r0, [pc, #176]	; (8005118 <_vfiprintf_r+0x250>)
 8005066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800506a:	2206      	movs	r2, #6
 800506c:	f7fb f8b0 	bl	80001d0 <memchr>
 8005070:	2800      	cmp	r0, #0
 8005072:	d03f      	beq.n	80050f4 <_vfiprintf_r+0x22c>
 8005074:	4b29      	ldr	r3, [pc, #164]	; (800511c <_vfiprintf_r+0x254>)
 8005076:	bb1b      	cbnz	r3, 80050c0 <_vfiprintf_r+0x1f8>
 8005078:	9b03      	ldr	r3, [sp, #12]
 800507a:	3307      	adds	r3, #7
 800507c:	f023 0307 	bic.w	r3, r3, #7
 8005080:	3308      	adds	r3, #8
 8005082:	9303      	str	r3, [sp, #12]
 8005084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005086:	443b      	add	r3, r7
 8005088:	9309      	str	r3, [sp, #36]	; 0x24
 800508a:	e767      	b.n	8004f5c <_vfiprintf_r+0x94>
 800508c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005090:	460c      	mov	r4, r1
 8005092:	2001      	movs	r0, #1
 8005094:	e7a5      	b.n	8004fe2 <_vfiprintf_r+0x11a>
 8005096:	2300      	movs	r3, #0
 8005098:	3401      	adds	r4, #1
 800509a:	9305      	str	r3, [sp, #20]
 800509c:	4619      	mov	r1, r3
 800509e:	f04f 0c0a 	mov.w	ip, #10
 80050a2:	4620      	mov	r0, r4
 80050a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050a8:	3a30      	subs	r2, #48	; 0x30
 80050aa:	2a09      	cmp	r2, #9
 80050ac:	d903      	bls.n	80050b6 <_vfiprintf_r+0x1ee>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0c5      	beq.n	800503e <_vfiprintf_r+0x176>
 80050b2:	9105      	str	r1, [sp, #20]
 80050b4:	e7c3      	b.n	800503e <_vfiprintf_r+0x176>
 80050b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ba:	4604      	mov	r4, r0
 80050bc:	2301      	movs	r3, #1
 80050be:	e7f0      	b.n	80050a2 <_vfiprintf_r+0x1da>
 80050c0:	ab03      	add	r3, sp, #12
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	462a      	mov	r2, r5
 80050c6:	4b16      	ldr	r3, [pc, #88]	; (8005120 <_vfiprintf_r+0x258>)
 80050c8:	a904      	add	r1, sp, #16
 80050ca:	4630      	mov	r0, r6
 80050cc:	f3af 8000 	nop.w
 80050d0:	4607      	mov	r7, r0
 80050d2:	1c78      	adds	r0, r7, #1
 80050d4:	d1d6      	bne.n	8005084 <_vfiprintf_r+0x1bc>
 80050d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050d8:	07d9      	lsls	r1, r3, #31
 80050da:	d405      	bmi.n	80050e8 <_vfiprintf_r+0x220>
 80050dc:	89ab      	ldrh	r3, [r5, #12]
 80050de:	059a      	lsls	r2, r3, #22
 80050e0:	d402      	bmi.n	80050e8 <_vfiprintf_r+0x220>
 80050e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050e4:	f7ff fdb7 	bl	8004c56 <__retarget_lock_release_recursive>
 80050e8:	89ab      	ldrh	r3, [r5, #12]
 80050ea:	065b      	lsls	r3, r3, #25
 80050ec:	f53f af12 	bmi.w	8004f14 <_vfiprintf_r+0x4c>
 80050f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050f2:	e711      	b.n	8004f18 <_vfiprintf_r+0x50>
 80050f4:	ab03      	add	r3, sp, #12
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	462a      	mov	r2, r5
 80050fa:	4b09      	ldr	r3, [pc, #36]	; (8005120 <_vfiprintf_r+0x258>)
 80050fc:	a904      	add	r1, sp, #16
 80050fe:	4630      	mov	r0, r6
 8005100:	f000 f880 	bl	8005204 <_printf_i>
 8005104:	e7e4      	b.n	80050d0 <_vfiprintf_r+0x208>
 8005106:	bf00      	nop
 8005108:	08008618 	.word	0x08008618
 800510c:	08008638 	.word	0x08008638
 8005110:	080085f8 	.word	0x080085f8
 8005114:	08008658 	.word	0x08008658
 8005118:	08008662 	.word	0x08008662
 800511c:	00000000 	.word	0x00000000
 8005120:	08004ea3 	.word	0x08004ea3
 8005124:	0800865e 	.word	0x0800865e

08005128 <_printf_common>:
 8005128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800512c:	4616      	mov	r6, r2
 800512e:	4699      	mov	r9, r3
 8005130:	688a      	ldr	r2, [r1, #8]
 8005132:	690b      	ldr	r3, [r1, #16]
 8005134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005138:	4293      	cmp	r3, r2
 800513a:	bfb8      	it	lt
 800513c:	4613      	movlt	r3, r2
 800513e:	6033      	str	r3, [r6, #0]
 8005140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005144:	4607      	mov	r7, r0
 8005146:	460c      	mov	r4, r1
 8005148:	b10a      	cbz	r2, 800514e <_printf_common+0x26>
 800514a:	3301      	adds	r3, #1
 800514c:	6033      	str	r3, [r6, #0]
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	0699      	lsls	r1, r3, #26
 8005152:	bf42      	ittt	mi
 8005154:	6833      	ldrmi	r3, [r6, #0]
 8005156:	3302      	addmi	r3, #2
 8005158:	6033      	strmi	r3, [r6, #0]
 800515a:	6825      	ldr	r5, [r4, #0]
 800515c:	f015 0506 	ands.w	r5, r5, #6
 8005160:	d106      	bne.n	8005170 <_printf_common+0x48>
 8005162:	f104 0a19 	add.w	sl, r4, #25
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	6832      	ldr	r2, [r6, #0]
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	42ab      	cmp	r3, r5
 800516e:	dc26      	bgt.n	80051be <_printf_common+0x96>
 8005170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005174:	1e13      	subs	r3, r2, #0
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	bf18      	it	ne
 800517a:	2301      	movne	r3, #1
 800517c:	0692      	lsls	r2, r2, #26
 800517e:	d42b      	bmi.n	80051d8 <_printf_common+0xb0>
 8005180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005184:	4649      	mov	r1, r9
 8005186:	4638      	mov	r0, r7
 8005188:	47c0      	blx	r8
 800518a:	3001      	adds	r0, #1
 800518c:	d01e      	beq.n	80051cc <_printf_common+0xa4>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	68e5      	ldr	r5, [r4, #12]
 8005192:	6832      	ldr	r2, [r6, #0]
 8005194:	f003 0306 	and.w	r3, r3, #6
 8005198:	2b04      	cmp	r3, #4
 800519a:	bf08      	it	eq
 800519c:	1aad      	subeq	r5, r5, r2
 800519e:	68a3      	ldr	r3, [r4, #8]
 80051a0:	6922      	ldr	r2, [r4, #16]
 80051a2:	bf0c      	ite	eq
 80051a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a8:	2500      	movne	r5, #0
 80051aa:	4293      	cmp	r3, r2
 80051ac:	bfc4      	itt	gt
 80051ae:	1a9b      	subgt	r3, r3, r2
 80051b0:	18ed      	addgt	r5, r5, r3
 80051b2:	2600      	movs	r6, #0
 80051b4:	341a      	adds	r4, #26
 80051b6:	42b5      	cmp	r5, r6
 80051b8:	d11a      	bne.n	80051f0 <_printf_common+0xc8>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e008      	b.n	80051d0 <_printf_common+0xa8>
 80051be:	2301      	movs	r3, #1
 80051c0:	4652      	mov	r2, sl
 80051c2:	4649      	mov	r1, r9
 80051c4:	4638      	mov	r0, r7
 80051c6:	47c0      	blx	r8
 80051c8:	3001      	adds	r0, #1
 80051ca:	d103      	bne.n	80051d4 <_printf_common+0xac>
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295
 80051d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d4:	3501      	adds	r5, #1
 80051d6:	e7c6      	b.n	8005166 <_printf_common+0x3e>
 80051d8:	18e1      	adds	r1, r4, r3
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	2030      	movs	r0, #48	; 0x30
 80051de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051e2:	4422      	add	r2, r4
 80051e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ec:	3302      	adds	r3, #2
 80051ee:	e7c7      	b.n	8005180 <_printf_common+0x58>
 80051f0:	2301      	movs	r3, #1
 80051f2:	4622      	mov	r2, r4
 80051f4:	4649      	mov	r1, r9
 80051f6:	4638      	mov	r0, r7
 80051f8:	47c0      	blx	r8
 80051fa:	3001      	adds	r0, #1
 80051fc:	d0e6      	beq.n	80051cc <_printf_common+0xa4>
 80051fe:	3601      	adds	r6, #1
 8005200:	e7d9      	b.n	80051b6 <_printf_common+0x8e>
	...

08005204 <_printf_i>:
 8005204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	460c      	mov	r4, r1
 800520a:	4691      	mov	r9, r2
 800520c:	7e27      	ldrb	r7, [r4, #24]
 800520e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005210:	2f78      	cmp	r7, #120	; 0x78
 8005212:	4680      	mov	r8, r0
 8005214:	469a      	mov	sl, r3
 8005216:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800521a:	d807      	bhi.n	800522c <_printf_i+0x28>
 800521c:	2f62      	cmp	r7, #98	; 0x62
 800521e:	d80a      	bhi.n	8005236 <_printf_i+0x32>
 8005220:	2f00      	cmp	r7, #0
 8005222:	f000 80d8 	beq.w	80053d6 <_printf_i+0x1d2>
 8005226:	2f58      	cmp	r7, #88	; 0x58
 8005228:	f000 80a3 	beq.w	8005372 <_printf_i+0x16e>
 800522c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005234:	e03a      	b.n	80052ac <_printf_i+0xa8>
 8005236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800523a:	2b15      	cmp	r3, #21
 800523c:	d8f6      	bhi.n	800522c <_printf_i+0x28>
 800523e:	a001      	add	r0, pc, #4	; (adr r0, 8005244 <_printf_i+0x40>)
 8005240:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005244:	0800529d 	.word	0x0800529d
 8005248:	080052b1 	.word	0x080052b1
 800524c:	0800522d 	.word	0x0800522d
 8005250:	0800522d 	.word	0x0800522d
 8005254:	0800522d 	.word	0x0800522d
 8005258:	0800522d 	.word	0x0800522d
 800525c:	080052b1 	.word	0x080052b1
 8005260:	0800522d 	.word	0x0800522d
 8005264:	0800522d 	.word	0x0800522d
 8005268:	0800522d 	.word	0x0800522d
 800526c:	0800522d 	.word	0x0800522d
 8005270:	080053bd 	.word	0x080053bd
 8005274:	080052e1 	.word	0x080052e1
 8005278:	0800539f 	.word	0x0800539f
 800527c:	0800522d 	.word	0x0800522d
 8005280:	0800522d 	.word	0x0800522d
 8005284:	080053df 	.word	0x080053df
 8005288:	0800522d 	.word	0x0800522d
 800528c:	080052e1 	.word	0x080052e1
 8005290:	0800522d 	.word	0x0800522d
 8005294:	0800522d 	.word	0x0800522d
 8005298:	080053a7 	.word	0x080053a7
 800529c:	680b      	ldr	r3, [r1, #0]
 800529e:	1d1a      	adds	r2, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	600a      	str	r2, [r1, #0]
 80052a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0a3      	b.n	80053f8 <_printf_i+0x1f4>
 80052b0:	6825      	ldr	r5, [r4, #0]
 80052b2:	6808      	ldr	r0, [r1, #0]
 80052b4:	062e      	lsls	r6, r5, #24
 80052b6:	f100 0304 	add.w	r3, r0, #4
 80052ba:	d50a      	bpl.n	80052d2 <_printf_i+0xce>
 80052bc:	6805      	ldr	r5, [r0, #0]
 80052be:	600b      	str	r3, [r1, #0]
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	da03      	bge.n	80052cc <_printf_i+0xc8>
 80052c4:	232d      	movs	r3, #45	; 0x2d
 80052c6:	426d      	negs	r5, r5
 80052c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052cc:	485e      	ldr	r0, [pc, #376]	; (8005448 <_printf_i+0x244>)
 80052ce:	230a      	movs	r3, #10
 80052d0:	e019      	b.n	8005306 <_printf_i+0x102>
 80052d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052d6:	6805      	ldr	r5, [r0, #0]
 80052d8:	600b      	str	r3, [r1, #0]
 80052da:	bf18      	it	ne
 80052dc:	b22d      	sxthne	r5, r5
 80052de:	e7ef      	b.n	80052c0 <_printf_i+0xbc>
 80052e0:	680b      	ldr	r3, [r1, #0]
 80052e2:	6825      	ldr	r5, [r4, #0]
 80052e4:	1d18      	adds	r0, r3, #4
 80052e6:	6008      	str	r0, [r1, #0]
 80052e8:	0628      	lsls	r0, r5, #24
 80052ea:	d501      	bpl.n	80052f0 <_printf_i+0xec>
 80052ec:	681d      	ldr	r5, [r3, #0]
 80052ee:	e002      	b.n	80052f6 <_printf_i+0xf2>
 80052f0:	0669      	lsls	r1, r5, #25
 80052f2:	d5fb      	bpl.n	80052ec <_printf_i+0xe8>
 80052f4:	881d      	ldrh	r5, [r3, #0]
 80052f6:	4854      	ldr	r0, [pc, #336]	; (8005448 <_printf_i+0x244>)
 80052f8:	2f6f      	cmp	r7, #111	; 0x6f
 80052fa:	bf0c      	ite	eq
 80052fc:	2308      	moveq	r3, #8
 80052fe:	230a      	movne	r3, #10
 8005300:	2100      	movs	r1, #0
 8005302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005306:	6866      	ldr	r6, [r4, #4]
 8005308:	60a6      	str	r6, [r4, #8]
 800530a:	2e00      	cmp	r6, #0
 800530c:	bfa2      	ittt	ge
 800530e:	6821      	ldrge	r1, [r4, #0]
 8005310:	f021 0104 	bicge.w	r1, r1, #4
 8005314:	6021      	strge	r1, [r4, #0]
 8005316:	b90d      	cbnz	r5, 800531c <_printf_i+0x118>
 8005318:	2e00      	cmp	r6, #0
 800531a:	d04d      	beq.n	80053b8 <_printf_i+0x1b4>
 800531c:	4616      	mov	r6, r2
 800531e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005322:	fb03 5711 	mls	r7, r3, r1, r5
 8005326:	5dc7      	ldrb	r7, [r0, r7]
 8005328:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800532c:	462f      	mov	r7, r5
 800532e:	42bb      	cmp	r3, r7
 8005330:	460d      	mov	r5, r1
 8005332:	d9f4      	bls.n	800531e <_printf_i+0x11a>
 8005334:	2b08      	cmp	r3, #8
 8005336:	d10b      	bne.n	8005350 <_printf_i+0x14c>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	07df      	lsls	r7, r3, #31
 800533c:	d508      	bpl.n	8005350 <_printf_i+0x14c>
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	6861      	ldr	r1, [r4, #4]
 8005342:	4299      	cmp	r1, r3
 8005344:	bfde      	ittt	le
 8005346:	2330      	movle	r3, #48	; 0x30
 8005348:	f806 3c01 	strble.w	r3, [r6, #-1]
 800534c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005350:	1b92      	subs	r2, r2, r6
 8005352:	6122      	str	r2, [r4, #16]
 8005354:	f8cd a000 	str.w	sl, [sp]
 8005358:	464b      	mov	r3, r9
 800535a:	aa03      	add	r2, sp, #12
 800535c:	4621      	mov	r1, r4
 800535e:	4640      	mov	r0, r8
 8005360:	f7ff fee2 	bl	8005128 <_printf_common>
 8005364:	3001      	adds	r0, #1
 8005366:	d14c      	bne.n	8005402 <_printf_i+0x1fe>
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	b004      	add	sp, #16
 800536e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005372:	4835      	ldr	r0, [pc, #212]	; (8005448 <_printf_i+0x244>)
 8005374:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	680e      	ldr	r6, [r1, #0]
 800537c:	061f      	lsls	r7, r3, #24
 800537e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005382:	600e      	str	r6, [r1, #0]
 8005384:	d514      	bpl.n	80053b0 <_printf_i+0x1ac>
 8005386:	07d9      	lsls	r1, r3, #31
 8005388:	bf44      	itt	mi
 800538a:	f043 0320 	orrmi.w	r3, r3, #32
 800538e:	6023      	strmi	r3, [r4, #0]
 8005390:	b91d      	cbnz	r5, 800539a <_printf_i+0x196>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	f023 0320 	bic.w	r3, r3, #32
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	2310      	movs	r3, #16
 800539c:	e7b0      	b.n	8005300 <_printf_i+0xfc>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	f043 0320 	orr.w	r3, r3, #32
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	2378      	movs	r3, #120	; 0x78
 80053a8:	4828      	ldr	r0, [pc, #160]	; (800544c <_printf_i+0x248>)
 80053aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053ae:	e7e3      	b.n	8005378 <_printf_i+0x174>
 80053b0:	065e      	lsls	r6, r3, #25
 80053b2:	bf48      	it	mi
 80053b4:	b2ad      	uxthmi	r5, r5
 80053b6:	e7e6      	b.n	8005386 <_printf_i+0x182>
 80053b8:	4616      	mov	r6, r2
 80053ba:	e7bb      	b.n	8005334 <_printf_i+0x130>
 80053bc:	680b      	ldr	r3, [r1, #0]
 80053be:	6826      	ldr	r6, [r4, #0]
 80053c0:	6960      	ldr	r0, [r4, #20]
 80053c2:	1d1d      	adds	r5, r3, #4
 80053c4:	600d      	str	r5, [r1, #0]
 80053c6:	0635      	lsls	r5, r6, #24
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	d501      	bpl.n	80053d0 <_printf_i+0x1cc>
 80053cc:	6018      	str	r0, [r3, #0]
 80053ce:	e002      	b.n	80053d6 <_printf_i+0x1d2>
 80053d0:	0671      	lsls	r1, r6, #25
 80053d2:	d5fb      	bpl.n	80053cc <_printf_i+0x1c8>
 80053d4:	8018      	strh	r0, [r3, #0]
 80053d6:	2300      	movs	r3, #0
 80053d8:	6123      	str	r3, [r4, #16]
 80053da:	4616      	mov	r6, r2
 80053dc:	e7ba      	b.n	8005354 <_printf_i+0x150>
 80053de:	680b      	ldr	r3, [r1, #0]
 80053e0:	1d1a      	adds	r2, r3, #4
 80053e2:	600a      	str	r2, [r1, #0]
 80053e4:	681e      	ldr	r6, [r3, #0]
 80053e6:	6862      	ldr	r2, [r4, #4]
 80053e8:	2100      	movs	r1, #0
 80053ea:	4630      	mov	r0, r6
 80053ec:	f7fa fef0 	bl	80001d0 <memchr>
 80053f0:	b108      	cbz	r0, 80053f6 <_printf_i+0x1f2>
 80053f2:	1b80      	subs	r0, r0, r6
 80053f4:	6060      	str	r0, [r4, #4]
 80053f6:	6863      	ldr	r3, [r4, #4]
 80053f8:	6123      	str	r3, [r4, #16]
 80053fa:	2300      	movs	r3, #0
 80053fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005400:	e7a8      	b.n	8005354 <_printf_i+0x150>
 8005402:	6923      	ldr	r3, [r4, #16]
 8005404:	4632      	mov	r2, r6
 8005406:	4649      	mov	r1, r9
 8005408:	4640      	mov	r0, r8
 800540a:	47d0      	blx	sl
 800540c:	3001      	adds	r0, #1
 800540e:	d0ab      	beq.n	8005368 <_printf_i+0x164>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	079b      	lsls	r3, r3, #30
 8005414:	d413      	bmi.n	800543e <_printf_i+0x23a>
 8005416:	68e0      	ldr	r0, [r4, #12]
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	4298      	cmp	r0, r3
 800541c:	bfb8      	it	lt
 800541e:	4618      	movlt	r0, r3
 8005420:	e7a4      	b.n	800536c <_printf_i+0x168>
 8005422:	2301      	movs	r3, #1
 8005424:	4632      	mov	r2, r6
 8005426:	4649      	mov	r1, r9
 8005428:	4640      	mov	r0, r8
 800542a:	47d0      	blx	sl
 800542c:	3001      	adds	r0, #1
 800542e:	d09b      	beq.n	8005368 <_printf_i+0x164>
 8005430:	3501      	adds	r5, #1
 8005432:	68e3      	ldr	r3, [r4, #12]
 8005434:	9903      	ldr	r1, [sp, #12]
 8005436:	1a5b      	subs	r3, r3, r1
 8005438:	42ab      	cmp	r3, r5
 800543a:	dcf2      	bgt.n	8005422 <_printf_i+0x21e>
 800543c:	e7eb      	b.n	8005416 <_printf_i+0x212>
 800543e:	2500      	movs	r5, #0
 8005440:	f104 0619 	add.w	r6, r4, #25
 8005444:	e7f5      	b.n	8005432 <_printf_i+0x22e>
 8005446:	bf00      	nop
 8005448:	08008669 	.word	0x08008669
 800544c:	0800867a 	.word	0x0800867a

08005450 <_sbrk_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4d06      	ldr	r5, [pc, #24]	; (800546c <_sbrk_r+0x1c>)
 8005454:	2300      	movs	r3, #0
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	f7fc f9f8 	bl	8001850 <_sbrk>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_sbrk_r+0x1a>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_sbrk_r+0x1a>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	20000260 	.word	0x20000260

08005470 <__sread>:
 8005470:	b510      	push	{r4, lr}
 8005472:	460c      	mov	r4, r1
 8005474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005478:	f000 f8a0 	bl	80055bc <_read_r>
 800547c:	2800      	cmp	r0, #0
 800547e:	bfab      	itete	ge
 8005480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005482:	89a3      	ldrhlt	r3, [r4, #12]
 8005484:	181b      	addge	r3, r3, r0
 8005486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800548a:	bfac      	ite	ge
 800548c:	6563      	strge	r3, [r4, #84]	; 0x54
 800548e:	81a3      	strhlt	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__swrite>:
 8005492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005496:	461f      	mov	r7, r3
 8005498:	898b      	ldrh	r3, [r1, #12]
 800549a:	05db      	lsls	r3, r3, #23
 800549c:	4605      	mov	r5, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	4616      	mov	r6, r2
 80054a2:	d505      	bpl.n	80054b0 <__swrite+0x1e>
 80054a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a8:	2302      	movs	r3, #2
 80054aa:	2200      	movs	r2, #0
 80054ac:	f000 f868 	bl	8005580 <_lseek_r>
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ba:	81a3      	strh	r3, [r4, #12]
 80054bc:	4632      	mov	r2, r6
 80054be:	463b      	mov	r3, r7
 80054c0:	4628      	mov	r0, r5
 80054c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054c6:	f000 b817 	b.w	80054f8 <_write_r>

080054ca <__sseek>:
 80054ca:	b510      	push	{r4, lr}
 80054cc:	460c      	mov	r4, r1
 80054ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d2:	f000 f855 	bl	8005580 <_lseek_r>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	bf15      	itete	ne
 80054dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80054de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054e6:	81a3      	strheq	r3, [r4, #12]
 80054e8:	bf18      	it	ne
 80054ea:	81a3      	strhne	r3, [r4, #12]
 80054ec:	bd10      	pop	{r4, pc}

080054ee <__sclose>:
 80054ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f2:	f000 b813 	b.w	800551c <_close_r>
	...

080054f8 <_write_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d07      	ldr	r5, [pc, #28]	; (8005518 <_write_r+0x20>)
 80054fc:	4604      	mov	r4, r0
 80054fe:	4608      	mov	r0, r1
 8005500:	4611      	mov	r1, r2
 8005502:	2200      	movs	r2, #0
 8005504:	602a      	str	r2, [r5, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	f7fc f951 	bl	80017ae <_write>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_write_r+0x1e>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_write_r+0x1e>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20000260 	.word	0x20000260

0800551c <_close_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d06      	ldr	r5, [pc, #24]	; (8005538 <_close_r+0x1c>)
 8005520:	2300      	movs	r3, #0
 8005522:	4604      	mov	r4, r0
 8005524:	4608      	mov	r0, r1
 8005526:	602b      	str	r3, [r5, #0]
 8005528:	f7fc f95d 	bl	80017e6 <_close>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d102      	bne.n	8005536 <_close_r+0x1a>
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	b103      	cbz	r3, 8005536 <_close_r+0x1a>
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	20000260 	.word	0x20000260

0800553c <_fstat_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4d07      	ldr	r5, [pc, #28]	; (800555c <_fstat_r+0x20>)
 8005540:	2300      	movs	r3, #0
 8005542:	4604      	mov	r4, r0
 8005544:	4608      	mov	r0, r1
 8005546:	4611      	mov	r1, r2
 8005548:	602b      	str	r3, [r5, #0]
 800554a:	f7fc f958 	bl	80017fe <_fstat>
 800554e:	1c43      	adds	r3, r0, #1
 8005550:	d102      	bne.n	8005558 <_fstat_r+0x1c>
 8005552:	682b      	ldr	r3, [r5, #0]
 8005554:	b103      	cbz	r3, 8005558 <_fstat_r+0x1c>
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	bd38      	pop	{r3, r4, r5, pc}
 800555a:	bf00      	nop
 800555c:	20000260 	.word	0x20000260

08005560 <_isatty_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4d06      	ldr	r5, [pc, #24]	; (800557c <_isatty_r+0x1c>)
 8005564:	2300      	movs	r3, #0
 8005566:	4604      	mov	r4, r0
 8005568:	4608      	mov	r0, r1
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	f7fc f957 	bl	800181e <_isatty>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_isatty_r+0x1a>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_isatty_r+0x1a>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	20000260 	.word	0x20000260

08005580 <_lseek_r>:
 8005580:	b538      	push	{r3, r4, r5, lr}
 8005582:	4d07      	ldr	r5, [pc, #28]	; (80055a0 <_lseek_r+0x20>)
 8005584:	4604      	mov	r4, r0
 8005586:	4608      	mov	r0, r1
 8005588:	4611      	mov	r1, r2
 800558a:	2200      	movs	r2, #0
 800558c:	602a      	str	r2, [r5, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	f7fc f950 	bl	8001834 <_lseek>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d102      	bne.n	800559e <_lseek_r+0x1e>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	b103      	cbz	r3, 800559e <_lseek_r+0x1e>
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	bd38      	pop	{r3, r4, r5, pc}
 80055a0:	20000260 	.word	0x20000260

080055a4 <__malloc_lock>:
 80055a4:	4801      	ldr	r0, [pc, #4]	; (80055ac <__malloc_lock+0x8>)
 80055a6:	f7ff bb55 	b.w	8004c54 <__retarget_lock_acquire_recursive>
 80055aa:	bf00      	nop
 80055ac:	20000258 	.word	0x20000258

080055b0 <__malloc_unlock>:
 80055b0:	4801      	ldr	r0, [pc, #4]	; (80055b8 <__malloc_unlock+0x8>)
 80055b2:	f7ff bb50 	b.w	8004c56 <__retarget_lock_release_recursive>
 80055b6:	bf00      	nop
 80055b8:	20000258 	.word	0x20000258

080055bc <_read_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4d07      	ldr	r5, [pc, #28]	; (80055dc <_read_r+0x20>)
 80055c0:	4604      	mov	r4, r0
 80055c2:	4608      	mov	r0, r1
 80055c4:	4611      	mov	r1, r2
 80055c6:	2200      	movs	r2, #0
 80055c8:	602a      	str	r2, [r5, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f7fc f8d2 	bl	8001774 <_read>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d102      	bne.n	80055da <_read_r+0x1e>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	b103      	cbz	r3, 80055da <_read_r+0x1e>
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	20000260 	.word	0x20000260

080055e0 <_init>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	bf00      	nop
 80055e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e6:	bc08      	pop	{r3}
 80055e8:	469e      	mov	lr, r3
 80055ea:	4770      	bx	lr

080055ec <_fini>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr
